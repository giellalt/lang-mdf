#Distributed under the terms of the GNU General Public License version 3
# or any later version.

#=================================================== #
# ERZYA FUNCTIONS DEPENDENCY GRAMMAR
# for Mormula, ERME, PaBiVUS and Finno-Ugrian Society Fieldwork corpora #
# Constraint Grammar v3
#
# Copyright Jack Rueter <rueter.jack@gmail.com>
# 	    Jorma Luutonen <jorma.luutonen@utu.fi>
#           Mansur Saykhunov <tatcorpus@gmail.com>
#
# GNU General Public License v3
#
# =================================================== #
#  Aligned with Sámi language technology project 2003-2006, University of Tromsø # 


# ========== #
# Delimiters #
# ========== #


DELIMITERS = "<$.>" "<$!>" "<$?>" "<$_>" "<.>" "<!>" "<?>" "<...>" "<¶>"; #adding 2022-05-12: "<.>" "<!>" "<?>" "<...>"
SOFT-DELIMITERS = "<$,>";

#PARENTHESES = "<$(>" "<$)>" "<$[>" "<$]>" "<${>" "<$}>" "<$«>" "<$»>" ;

# ============= #
# Tags and sets #
# ============= #

SETS

# I define end of clause and beginning of clause in a way so that the file
# may be read both by the CG-2 and the vislcg formalisms.

LIST BOS = (>>>) (<s>); # Beginning of sentence
LIST EOS = (<<<) (</s>); # End of sentence

# CG3 doesn´t function without >>> and <<< !

# Tags declared as single-membered LISTs 
# ======================================

# Parts of speech
# ---------------

LIST N = n inf/verbn/agptcpMA inf/verbnMO/ME/MU/M N ;
LIST A = adj A ;
LIST Adv = (/adv:.+/ri) Adv ;
LIST ConNeg = conneg ConNeg ;
LIST V = vfin neg:ES infMS/ME neg:imper/optat inf/verbnMO/ME/MU/M VOblig ptcp1 ptcp2 ptcp3 ptcp4 ConNeg V ;
LIST Pron = (/pron:.+/ri) Pron ;

LIST CS = CS ;
LIST CC = CC ;
SET CC-CS = CC OR CS ;
LIST Po =  postp/prep postp:EZ Adp Po (Relator SP Prl) (Relator SP Ill) (Relator SP Ine) (Relator SP Ela) (Relator SP Lat) (Relator SP Loc) (Relator SP Abl) ; # This doesn't really mean anything from a syntactic point of view, see _PostpNoPX_ for actual use in Erzya
LIST Pr = Pr ;
LIST Pcle = Pcle ;
LIST Num = (num:card:2-) (num:card:1) Num ; #CheckMe numerals 2021-11-21
LIST Interj = (interj) Interj ;
LIST ABBR = ABBR ;
LIST ACR = ACR ;

LIST CLB = CLB ;
LIST LEFT = LEFT ;
LIST RIGHT = RIGHT ;
LIST WEB = WEB ;
LIST QMARK = """ ; # ADD " FOR SYNTAX COLOURING.
LIST PPUNCT = PUNCT ;
SET PUNCT = PPUNCT - QMARK ;

LIST COMMA = "," ;
LIST ¶ = ¶;

#LIST V* = V* ;

#!! * Sets for POS sub-categories
# ------------------

LIST Pers = Pers ;
LIST Dem = Dem ;
LIST Interr = Interr ;
LIST Indef = indf Indef ;
LIST Def = def Def ;


LIST Recipr = Recipr ;
LIST Refl = Refl ;
LIST Rel = Rel ;
 
#LIST Adp = Adp ;

LIST Coll = Coll ;
LIST NomAg = NomAg ;
LIST G3 = G3 ;
LIST Prop = Prop ;

#!! * Sets for Semantic tags
# -------------

LIST Sem/Ani = Sem/Ani ;
LIST Sem/Date = Sem/Date ;
LIST Sem/Fem = Sem/Fem ;
LIST Sem/Group = Sem/Group ;
LIST Sem/Hum = Sem/Hum ;
LIST Sem/Mal = Sem/Mal ;
LIST Sem/Measr = Sem/Measr ;
LIST Sem/Money = Sem/Money ;
LIST Sem/Obj = Sem/Obj ;
LIST Sem/Org = Sem/Org ;
LIST Sem/Plc = Sem/Plc ;
LIST Sem/Sur = Sem/Sur ;
LIST Sem/Time = Sem/Time ;
LIST Sem/Year = Sem/Year ;
SET FIRSTNAME = (Prop Sem/Fem) OR (Prop Sem/Mal) ;

LIST TIME-N-SET = (N Sem/Time) ;
LIST TIME-NOUNS = "валске" "ве" "ие" "ков" "минут" "минута" "недля" "пинге" "секунда" "тарго" "тёжтие" "час" "чокшне" "чи" ;
LIST NOT-TIME = "dulvi" "vuorru" ;
SET TIME-N = TIME-N-SET - NOT-TIME OR TIME-NOUNS ;


LIST HUMAN = Sem/Hum Sem/Mal Sem/Fem Sem/Sur Pers NumAg Der/NumAg ;

#!! * Sets for Morphosyntactic properties
# --------------------------

LIST Abe = cx:abe Abe;
LIST Abl = cx:abl Abl;
LIST Com = Com ;
LIST Cmpr = Cmpr;
LIST Dat = (n/adj cx:all) (n:prop cx:all) (pron:pers cx:all) (inf/verbnMO/ME/MU/M cx:all) (infMS/ME cx:all) Dat; #CheckMe 2021-11-21
LIST Gen = (n/adj cx:gen) (n cx:gen)  (n:prop cx:gen) (pron:pers cx:gen) (inf/verbnMO/ME/MU/M cx:gen) (inf/verbn/agptcpMA cx:gen) (infMS/ME cx:gen) (pron:VESEgroup cx:gen) Gen; #CheckMe 2021-11-21
LIST Ela = cx:ela  Ela;
LIST Ill =  (n/adj cx:ill) (n cx:ill) (adj cx:ill) (adv:num cx:ill) (n:prop cx:ill) (inf/verbnMO/ME/MU/M cx:ill) (inf/verbn/agptcpMA cx:ill) (adv:pron cx:ill) (postp:EZ cx:ill) (adv:NEJgroup cx:ill) (adv:quantity cx:ill) (num:fract cx:ill) (pron:subord cx:ill) (num:ord cx:ill) (pron:indef cx:ill) (cnj:subord cx:ill) (num:card:2- cx:ill) (num:card:1 cx:ill) (pron:refl cx:ill) Ill; #NOT  (infMS/ME cx:ill)
LIST Ine = cx:ine Ine;
LIST Lat = cx:lat Lat;
LIST Loc = cx:loc Loc;
LIST Nom = (n/adj cx:nom) (n:prop cx:nom) (pron:pers cx:nom) (inf/verbnMO/ME/MU/M cx:nom) (infMS/ME cx:nom) Nom; #CheckMe 2021-11-21
LIST Prl = cx:prol Prl;
LIST Temp = cx:tmporNE Temp TempCx;
LIST Tra = cx transl Tra;


LIST LOC = Loc Ine Ela ;

LIST Sg = nsg Sg ;
LIST Pl =  npl Pl ;

LIST RCmpnd = RCmpnd ;

LIST Cmpnd = Cmpnd ;
 
LIST SgNomCmp = SgNomCmp ;
 
LIST SgGenCmp = SgGenCmp ;

LIST ShCmp = ShCmp ;

LIST PxSg1 = pxsg1 PxSg1;
LIST PxSg2 = pxsg2 PxSg2;
LIST PxSg3 = pxsg3 PxSg3;

LIST PxPl1 = pxpl1 PxPl1;
LIST PxPl2 = pxpl2 PxPl2;
LIST PxPl3 = pxpl3 PxPl3;

LIST Comp = Comp ;
LIST Superl = Superl ;

LIST Attr = Attr ;
LIST Ord = Ord ;
LIST Iter = Iter ; # twice, кавксть, сядоксть
LIST Mult = Mult ; # twofold, кавонькирда

LIST Qst = Qst ;
 
# The ("ge" Pcle) etc. are used in Apertium
LIST Foc/ge = Foc/ge ("ge" Pcle) ;
LIST Foc/gen = Foc/gen ("gen" Pcle) ;
LIST Foc/ges = Foc/ges ("ges" Pcle) ;
LIST Foc/gis = Foc/gis ("gis" Pcle) ;
LIST Foc/naj = Foc/naj ("naj" Pcle) ;
LIST Foc/ba = Foc/ba ("ba" Pcle) ;
LIST Foc/be = Foc/be ("be" Pcle) ;
LIST Foc/hal = Foc/hal ("hal" Pcle) ;
LIST Foc/han = Foc/han ("han" Pcle) ;
LIST Foc/bat = Foc/bat ("bat" Pcle) ;
LIST Foc/son = Foc/son ("son" Pcle) ;

SET VERBSIN-OVOMS = (".*овомс"ri) | (".*евемс"ri) ;
SET IV = (IV) | ("лисемс") | ("прамс") | ("самс") | ("томбавомс") | ("якамс") | VERBSIN-OVOMS ; #intransitive verbs, see also
LIST TV = TV ;

LIST Der/Pass = Der/PassL Der/PassS ;

LIST Prt = Prt;
LIST Prs = Prs ;

LIST Cond = mod:cond Cond; # identifying moods 2022-02-07 protasis marker
LIST Conj = mod:conj Conj;
LIST CondConj = CondConj;
LIST Des = mod:desid Des;
LIST Imprt = mod:imper Imprt;
LIST Ind = mod:ind Ind;
LIST Opt = mod:optat Opt;
LIST Prec = Prec;
LIST VOblig = inf-ptcpMA (V IV Oblig) (V TV Oblig) ; #cама, саема, якама, козома, ознома, явшема, молема


LIST Sg1 = Sg1 ;
LIST Sg2 = Sg2 ;
LIST Sg3 = Sg3 ;

LIST Pl1 = Pl1 ;
LIST Pl2 = Pl2 ;
LIST Pl3 = Pl3 ;

# all instances of subjects
LIST VFINPL3SUBJ = (vpl3) (dpl3-osg1) (dpl3-osg2) (dpl3-osg3) (dpl3-opl1) (dpl3-opl2) (dpl3-opl3) (ScPl3); # all predicates with Pl3 subject marking
LIST VFINPL2SUBJ = (vpl2) (dpl2-osg1) (dpl2-osg3) (dpl2-opl1) (dpl2-opl3) (ScPl2) (dpl2-osg3/opl3);
LIST VFINPL1SUBJ = (vpl1) (dpl1-osg2) (dpl1-osg3) (dpl1-opl2) (dpl1-opl3) (ScPl1) (vpl1/dpl1-osg3/opl3);
LIST VFINSG3SUBJ = (vsg3) (dsg3-osg1) (dsg3-osg2) (dsg3-osg3) (dsg3-opl1) (dsg3-opl2) (dsg3-opl3) (ScSg3) ;
LIST VFINSG2SUBJ = (vsg2) (dsg2-osg1) (dsg2-osg3) (dsg2-opl1) (dsg2-opl3) (ScSg2) ;
LIST VFINSG1SUBJ = (vsg1) (dsg1-osg2) (dsg1-osg3) (dsg1-opl2) (dsg1-opl3) (ScSg1) ;


SET ScSg1 = (ScSg1) | (vsg1) | VFINSG1SUBJ;
SET ScSg2 = (ScSg2) | (vsg2) | VFINSG2SUBJ;
SET ScSg3 = (ScSg3) | (vsg3) | VFINSG3SUBJ;
SET ScPl1 = (ScPl1) | (vpl1) | VFINPL1SUBJ;
SET ScPl2 = (ScPl2) | (vpl2) | VFINPL2SUBJ;
SET ScPl3 = (ScPl3) | (vpl3) | VFINPL3SUBJ;

LIST OcSg1 = OcSg1 ;
LIST OcSg2 = OcSg2 ;
LIST OcSg3 = OcSg3 ;
 
LIST OcPl1 = OcPl1 ;
LIST OcPl2 = OcPl2 ;
LIST OcPl3 = OcPl3 ;

LIST Inf = Inf ;
LIST Neg = neg:ASH neg:Agroup neg:ARAS neg:AVOL neg:ES neg:imper/optat neg:russ neg:cond; # mod:imper ???

LIST PrfPrc = PrfPrc ;
LIST VGen = VGen ;

LIST PrsPrc = PrsPrc ;

SET CardIter = (Adv Iter) OR (Adv Rel Iter) OR (Adv Indef Iter) OR (Adv Interr Iter) ;
SET MULT = Mult OR (Ord Mult) ;

LIST Ger = Ger ;
LIST Sup = Sup ;
LIST Actio = Actio ;

LIST Der/PassL = Der/PassL ;
LIST Der/NomAg = Der/NomAg ;
LIST Actor = NomAg Der/NomAg ;
LIST VAbess = VAbess ;

# Derivation
# ----------

LIST Der/Abe = Der/Abe ;
LIST Der/Cmpr = Der/Cmpr ;
LIST Der/A = Der/A ;
LIST Der/N2A = Der/N2A ;
LIST Der/V2A = Der/V2A ;
LIST Der/VtOmO = Der/VtOmO ; # 
LIST Der/stO = Der/stO ; # Deriving adverbs from adjectives A2Adv
LIST Der/ms =  Der/ms ; # эрзямс эрзя, истямс истя, вадрямс вадря
LIST Der/shka = Der/shka ; # 
LIST Der/GenAttr = Der/GenAttr ; #Der/Onj  genitive attribute derivation of non-nouns
LIST Der/Voc = Der/Voc ; # Der/aj  Der/kaj  vocative
LIST Der/PatrMal = Der/PatrMal ; # Male patronymic
LIST Der/PatrFem = Der/PatrFem ; # Female patronymic

LIST Der/Ovt = Der/Ovt ; # * telic deverbal noun also attr, resultative participle
LIST Der/Oms = Der/Oms; # * infinitive illative
LIST Der/OmO = Der/OmO ; # * infinitive locative/nominative
LIST Der/OmstO = Der/OmstO ; # * infinitive elative
LIST Der/OmsO = Der/OmsO  ; # * infinitive inessive
LIST Der/OmdO = Der/OmdO ; # * infinitive ablative
LIST Der/Omga = Der/Omga ; # * infinitive prolative
LIST Der/Oma = Der/Oma  ; # * modality: deontic/directive/obligative андомс: андома , якамс: якама
LIST Der/Omka = Der/Omka ; # * modality: deontic/directive/obligative андомс: андомка , якамс: якамка
LIST Der/Ycja  = Der/Ycja ; # * active (demonstrative) present participle  takes copula person
LIST Der/Yj = Der/Yj  ; # * active long present participle takes copula person
LIST Der/Y = Der/Y  ; # * active short present participle
LIST Der/Ozj = Der/Ozj ; # * Gerund
LIST Der/Cond = Der/Cond ; # * conditional derivation +Der/Ynderja
LIST Der/NomAg =  Der/NomAg ; #
LIST Der/NomAct = Der/NomAct	 ; #
LIST Der/pelj = Der/pelj ; #
LIST Der/MWN = Der/MWN ; # Modifier without Noun
LIST Der/Dem = Der/Dem ; # Speaker-Oriented Demonstrative
## Conjugation of words other than finite verbs
LIST Clt/Cop = Clt/Cop ; # This will replace the nominal conjugation Der/Pr+V
LIST Clt/Cond = Clt/Cond  ; # 
LIST Der/koj = Der/koj ; # prefix `+Indef` in indefinite pronouns
LIST Der/ta = Der/ta   ; # prefix `+Indef` in indefinite pronouns
LIST Der/tago = Der/tago ; # prefix `+Indef` in indefinite pronouns
LIST Der/Gak = Der/Gak ; # suffix `+Indef` in indefinite pronouns
LIST Der/buti = Der/buti ; # suffix `+Indef` in indefinite pronouns
LIST Der/Yja = Der/Yja  ; # suffix `+Indef` in indefinite pronouns  ковия, зярыя
LIST Der/chi = Der/chi ; #  adjective-to-noun
## the combinatory --Event-- preceding the NP-final noun
LIST Der/OmA = Der/OmA ; #  verb-to-noun Verbal noun
LIST Der/kshnO = Der/kshnO ; #  verb2verb derivation
LIST Der/OkshnOms = Der/OkshnOms ; #  verb2verb derivation
LIST Der/OvOms = Der/OvOms ; #  verb2verb derivation
LIST Der/OvkshnOms = Der/OvkshnOms ; #  verb2verb derivation
LIST Der/OvtOms = Der/OvtOms ; #  verb2verb derivation
LIST Der/Ovtnjems = Der/Ovtnjems ; #  verb2verb derivation
LIST Der/Ozevems = Der/Ozevems ; #  verb2verb derivation
LIST Der/Ozevtems = Der/Ozevtems ; #  verb2verb derivation
LIST Der/Ozevtnjems = Der/Ozevtnjems ; #  verb2verb derivation
LIST Der/Ozevkshnems = Der/Ozevkshnems ; #  verb2verb derivation
LIST Der/sje = Der/sje ; #  this in verb2verb derivation and also in denominal demonstrative --Der/Dem--
LIST Der/nje = Der/nje ; #  verb2verb derivation
LIST Der/njems = Der/njems ; #  verb2verb derivation

LIST Der/Oncje = Der/Oncje ; # old orth кудонцесь
LIST Der/Dimin = Der/Dimin  ; # 
LIST Der/ka = Der/ka ; #  diminutive
LIST Der/NJE = Der/NJE ; #  This is used in ошке, калнэ and кудыне
LIST Der/nJE = Der/nJE ; #  diminutive
LIST Der/Ynje =  Der/Ynje ; #  diminutive
LIST Der/Ynjka = Der/Ynjka ; #  diminutive
LIST Der/Ynjkinje = Der/Ynjkinje ; #  diminutive
LIST Der/ke = Der/ke ; #  diminutive in --ке--
LIST Der/kinje =  Der/kinje ; #  diminutive
LIST Der/ks = Der/ks ;# Adv›N


LIST Der/NomAct = Der/NomAct ;

LIST Der/Dimin = Der/Dimin ;


# Syntactic tags
# --------------

LIST @+FAUXV = @+FAUXV ; # Finite auxiliary verb (or modal???) NOT USED YET. Two verbs are used like auxiliaries: "ulems", which is rarely seen as an independent word, and the other is the negation verb, which has both particle-like forms and productive forms, of which both are tagged as @NEG.
LIST @+FMAINV = @+FMAINV ; # Finite main verb
#LIST @+FMAINV-nonverb = @+FMAINV-nonverb;# non-finite predicate ptcp4 see also @ADVLPRED now dealt with as @SPRED 2023-02-23

LIST @-FAUXV = @-FAUXV ; # Non-finite auxiliary verb (or modal???) NOT USED YET. Ulems-verb might have non-finite relevant forms; I must check this later.
# these are эрявомс, савомс, летемс
LIST @-F<AUXV = @-F<AUXV; # auxiliary of non-finite verb to the left
LIST @-FAUXV> = @-FAUXV>; # auxiliary of non-finite verb to the right

LIST @-FMAINV = @-FMAINV ; # Non-finite main verb

# The major function tags for finite verb arguments

LIST @-FSUBJ> = @-FSUBJ> ; # Subject of non-finite verb to the right
     #1977 иенть прядовомсто
LIST @-F<OBJ = @-F<OBJ ; # Object of non-finite verb to the left
LIST @-FOBJ> = @-FOBJ> ; # Object of non-finite verb to the right
     # кодгемень иень топодеманть тешкстамсто


LIST @FS-ADVL> = @FS-ADVL>; # Subordinate clause left of main clause.
LIST @FS-<ADVL = @FS-<ADVL; # Subordinate clause right of main clause.
LIST @FS-FMAINV> = @FS-FMAINV>; # Subordinate clause with MO/ME construction left of main clause
LIST @FS-<FMAINV = @FS-<FMAINV; # Subordinate clause with MO/ME construction right of main clause

## Probably only @-FPRED is needed. Earlier I commented that because copula is most often not explicit, using arrows may be problematic. So most probably we do not need @-F<PRED and @-FPRED>.
LIST @-F<SPRED = @-F<SPRED; # Subject predicative of non-finite verb to the left
LIST @-F<OPRED = @-F<OPRED; # Object predicative of non-finite verb to the left

#LIST @COPSUBJ> = @COPSUBJ> ; # Subject of copula to right
#LIST @COP<SUBJ = @COP<SUBJ ; # Subject of copula to left
LIST @SUBJ = @SUBJ ; # adhoc 2022-09-07
LIST @SUBJ> = @SUBJ> ; # adhoc 2022-09-07
LIST @<SUBJ = @<SUBJ ; # adhoc 2022-09-07
LIST @OBJ = @OBJ ; # adhoc 2022-09-07
LIST @<OBJ = @<OBJ ; # adhoc 2022-09-07
LIST @OBJ> = @OBJ> ; # adhoc 2022-09-07
LIST @SPRED = @SPRED ; # Subject predicative (e.g. in elliptical sentences); e.g. My hands are so cold кедень кельмть
#2022-09-07#LIST @<SPRED = @<SPRED ; # Predicative with a predicative as its head, e.g. Mahtte has Jovnna as a servant
#2022-09-07#LIST @SPRED> = @SPRED> ;  # Subject predicative to the right of the finite verb
#2022-09-07##Not the same thing in Erzya?Маттень ули Йовназо лездыцякс 2022-02-07


#2022-09-07

# The adverbial tags
#LIST @ADVL = @ADVL; # Adverbial

#2022-09-07#LIST @ADVL = @ADVL @ADVL> @ADVL< @<ADVL @>ADVL @-F<ADVL ;
LIST @>ADVL = @>ADVL ; #!! * @>ADVL : Modifier of an adverbial to the right.
                              #!! ** vaikko: doppe leat vaikko man ollu studeanttat.
LIST @ADVL< = @ADVL< ; #!! * @ADVL< : Complement of adverbial.
                        #!! ** vahkus: Son málesta guktii vahkus. таргозонзо: Ломанесь пиди-пани кавксть таргозонзо.
LIST @<ADVL = @<ADVL ; #!! * @<ADVL : Adverbial after the main verb.
                            #!! ** dás: Eanet dieđuid gávnnat dás. тестэ: Седе ламо содамочи муят тестэ.
LIST @ADVL> = @ADVL> ; #!! * @ADVL> : Adverbial to the left of the main verb
                            #!! ** viimmat: Dál de viimmat asttan lohkat reivve. окойники: Ней окойники кенеринь ловномо сёрманть.


#2022-09-07#LIST @ADVL>CS = @ADVL>CS ;

LIST @ADVL-habitive = @ADVL-habitive; #
LIST @ADVL-habitive> = @ADVL-habitive>; # habitive Adverbial to the left of the verb
LIST @<ADVL-habitive = @<ADVL-habitive; # habitive Adverbial to the right of the verb

LIST @ADVL-locative = @ADVL-locative; #
LIST @ADVL-locative> = @ADVL-locative>; # locative, inessive Adverbial to the left of the verb/subject
LIST @<ADVL-locative = @<ADVL-locative; # locative, inessive Adverbial to the right of the verb/subject

LIST @ADVL-partitive = @ADVL-partitive;
LIST @ADVL-partitive> = @ADVL-partitive>; # partitive, ablative Adverbial to the left of the verb
LIST @<ADVL-partitive = @<ADVL-partitive; # partitive, ablative Adverbial to the right of the verb

LIST @-FADVL-partitive = @-FADVL-partitive; # ablative Adverbial of a non-finite verb
LIST @-FADVL-partitive> = @-FADVL-partitive>; # partitive, ablative Adverbial to the left of a non-finite verb
LIST @-F<ADVL-partitive = @-F<ADVL-partitive; # partitive, ablative Adverbial to the right of a non-finite verb


###LIST @ADVL> <hab> = @ADVL> <hab>; # Habitive adverbial to the left of the finite verb
###LIST @<ADVL <hab> = @<ADVL <hab>; # Habitive adverbial to the right of the finite verb

LIST @-FADVL = @-FADVL; # Adverbial of a non-finite verb
LIST @-F<ADVL = @-F<ADVL; # Adverbial of a non-finite verb on the right side of the verb
LIST @-FADVL> = @-FADVL>; # Adverbial of a non-finite verb on the left side of the verb, e.g. кодгемень иетнесэ валдомтозь кинть лангсо: @-FADVL>(валдомтозь, иетнесэ)
#LIST @-FADVL> = @-FADVL; # Complement of non-finite verb, e.g. The roadman warns snowscooter drivers to drive carefully

LIST @PCLE = @PCLE; # Particle. ## I haven't used this but it might be useful later, though, strictly speaking, it isn't a functional role. I most cases these might be @INTERJ, @DISC, @VOC, or others?
LIST @<QST = @<QST ;# Particle Aux question
LIST @COMP-CS< = @COMP-CS<; # Complement of a subjunction @CS, e.g.??? The contact with the Saami Parliament about this issue gets as concrete as possible. ## I haven't used this but might be useful later.
LIST @ADVL>CS = @ADVL>CS; # Adverbial modifying a conjunction, e.g. Right after Jesus stood up. ## Hard to say if this could be useful.
LIST @P< = @P<; # Complement of preposition to the right of it. ## There shouldn't be indigenous prepositions, but hard to say, if this is useful. Could a postposition occur before the noun in rare occasions??
LIST @>P = @>P; # Complement of postposition to the left of it

# The NP-internal modifiers

LIST @>N = @>N; # Modifier of a noun to the right
LIST @N< = @N<; # Modifier of a noun to the left
LIST @>A = @>A; # Modifier of an adjective to the right
LIST @>Num = @>Num; # Modifier of a numeral to the right, e.g. the parliament notice number 33
LIST @Num< = @Num<; # Modifier of a numeral to the left, e.g. pronoun
LIST @>Pron = @>Pron; # Modifier of a pronoun to the right
LIST @Pron< = @Pron<; # Modifier of a pronoun to the left, e.g. numeral: we three together

# Appositions
## I haven't made any subclassification of appositions, though this might be reasonable. I must think about this. I have only used @APP. The arrows are usually superfluous, because I only classify the second word as an apposition. The last one, @APP>Pron is interesting: hard to say if it is useful in tagging Mormula.
LIST @APP-N< = @APP-N<; # Apposition to a noun to the left of it, e.g. I learned to write Saami, my mother tongue.
LIST @APP-Pron< = @APP-Pron<; # Apposition to a pronoun to the left, e.g. This I tell only you, my best friend
LIST @APP-Num< = @APP-Num<; # Apposition to a numeral to the left
LIST @APP-ADVL< = @APP-ADVL<; # Apposition to an adverbial to the left, e.g. In old times, before the war, people...
LIST @APP>Pron = @APP>Pron; # Apposition to a pronoun to the right, e.g. But this Will, he is also a nice guy

# The function words
## These are a bit strange, as I think distinguishing between coordination and subordination is more relevant than whether it is NPs or VPs that are connected. At least for our purposes. So I suggest we use the following: @CC 'coorditing conjunction, and @SC 'subordinating conjunction'. I'm not sure if these abbreviations (CC, SC) are use by others.
LIST @CNP = @CNP; # Conjunction connecting NPs (local conjunction or subjunction), e.g. Both in Turku and Helsinki, people go...
LIST @CVP = @CVP; # Conjunction connecting VPs, e.g. (CS) Has it been a long time since you have seen Maret?
LIST @C-FVP =  @C-FVP; # conjunction connecting infinites
#и: Эряви саламс сёрось и явомс сембе вачедотненди. [you] need to steal grain and share it with those who are starving
LIST @CADJP =  @CADJP; # conjunction connecting adjectives

# Sentence-external tags

LIST @HNOUN = @HNOUN; # Stray noun in sentence fragments, e.g. First lesson
LIST @INTERJ = @INTERJ; # Interjection, e.g. What, hasn't he come?
LIST @VOC = @VOC; # Vocative, e.g. Lord, our beloved friend is ill.
## @DISC = @DISC; # Discourse marker: could be added to the listing. I don't remember if I used it, but I often thought about using it. Discours marker can in many contexts be classified as an adverb, or coordinative conjunction, but probably not always.
LIST @<DISC = @<DISC; # Discourse marker: жо

# Compounds
LIST @CMPND = @CMPND; # First part of a compound (followed by a hyphen???)

# Unknown or undefined syntactic role

LIST @X = @X; # No tag has been assigned (because omissions in the rule component)



# Clause Boundaries

LIST @IMP-PTCLE = @IMP-PTCLE; #..........................................................................OLD


################################################
LIST @CONNEG = @CONNEG; # Connegative form of the verb after negation marker.
#LIST @<NGR = @<NGR; # King Pirgime..........................................................OLD...CHANGE TO...??? ## I don't remember the meaning of NGR. We musta have taken it from somewhere!
#LIST @NGR> = @NGR>; # King Pirgime..........................................................OLD...CHANGE TO...???
LIST @ADJ = @ADJ; # ???.....................................................................OLD...CHANGE TO...??? ## We shouldn't need this because adjective should always be pre- or postnominal modifier: @N>, @<N.
#LIST @ADJ> = @ADJ>; # ???...................................................................OLD...CHANGE TO...???
#LIST @ADJ> = @ADJ>; # ???.................................................................OLD...CHANGE TO...??? ## We shouldn't need the two preceding ones.
LIST @CC = @CC; # Coordinating conjunction..................................................OLD...CHANGE TO...???
LIST @SC = @SC; # Subordinating conjunction.................................................OLD...CHANGE TO...??? ## As I wrote above, I prefer CC and SC instead of CNP and CVP.
#LIST @CPOUND> = @CPOUND>; # Compound construction...........................................OLD...CHANGE TO...??? ## We shouldn't need this because the components of a compound are always given in separate lines in Mormula.
#LIST @MCPOUND = @MCPOUND; # Compound construction (main word)...............................OLD...CHANGE TO...??? ## The main word should carry the normal function tag (like the head of an NP), so this shouldn't be needed. We might come across cases where it is not clear which word is the main word, but this is a secondary problem. In problematic cases, we can just choose one of the components and provide it with the normal function tage (like single words). The other components will have tags that mark their role as a part of the compound. Perhaps we could use the tag @CMPND to mark the non-head components of a compound? (With arrows?) Note that in most cases the last word is the main word (head) of the compound because modifiers usually precede their heads, which makes tagging the last word as the main word (head) as a natural and easy solution, i.e. the main word has the normal function tag. The cg rules could be based on this simplifying assumption.
## Strictly speaking, the above suggestion mixes syntactic structure (like in an NP) with the internal structure of a compound word (which is one word, not a syntactic construction). But I think this kind of mixing does not bring any practical problems to the user of the corpus.
## What do you thingk?
#LIST @<POSTP = @<POSTP; # Postposition......................................................OLD...CHANGE TO...??? ## We shouldn't need this because the postposition should carry the functional tag of the postpositional phrase. In overwhelmingly most cases the function is @ADVL, but there are objects ja predicative adverbials, too. I don't remember how I have tagged predicative adverbials like 'wet' in the type of expression 'the socks became wet', which in Mordvin would be in the translative case (-ks suffix).
LIST @NEG> = @NEG>; # Negation..............................................................OLD...CHANGE TO...??? ## This is more compact than @NEGATION, which I have used. So let's use @NEG.
LIST @DISC = @DISC; # Discourse.............................................................OLD...CHANGE TO...??? ## The distinction of a sentence adverbial, certain kinds of coordinative conjunctions, perhaps also interjection and vocative, is sometimes not easy to make. In principle it would be best not to use @DISC (= use @ADV, @NTERJ, @VOC and @CC) but we could leave this for difficult cases.
LIST @ADDR = @ADDR; # Discourse.............................................................OLD...CHANGE TO...??? ## I presume this is the same function as in @VOC. So let's use @VOC, not @ADDR.
################################################



#LIST NNomExclude = @ADJ> @ADJ>;
#LIST AllAdj = @ADJ> @ADJ>;
LIST NNomExclude = @>N; # ???
LIST AllAdj = @>N; # ???

LIST DASH = "–" "—" "-" ;

LIST Comma = "<$,>" "<,>";
LIST CConj = cnj:coord CC;
LIST SConj = cnj:subord CS; # pron:subord 2022-01-26

LIST CpoundBeg = cpound-beg/mid;
LIST CpoundEnd = cpound-end/cpound-unsegm;

LIST AdvQuantity = adv:quantity;
LIST AdvNEJgroup = adv:NEJgroup;
LIST AdvPron = adv:pron;
LIST AgptcpMaSgGenPxSg3 = (inf/verbn/agptcpMA nsg cx:gen pxsg3);#вень удоманзо = deverbal noun in -ма
LIST AgptcpMaIndfSgNom = (inf/verbn/agptcpMA indf nsg cx:nom);
LIST AgptcpMaIndfSgTransl = (inf/verbn/agptcpMA indf nsg cx:transl);
LIST postp/prep = postp/prep;
LIST AUXCOND = (cond-particle) (Pcle Aux Cond);#деряй
LIST AUXCONJ = (conj-particle) (Pcle Aux Conj);#бу, ба

LIST Der/Y = Der/Y ;
LIST NomAg = NomAg ;

#LIST NBSP = nsg/npl-unclear/russ ;
LIST NAdj = n/adj;
LIST NAdjNom = (n/adj cx:nom);
LIST NAdjSgNom = (n/adj nsg cx:nom);
LIST NAdjPlNom = (n/adj npl cx:nom);
LIST NAdjNomIndef = (n/adj indf cx:nom);
LIST NAdjSgNomPxSg1 = (n/adj nsg cx:nom pxsg1);
LIST NAdjSgNomPxSg2 = (n/adj nsg cx:nom pxsg2);
LIST NAdjSgNomPxSg3 = (n/adj nsg cx:nom pxsg3);
LIST NAdjPlNomPxSg2 = (n/adj npl cx:nom pxsg2);
LIST NAdjPlNomPxSg3 = (n/adj npl cx:nom pxsg3);
LIST NAdjPlNomPxPl2 = (n/adj npl cx:nom pxpl2);
LIST NAdjPlNomPxPl3 = (n/adj npl cx:nom pxpl3);


#LIST NAdjPxX = (n/adj /cx:nom(.gen)?/ri /px[sgpl][1-3]/ri);
LIST NAdjPxX = (n/adj cx:nom /px[sgpl]+[1-3]/ri) (n/adj cx:nom/gen /px[sgpl]+[1-3]/ri);

LIST NAdjSgNomGenPxSg1 = (n/adj nsg cx:nom/gen pxsg1) (n/adj nsg cx:gen pxsg1);
LIST NAdjPlNomGenPxSg1 = (n/adj npl cx:nom/gen pxsg1) (n/adj npl cx:gen pxsg1);

LIST NAdjSgNomGenPxSg2 = (n/adj nsg cx:nom/gen pxsg2) (n/adj nsg cx:gen pxsg2);
LIST NAdjPlNomGenPxSg2 = (n/adj npl cx:nom/gen pxsg2) (n/adj npl cx:gen pxsg2);
LIST NAdjSPNomGenPxSg2 = (n/adj nsg cx:nom/gen pxsg2) (n/adj nsg cx:gen pxsg2) (n/adj npl cx:nom/gen pxsg2) (n/adj npl cx:gen pxsg2);
LIST NAdjSgNomGenPxSg3 = (n/adj nsg cx:nom/gen pxsg3) (n/adj nsg cx:gen pxsg3);
LIST NAdjPlNomGenPxSg3 = (n/adj npl cx:nom/gen pxsg3) (n/adj npl cx:gen pxsg3);
LIST NAdjPlNomGenPxPl2 = (n/adj npl cx:nom/gen pxpl2) (n/adj npl cx:gen pxpl2);
LIST NAdjPlNomGenPxPl3 = (n/adj npl cx:nom/gen pxpl3) (n/adj npl cx:gen pxpl3);
LIST NAdjSgNomIndef = (n/adj indf nsg cx:nom) (n/adj:pron-stem indf nsg cx:nom);
LIST NAdjPlNomIndef = (n/adj indf npl cx:nom) (n/adj:pron-stem indf nsg cx:nom);

LIST NAdjGen = (n/adj cx:gen);
LIST NAdjSgGen = (n/adj nsg cx:gen);
LIST NAdjPlGen = (n/adj npl cx:gen);
LIST NAdjNomPx = (inf/verbnMO/ME/MU/M cx:nom pxsg2) (inf/verbnMO/ME/MU/M cx:nom pxpl2) (inf/verbnMO/ME/MU/M cx:nom pxsg3) (inf/verbnMO/ME/MU/M cx:nom pxpl3);

LIST NAdjSgElaPxSg3 = (n/adj nsg cx:ela pxsg3);
LIST NAdjPlElaPxSg3 = (n/adj npl cx:ela pxsg3);
LIST NAdjPlElaPxPl3 = (n/adj npl cx:ela pxpl3);

LIST NAdjSgInePxSg3 = (n/adj nsg cx:ine pxsg3);
LIST NAdjPlInePxSg3 = (n/adj npl cx:ine pxsg3);
LIST NAdjPlInePxPl3 = (n/adj npl cx:ine pxpl3);

LIST NAdjSgIllPxSg2 = (n/adj nsg cx:ill pxsg2);
LIST NAdjPlIllPxSg2 = (n/adj npl cx:ill pxsg2);

LIST NAdjSgInePxSg2 = (n/adj nsg cx:ine pxsg2);
LIST NAdjPlInePxSg2 = (n/adj npl cx:ine pxsg2);
LIST NAdjSPInePxSg2 = (n/adj nsg cx:ine pxsg2) (n/adj npl cx:ine pxsg2);

LIST NAdjSgGenIndf = (n/adj indf nsg cx:gen);
LIST NAdjPlGenIndf = (n/adj indf npl cx:gen);
LIST NAdjGenDerNSgIndf = (n/adj indf nsg gen-derN);
LIST NAdjGenDerNPlIndf = (n/adj indf npl gen-derN);
LIST NAdjGenDerNSPIndf = (n/adj indf nsg gen-derN) (n/adj indf npl gen-derN);

LIST NAdjSgAbeIndf = (n/adj indf nsg cx:abe);
LIST NAdjPlAbeIndf = (n/adj indf nsg cx:abe);

LIST NAdjSgElaIndf = (n/adj indf nsg cx:ela);
LIST NAdjPlElaIndf = (n/adj indf npl cx:ela);

LIST NAdjComparIndfSg = (n/adj indf nsg cx:compar);
LIST NAdjComparIndfPl = (n/adj indf npl cx:compar);

LIST NAdjSgPrlIndf = (n/adj indf nsg cx:prol);
LIST NAdjPlPrlIndf = (n/adj indf nsg cx:prol);

LIST NAdjTranslIndfSg = (n/adj indf nsg cx:transl);
LIST NAdjTranslIndfPl = (n/adj indf npl cx:transl);

LIST NAdjNomNplUnclearRussPx = (n/adj nsg/npl-unclear/russ cx:nom px-unclear);
LIST NAdjGenNplUnclearRussPxSg2 = (n/adj nsg/npl-unclear/russ cx:gen pxsg2) (n/adj nsg/npl-unclear/russ cx:nom/gen pxsg2);
LIST NAdjGenNplUnclearRussPxPl2 = (n/adj nsg/npl-unclear/russ cx:gen pxpl2) (n/adj nsg/npl-unclear/russ cx:nom/gen pxpl2);
LIST NAdjGenNplUnclearRussPxSg3 = (n/adj nsg/npl-unclear/russ cx:gen pxsg3) (n/adj nsg/npl-unclear/russ cx:nom/gen pxsg3);
LIST NAdjGenNplUnclearRussPxPl3 = (n/adj nsg/npl-unclear/russ cx:gen pxpl3) (n/adj nsg/npl-unclear/russ cx:nom/gen pxpl3);
LIST NAdjIneNplUnclearRussPxSg3 = (n/adj nsg/npl-unclear/russ cx:ine pxsg3);
LIST NAdjProlNplUnclearRussPxPl3 = (n/adj nsg/npl-unclear/russ cx:prol pxpl3 unclear);
LIST NAdjSgAblIndf = (n/adj indf nsg cx:abl);
LIST NAdjPlAblIndf = (n/adj indf npl cx:abl);
LIST NAdjSPAbl = (n/adj indf nsg cx:abl) (n/adj indf npl cx:abl) (n/adj def nsg cx:abl) (n/adj def npl cx:abl) (n/adj cx:abl pxsg1) (n/adj cx:abl pxsg2) (n/adj cx:abl pxsg3) (n/adj cx:abl pxpl1) (n/adj cx:abl pxpl2) (n/adj cx:abl pxpl3) (N SP Abl) (N Sg Abl) (N Pl Abl) (indf nsg cx:abl) (Abl Indef);


LIST NAdjSgNomDef = (n/adj def nsg cx:nom);
LIST NAdjPlNomDef = (n/adj def npl cx:nom);

LIST NAdjSgAblDef = (n/adj def nsg cx:abl);
LIST NAdjPlAblDef = (n/adj def npl cx:abl);

LIST NAdjDat = (n/adj cx:all);
LIST NAdjSgDatDef = (n/adj def nsg cx:all);
LIST NAdjPlDatDef = (n/adj def npl cx:all);

LIST NAdjSgElaDef = (n/adj def nsg cx:ela);
LIST NAdjPlElaDef = (n/adj def npl cx:ela);

LIST NAdjSgGenDef = (n/adj def nsg cx:gen);
LIST NAdjPlGenDef = (n/adj def npl cx:gen);

LIST NAdjSgDatIndf = (n/adj indf nsg cx:all);
LIST NAdjPlDatIndf = (n/adj indf npl cx:all);
LIST NAdjSPDatIndf = (n/adj indf nsg cx:all) (n/adj indf npl cx:all) (N SP Dat Indef);
LIST NAdjSgIllIndf = (n/adj indf nsg cx:ill);
LIST NAdjPlIllIndf = (n/adj indf npl cx:ill);
LIST NAdjSPIllIndf = (n/adj indf nsg cx:ill) (n/adj indf npl cx:ill) (N SP Ill Indef);
LIST NAdjSgIneIndf = (n/adj indf nsg cx:ine);
LIST NAdjPlIneIndf = (n/adj indf npl cx:ine);
LIST NAdjSPIne = (n/adj indf nsg cx:ine) (n/adj indf npl cx:ine) (n/adj def nsg cx:ine) (n/adj def npl cx:ine) (N SP Ine Indef) (N Sg Ine Def) (N Pl Ine Def) ;
LIST NAdjSgLatIndf = (n/adj indf nsg cx:lat);
LIST NAdjPlLatIndf = (n/adj indf npl cx:lat);
LIST NAdjSPLat = (n/adj indf nsg cx:lat) (n/adj indf npl cx:lat) (n/adj indf nsg cx:lat) (n/adj indf npl cx:lat) (N SP Lat Indef) (N Pl Lat Def);
LIST NAdjSgDatPxSg3Akgroup = (n/adj nsg cx:all pxsg3 encl:AKgroup);

LIST n/adj = n/adj;


#BEGIN AJJ

LIST AJJNom = (adj cx:nom);
LIST AJJNomSg = (adj nsg cx:nom);
LIST AJJNomPl = (adj npl cx:nom);
LIST AJJSgNomPxSg2 = (adj nsg cx:nom pxsg2);
LIST AJJSgNomPxSg3 = (adj nsg cx:nom pxsg3);
LIST AJJPlNomPxSg2 = (adj npl cx:nom pxsg2);
LIST AJJPlNomPxSg3 = (adj npl cx:nom pxsg3);
LIST AJJPlNomPxPl2 = (adj npl cx:nom pxpl2);
LIST AJJPlNomPxPl3 = (adj npl cx:nom pxpl3);

#LIST AJJPxX = (adj /cx:nom(.gen)?/ri /px[sgpl][1-3]/ri);
LIST AJJPxX = (adj cx:nom /px[sgpl]+[1-3]/ri) (adj cx:nom/gen /px[sgpl]+[1-3]/ri);

LIST AJJSgNomGenPxSg1 = (adj nsg cx:nom/gen pxsg1) (adj nsg cx:gen pxsg1);
LIST AJJPlNomGenPxSg1 = (adj npl cx:nom/gen pxsg1) (adj npl cx:gen pxsg1);

LIST AJJSgNomGenPxSg2 = (adj nsg cx:nom/gen pxsg2) (adj nsg cx:gen pxsg2);
LIST AJJSgNomGenPxSg3 = (adj nsg cx:nom/gen pxsg3) (adj nsg cx:gen pxsg3);
LIST AJJPlNomGenPxSg2 = (adj npl cx:nom/gen pxsg2) (adj npl cx:gen pxsg2);
LIST AJJPlNomGenPxSg3 = (adj npl cx:nom/gen pxsg3) (adj npl cx:gen pxsg3);
LIST AJJPlNomGenPxPl2 = (adj npl cx:nom/gen pxpl2) (adj npl cx:gen pxpl2);
LIST AJJPlNomGenPxPl3 = (adj npl cx:nom/gen pxpl3) (adj npl cx:gen pxpl3);
LIST AJJSgNomIndef = (adj indf nsg cx:nom) (adj:pron-stem indf nsg cx:nom)  (ptcp1 indf nsg cx:nom) (A Sg Nom Indef);
LIST AJJPlNomIndef = (adj indf npl cx:nom) (adj:pron-stem indf npl cx:nom)  (ptcp1 indf npl cx:nom) (A Pl Nom Indef);

LIST PTCPPrsSgNomIndef = (ptcp1 indf nsg cx:nom) (Der/Y NomAg N  Sg Nom Indef);

LIST AJJNomPlIndf = (adj indf npl cx:nom) (adj:pron-stem indf npl cx:nom) (A Pl Nom Indef);
LIST AJJGen = (adj cx:gen);
LIST AJJSgGen = (adj nsg cx:gen);
LIST AJJPlGen = (adj npl cx:gen);
LIST AJJNomPx = (inf/verbnMO/ME/MU/M cx:nom pxsg2) (inf/verbnMO/ME/MU/M cx:nom pxpl2) (inf/verbnMO/ME/MU/M cx:nom pxsg3) (inf/verbnMO/ME/MU/M cx:nom pxpl3);

LIST AJJSgElaPxSg3 = (adj nsg cx:ela pxsg3);
LIST AJJPlElaPxSg3 = (adj npl cx:ela pxsg3);
LIST AJJPlElaPxPl3 = (adj npl cx:ela pxpl3);

LIST AJJSgInePxSg3 = (adj nsg cx:ine pxsg3);
LIST AJJPlInePxSg3 = (adj npl cx:ine pxsg3);
LIST AJJPlInePxPl3 = (adj npl cx:ine pxpl3);

LIST AJJSgIllPxSg2 = (adj nsg cx:ill pxsg2);
LIST AJJPlIllPxSg2 = (adj npl cx:ill pxsg2);
LIST AJJSgInePxSg2 = (adj nsg cx:ine pxsg2);
LIST AJJPlInePxSg2 = (adj npl cx:ine pxsg2);

LIST AJJSgGenIndf = (adj indf nsg cx:gen);
LIST PrsPrcSgGenIndf = (ptcp1 indf nsg cx:gen) (Der/Y NomAg N SP Gen Indef);
LIST AJJPlGenIndf = (adj indf npl cx:gen);
LIST AJJSPGenIndf = (adj indf nsg cx:gen) (adj indf npl cx:gen) A SP Gen Indef;

LIST AJJGenDerNSgIndf = (adj indf nsg gen-derN);
LIST AJJGenDerNPlIndf = (adj indf npl gen-derN);
LIST AJJGenDerNSPIndf = (adj indf nsg gen-derN) (adj indf npl gen-derN);


LIST AJJSgAbeIndf = (adj indf nsg cx:abe);
LIST AJJPlAbeIndf = (adj indf nsg cx:abe);

LIST AJJSgElaIndf = (adj indf nsg cx:ela);
LIST AJJPlElaIndf = (adj indf npl cx:ela);

LIST AJJComparIndfSg = (adj indf nsg cx:compar);
LIST AJJComparIndfPl = (adj indf npl cx:compar);

LIST AJJSgPrlIndf = (adj indf nsg cx:prol);
LIST AJJPlPrlIndf = (adj indf nsg cx:prol);

LIST AJJTranslIndfSg = (adj indf nsg cx:transl);
LIST AJJTranslIndfPl = (adj indf npl cx:transl);

LIST AJJNomNplUnclearRussPx = (adj nsg/npl-unclear/russ cx:nom px-unclear);
LIST AJJGenNplUnclearRussPxSg2 = (adj nsg/npl-unclear/russ cx:gen pxsg2) (adj nsg/npl-unclear/russ cx:nom/gen pxsg2);
LIST AJJGenNplUnclearRussPxPl2 = (adj nsg/npl-unclear/russ cx:gen pxpl2) (adj nsg/npl-unclear/russ cx:nom/gen pxpl2);
LIST AJJGenNplUnclearRussPxSg3 = (adj nsg/npl-unclear/russ cx:gen pxsg3) (adj nsg/npl-unclear/russ cx:nom/gen pxsg3);
LIST AJJGenNplUnclearRussPxPl3 = (adj nsg/npl-unclear/russ cx:gen pxpl3) (adj nsg/npl-unclear/russ cx:nom/gen pxpl3);
LIST AJJIneNplUnclearRussPxSg3 = (adj nsg/npl-unclear/russ cx:ine pxsg3);
LIST AJJProlNplUnclearRussPxPl3 = (adj nsg/npl-unclear/russ cx:prol pxpl3 unclear);
LIST AJJSgAblIndf = (adj indf nsg cx:abl);
LIST AJJPlAblIndf = (adj indf npl cx:abl);

LIST AJJNomSgDef = (adj def nsg cx:nom);
LIST AJJNomPlDef = (adj def npl cx:nom);


LIST AJJSgAblDef = (adj def nsg cx:abl);
LIST AJJPlAblDef = (adj def npl cx:abl);

LIST AJJDat = (adj cx:all);
LIST AJJSgDatDef = (adj def nsg cx:all);
LIST AJJPlDatDef = (adj def npl cx:all);

LIST AJJSgElaDef = (adj def nsg cx:ela);
LIST AJJPlElaDef = (adj def npl cx:ela);

LIST AJJSgGenDef = (adj def nsg cx:gen);
LIST AJJPlGenDef = (adj def npl cx:gen);

LIST AJJSgDatIndf = (adj indf nsg cx:all);
LIST AJJPlDatIndf = (adj indf npl cx:all);
LIST AJJSgIllIndf = (adj indf nsg cx:ill);
LIST AJJPlIllIndf = (adj indf npl cx:ill);
LIST AJJSgIneIndf = (adj indf nsg cx:ine);
LIST AJJPlIneIndf = (adj indf npl cx:ine);
LIST AJJSgLatIndf = (adj indf nsg cx:lat);
LIST AJJPlLatIndf = (adj indf npl cx:lat);
LIST AJJSgDatPxSg3Akgroup = (adj nsg cx:all pxsg3 encl:AKgroup);

# BEGIN NOUN

LIST NOUNNom = (n cx:nom) (N Nom);
LIST NOUNSgNom = (n nsg cx:nom) (N Sg Nom);
LIST NOUNPlNom = (n npl cx:nom) (N Pl Nom);
LIST NOUNNomIndef = (n indf cx:nom) (N Sg Nom Indef) (N Pl Nom Indef);
LIST NOUNSgNomPxSg1 = (n/adj nsg cx:nom pxsg1) (n nsg cx:nom pxsg1) (N Sg Nom PxSg1);
LIST NOUNPlNomPxSg1 = (n/adj npl cx:nom pxsg1) (n npl cx:nom pxsg1) (N Pl Nom PxSg1);
LIST NOUNSgNomPxSg2 = (n/adj nsg cx:nom pxsg2) (n nsg cx:nom pxsg2) (N Sg Nom PxSg2);
LIST NOUNSgNomPxSg3 = (n/adj nsg cx:nom pxsg3) (n nsg cx:nom pxsg3) (N Sg Nom PxSg3); # Moksha, but also Erzya literary
LIST NOUNPlNomPxSg2 = (n/adj npl cx:nom pxsg2) (n npl cx:nom pxsg2) (N Pl Nom PxSg2);
LIST NOUNPlNomPxSg3 = (n/adj npl cx:nom pxsg3) (n npl cx:nom pxsg3) (N Pl Nom PxSg3);
LIST NOUNPlNomPxPl1 = (n/adj npl cx:nom pxpl1) (n npl cx:nom pxpl1) (N Pl Nom PxPl1);
LIST NOUNPlNomPxPl2 = (n/adj npl cx:nom pxpl2) (n npl cx:nom pxpl2) (N Pl Nom PxPl2);
LIST NOUNPlNomPxPl3 = (n/adj npl cx:nom pxpl3) (n npl cx:nom pxpl3) (N Pl Nom PxPl3);

LIST NOUNSgNomPx = NOUNSgNomPxSg1 NOUNSgNomPxSg2 NOUNSgNomPxSg3; # only PxSg have singular 
LIST SgNomPxSg1 = NOUNSgNomPxSg1 NAdjSgNomPxSg1 AJJSgNomPxSg1 ;#possessa
LIST SgNomPxSg2 = NOUNSgNomPxSg2 NAdjSgNomPxSg2 AJJSgNomPxSg2 ;#possessa
LIST SgNomPxSg3 = NOUNSgNomPxSg3 NAdjSgNomPxSg3 AJJSgNomPxSg3 ;#possessa
LIST PlNomPxSg1 = NOUNPlNomPxSg1 NAdjPlNomPxSg1 AJJPlNomPxSg1 ;#possessa
LIST PlNomPxSg2 = NOUNPlNomPxSg2 NAdjPlNomPxSg2 AJJPlNomPxSg2 ;#possessa
SET PlNomPxSg3 = NOUNPlNomPxSg3 OR NAdjPlNomPxSg3 OR AJJPlNomPxSg3 ;#possessa
LIST SPNomPxSg1 = SgNomPxSg1 PlNomPxSg1 ;
LIST SPNomPxSg2 = SgNomPxSg2 PlNomPxSg2 ;
SET SPNomPxSg3 = SgNomPxSg3 OR PlNomPxSg3 ;

#LIST NOUNPxX = (n /cx:nom(.gen)?/ri /px[sgpl][1-3]/ri);
LIST NOUNPxX = (n cx:nom /px[sgpl]+[1-3]/ri) (n cx:nom/gen /px[sgpl]+[1-3]/ri); #Jaska will examine 2021-11-21

LIST NOUNSgNomGenPxSg1 = (n nsg cx:nom/gen pxsg1) (n nsg cx:gen pxsg1) (N Sg Nom PxSg1) (N Sg Gen PxSg1);
LIST NOUNPlNomGenPxSg1 = (n npl cx:nom/gen pxsg1) (n npl cx:gen pxsg1) (N Pl Nom PxSg1) (N Pl Gen PxSg1);

LIST NOUNSgNomGenPxSg2 = (n nsg cx:nom/gen pxsg2) (n nsg cx:gen pxsg2) (N Sg Nom PxSg2) (N Sg Gen PxSg2);
LIST NOUNSgNomGenPxSg3 = (n nsg cx:nom/gen pxsg3) (n nsg cx:gen pxsg3) (N Sg Nom PxSg3) (N Sg Gen PxSg3); # Only in some Erzya dialects
LIST NOUNPlNomGenPxSg2 = (n npl cx:nom/gen pxsg2) (n npl cx:gen pxsg2) (N Pl Nom PxSg2) (N Pl Gen PxSg2);
LIST NOUNPlNomGenPxSg3 = (n npl cx:nom/gen pxsg3) (n npl cx:gen pxsg3) (N Sg Nom PxSg3) (N Sg Gen PxSg3);
LIST NOUNSgNomGenPxPl2 = (n nsg cx:nom/gen pxpl2) (n nsg cx:gen pxpl2) (N Sg Nom PxPl2) (N Sg Gen PxPl2);
LIST NOUNPlNomGenPxPl2 = (n npl cx:nom/gen pxpl2) (n npl cx:gen pxpl2) (N Pl Nom PxPl2) (N Pl Gen PxPl2);
LIST NOUNSgGenPxPl2 = (n nsg cx:gen pxpl2) (N Sg Gen PxPl2);
LIST NOUNPlGenPxPl2 = (n npl cx:gen pxpl2) (N Pl Gen PxPl2);
LIST NOUNPlNomGenPxPl3 = (n npl cx:nom/gen pxpl3) (n npl cx:gen pxpl3) (N Pl Nom PxPl3) (N Pl Gen PxPl3);
LIST NSPNomGenPx = (n cx:nom/gen pxsg1) (n cx:gen pxsg1) (N Nom PxSg1) (N Gen PxSg1)
 (n cx:nom/gen pxsg2) (n cx:gen pxsg2) (N Nom PxSg2) (N Gen PxSg2)
 (n cx:nom/gen pxsg3) (n cx:gen pxsg3) (N Nom PxSg3) (N Gen PxSg3)
 (n cx:nom/gen pxpl1) (n cx:gen pxpl1) (N Nom PxPl1) (N Gen PxPl1)
 (n cx:nom/gen pxpl2) (n cx:gen pxpl2) (N Nom PxPl2) (N Gen PxPl2)
 (n cx:nom/gen pxpl3) (n cx:gen pxpl3) (N Nom PxPl3) (N Gen PxPl3);#genitive or nom with PX

LIST NSPNomGenPxNotSUBJ = (n cx:nom/gen pxsg1) (n cx:gen pxsg1) (N Gen PxSg1)
 (n cx:nom/gen pxsg2) (n cx:gen pxsg2) (N Gen PxSg2)
 (n cx:nom/gen pxsg3) (n cx:gen pxsg3) (N Gen PxSg3)
 (n cx:nom/gen pxpl1) (n cx:gen pxpl1) (N Gen PxPl1)
 (n cx:nom/gen pxpl2) (n cx:gen pxpl2) (N Gen PxPl2)
 (n cx:nom/gen pxpl3) (n cx:gen pxpl3) (N Gen PxPl3);#genitive or nom with PX

LIST NSgNomGenPxAMB = (nsg cx:nom/gen pxsg1) (nsg cx:nom/gen pxsg2) (nsg cx:nom/gen pxpl1) (nsg cx:nom/gen pxpl2) (nsg cx:nom/gen pxpl3) (nsg cx:nom/gen pxsg3);#last one doesn't exist in Erzya or Moksha

LIST NOUNSgNomIndef = (n indf nsg cx:nom) (N Sg Nom Indef);
LIST NOUNPlNomIndef = (n indf npl cx:nom) (N Pl Nom Indef);
#LIST NOUNSgNomIndef = (n indf nsg cx:nom) (n:pron-stem indf nsg cx:nom) (N Sg Nom Indef);Only in damaj tesst кондямо
SET NMNSgNomIndefSUBJ = (pron:indef:JAKgroup indf nsg cx:nom) | ("кияк" Pron Indef Sg Nom) | (Pron Indef Sg Nom Indef) | NOUNSgNomIndef ;# for Sg Nom Indef subject
#LIST NOUNPlNomIndef = (n indf npl cx:nom) (n:pron-stem indf npl cx:nom) (N Pl Nom Indef) (ptcp1 indf npl cx:nom);
LIST NOUNSPNomIndef = (n indf nsg cx:nom) (N Sg Nom Indef) (n indf npl cx:nom) (N Pl Nom Indef);
LIST NOUNNomSgPxSg1 = (n nsg cx:nom pxsg1) (N Sg Nom PxSg1) (n/adj nsg cx:nom pxsg1) ;
SET NOUNSPNomIndefCpoundEnd = NOUNSPNomIndef + CpoundEnd ;
LIST NOUNGen = (n cx:gen) (N SP Gen);
LIST NOUNSgGen = (n nsg cx:gen) (N Sg Gen);
LIST NOUNPlGen = (n npl cx:gen) (N Pl Gen);
LIST NOUNNomPx = (inf/verbnMO/ME/MU/M cx:nom pxsg2) (inf/verbnMO/ME/MU/M cx:nom pxpl2) (inf/verbnMO/ME/MU/M cx:nom pxsg3) (inf/verbnMO/ME/MU/M cx:nom pxpl3) (Inf Loc PxSg1) (Inf Loc PxSg2) (Inf Loc PxSg3) (Inf Loc PxPl1) (Inf Loc PxPl2) (Inf Loc PxPl3);

LIST NOUNSPElaPxSg3 = (n nsg cx:ela pxsg3) (n npl cx:ela pxsg3) (n nsg/npl-unclear/russ cx:ine pxsg3) (N SP Ela PxSg3);

LIST NOUNSPElaPxPl3 = (n nsg cx:ela pxpl3) (n npl cx:ela pxpl3) (n nsg/npl-unclear/russ cx:ela pxpl3) (N SP Ela PxPl3);

LIST NOUNSPElaPxSg2 = (n nsg cx:ela pxsg2) (n npl cx:ela pxsg2) (n nsg/npl-unclear/russ cx:ela pxsg2) (N SP Ela PxSg2);

LIST NOUNSPElaPxPl2 = (n nsg cx:ela pxpl2) (n npl cx:ela pxpl2) (n nsg/npl-unclear/russ cx:ela pxpl2) (N SP Ela PxPl2);

LIST NOUNSPElaPxSg1 = (n nsg cx:ela pxsg1) (n npl cx:ela pxsg1) (n nsg/npl-unclear/russ cx:ela pxsg1) (N SP Ela PxSg1);

LIST NOUNSPElaPxPl1 = (n nsg cx:ela pxpl1) (n npl cx:ela pxpl1) (n nsg/npl-unclear/russ cx:ela pxpl1) (N SP Ela PxPl1);

LIST NMNSPNomGenPxSg2 = (n nsg/npl-unclear/russ cx:nom/gen pxsg2) (n/adj nsg/npl-unclear/russ cx:nom/gen pxsg2) (adj nsg/npl-unclear/russ cx:nom/gen pxsg2);#four-way ambiguity for possessive suffixes
LIST NMNSPNomGenPxPl1 = (n nsg/npl-unclear/russ cx:nom/gen pxpl1) (n/adj nsg/npl-unclear/russ cx:nom/gen pxpl1) (adj nsg/npl-unclear/russ cx:nom/gen pxpl1);#four-way ambiguity
LIST NMNSPNomGenPxPl2 = (n nsg/npl-unclear/russ cx:nom/gen pxpl2) (n/adj nsg/npl-unclear/russ cx:nom/gen pxpl2) (adj nsg/npl-unclear/russ cx:nom/gen pxpl2);#four-way ambiguity
LIST NMNSPNomGenPxPl3 = (n nsg/npl-unclear/russ cx:nom/gen pxpl3) (n/adj nsg/npl-unclear/russ cx:nom/gen pxpl3) (adj nsg/npl-unclear/russ cx:nom/gen pxpl3);#four-way ambiguity

SET NOUNSPElaPX = NOUNSPElaPxSg1 OR NOUNSPElaPxSg2 OR NOUNSPElaPxSg3 OR NOUNSPElaPxPl1 OR NOUNSPElaPxPl2 OR NOUNSPElaPxPl3;

LIST NOUNSPIllPxSg3 = (n nsg cx:ill pxsg3) (n npl cx:ill pxsg3) (n nsg/npl-unclear/russ cx:ill pxsg3) (N SP Ill PxSg3);

LIST NOUNSPIllPxPl3 = (n nsg cx:ill pxpl3) (n npl cx:ill pxpl3) (n nsg/npl-unclear/russ cx:ill pxpl3) (N SP Ill PxPl3);

LIST NOUNSPIllPxSg2 = (n nsg cx:ill pxsg2) (n npl cx:ill pxsg2) (n nsg/npl-unclear/russ cx:ill pxsg2) (N SP Ill PxSg2);

LIST NOUNSPIllPxPl2 = (n nsg cx:ill pxpl2) (n npl cx:ill pxpl2) (n nsg/npl-unclear/russ cx:ill pxpl2) (N SP Ill PxPl2);

LIST NOUNSPIllPxSg1 = (n nsg cx:ill pxsg1) (n npl cx:ill pxsg1) (n nsg/npl-unclear/russ cx:ill pxsg1) (N SP Ill PxSg1);

LIST NOUNSPIllPxPl1 = (n nsg cx:ill pxpl1) (n npl cx:ill pxpl1) (n nsg/npl-unclear/russ cx:ill pxpl1) (N SP Ill PxPl1);

SET NOUNSPIllPX = NOUNSPIllPxSg1 OR NOUNSPIllPxSg2 OR NOUNSPIllPxSg3 OR NOUNSPIllPxPl1 OR NOUNSPIllPxPl2 OR NOUNSPIllPxPl3;

LIST NOUNSPInePxSg3 = (n nsg cx:ine pxsg3) (n npl cx:ine pxsg3) (n nsg/npl-unclear/russ cx:ine pxsg3) (N SP Ine PxSg3);

LIST NOUNSPInePxPl3 = (n nsg cx:ine pxpl3) (n npl cx:ine pxpl3) (n nsg/npl-unclear/russ cx:ine pxpl3) (N SP Ine PxPl3);

LIST NOUNSPInePxSg2 = (n nsg cx:ine pxsg2) (n npl cx:ine pxsg2) (n nsg/npl-unclear/russ cx:ine pxsg2) (N SP Ine PxSg2);

LIST NOUNSPInePxPl2 = (n nsg cx:ine pxpl2) (n npl cx:ine pxpl2) (n nsg/npl-unclear/russ cx:ine pxpl2) (N SP Ine PxPl2);

LIST NOUNSPInePxSg1 = (n nsg cx:ine pxsg1) (n npl cx:ine pxsg1) (n nsg/npl-unclear/russ cx:ine pxsg1) (N SP Ine PxSg1);

LIST NOUNSPInePxPl1 = (n nsg cx:ine pxpl1) (n npl cx:ine pxpl1) (n nsg/npl-unclear/russ cx:ine pxpl1) (N SP Ine PxPl1);

SET NOUNSPInePX = NOUNSPInePxSg1 OR NOUNSPInePxSg2 OR NOUNSPInePxSg3 OR NOUNSPInePxPl1 OR NOUNSPInePxPl2 OR NOUNSPInePxPl3;

LIST NOUNSgGenIndf = (n indf nsg cx:gen);
LIST NOUNPlGenIndf = (n indf npl cx:gen);
LIST NOUNSPGenIndf = (inf/verbn/agptcpMA indf nsg cx:gen) (inf/verbnMO/ME/MU/M indf nsg cx:gen) (n indf nsg cx:gen) (n indf npl cx:gen) (N SP Gen Indef);
LIST NOUNGenDerNSgIndf = (n indf nsg gen-derN);
LIST NOUNGenDerNPlIndf = (n indf npl gen-derN);
LIST NOUNGenDerNSPIndf = (n indf nsg gen-derN) (n indf npl gen-derN); # (N SP Gen Indef) checkme 2021-11-21

#втОмО
LIST NOUNSgAbeIndf = (n indf nsg cx:abe);
LIST NOUNPlAbeIndf = (n indf npl cx:abe);
LIST NOUNSPAbeIndf = (n indf nsg cx:abe) (n indf npl cx:abe) (N SP Abe Indef);

#ДО
LIST NOUNSgAblIndf = (n indf nsg cx:abl);
LIST NOUNPlAblIndf = (n indf npl cx:abl);
LIST NOUNSPAbl = (n indf nsg cx:abl) (n indf npl cx:abl) (n def nsg cx:abl) (n def npl cx:abl) (N SP Abl Indef) (N Sg Abl Def) (N Pl Abl Def) (n cx:abl pxsg1) (n cx:abl pxsg2) (n cx:abl pxsg3) (n cx:abl pxpl1) (n cx:abl pxpl2) (n cx:abl pxpl3) (N SP Abl) (N Sg Abl) (N Pl Abl) (indf nsg cx:abl) (Abl Indef);

#шка
LIST NOUNComparIndfSg = (n indf nsg cx:compar);
LIST NOUNComparIndfPl = (n indf npl cx:compar);
LIST NOUNComparIndfSP = (n indf nsg cx:compar) (n indf npl cx:compar) (N SP Cmpr Indef);

#нЕнь
LIST NOUNSgDatIndf = (n indf nsg cx:all);
LIST NOUNPlDatIndf = (n indf npl cx:all);
LIST NOUNSPDatIndf = (n indf nsg cx:all) (n indf npl cx:all) (N SP Dat Indef);
LIST NOUNSPDAT = (n indf nsg cx:all) (n indf npl cx:all) (inf/verbnMO/ME/MU/M def nsg cx:all) (inf/verbn/agptcpMA def nsg cx:all) (N SP Dat Indef) (N Sg Dat Def)  (N Pl Dat Def) (N Prop SP Dat Indef) (N Prop Sg Dat Def)  (N Prop Pl Dat Def);

#стО
LIST NOUNSgElaIndf = (n indf nsg cx:ela);
LIST NOUNPlElaIndf = (n indf npl cx:ela);
LIST NOUNSPElaIndf = (n indf nsg cx:ela) (n indf npl cx:ela) (N SP Ela Indef);

#с
LIST NOUNSgIllIndf = (n indf nsg cx:ill);
LIST NOUNPlIllIndf = (n indf npl cx:ill);
LIST NOUNSPIllIndf = (n indf nsg cx:ill) (n indf npl cx:ill) (N SP Ill Indef);

#сО
LIST NOUNSgIneIndf = (n indf nsg cx:ine);
LIST NOUNPlIneIndf = (n indf npl cx:ine);
LIST NOUNSPIne = (n indf nsg cx:ine) (n indf npl cx:ine) (n def nsg cx:ine) (n def npl cx:ine) (N SP Ine Indef) (N Sg Ine Indef) (N Pl Ine Indef);

LIST NOUNSPIneDef = (n def nsg cx:ine) (n def npl cx:ine) (N Sg Ine Def) (N Pl Ine Def);

#ОҤ
LIST NOUNSgLatIndf = (n indf nsg cx:lat);
LIST NOUNPlLatIndf = (n indf npl cx:lat);
LIST NOUNSPLat = (n indf nsg cx:lat) (n indf npl cx:lat) (n def npl cx:lat) (N SP Lat Indef) (N Pl Lat Def);

#Га
LIST NOUNSgPrlIndf = (n indf nsg cx:prol);
LIST NOUNPlPrlIndf = (n indf npl cx:prol);
LIST NOUNSPPrlIndf = (n indf nsg cx:prol) (n indf npl cx:prol) (N SP Prl Indef);

LIST NOUNSPPrlPxSg1 = (n nsg cx:prol pxsg1) (n npl cx:prol pxsg1) (n nsg/npl-unclear/russ cx:prol pxsg1) (N SP Prl PxSg1);
LIST NOUNSPPrlPxPl1 = (n nsg cx:prol pxpl1) (n npl cx:prol pxpl1) (n nsg/npl-unclear/russ cx:prol pxpl1) (N SP Prl PxPl1);

LIST NOUNSPPrlPxSg2 = (n nsg cx:prol pxsg2) (n npl cx:prol pxsg2) (n nsg/npl-unclear/russ cx:prol pxsg2) (N SP Prl PxSg2);
LIST NOUNSPPrlPxPl2 = (n nsg cx:prol pxpl2) (n npl cx:prol pxpl2) (n nsg/npl-unclear/russ cx:prol pxpl2) (N SP Prl PxPl2);

LIST NOUNSPPrlPxSg3 = (n nsg cx:prol pxsg3) (n npl cx:prol pxsg3) (n nsg/npl-unclear/russ cx:prol pxsg3) (N SP Prl PxSg3);
LIST NOUNSPPrlPxPl3 = (n nsg cx:prol pxpl3) (n npl cx:prol pxpl3) (n nsg/npl-unclear/russ cx:prol pxpl3) (N SP Prl PxPl3);


SET NOUNSPPrlPX = NOUNSPPrlPxSg1 OR NOUNSPPrlPxSg2 OR NOUNSPPrlPxSg3 OR NOUNSPPrlPxPl1 OR NOUNSPPrlPxPl2 OR NOUNSPPrlPxPl3;


#кс
LIST NOUNTranslIndfSg = (n indf nsg cx:transl);
LIST NOUNTranslIndfPl = (n indf npl cx:transl);
LIST NOUNTranslIndfSP = (n indf nsg cx:transl) (n indf npl cx:transl) (N SP Tra Indef);

LIST NOUNNomNplUnclearRussPx = (n nsg/npl-unclear/russ cx:nom px-unclear);
LIST NOUNGenNplUnclearRussPxSg2 = (n nsg/npl-unclear/russ cx:gen pxsg2) (n nsg/npl-unclear/russ cx:nom/gen pxsg2);
LIST NOUNGenNplUnclearRussPxPl2 = (n nsg/npl-unclear/russ cx:gen pxpl2) (n nsg/npl-unclear/russ cx:nom/gen pxpl2);
LIST NOUNGenNplUnclearRussPxSg3 = (n nsg/npl-unclear/russ cx:gen pxsg3) (n nsg/npl-unclear/russ cx:nom/gen pxsg3);
LIST NOUNGenNplUnclearRussPxPl3 = (n nsg/npl-unclear/russ cx:gen pxpl3) (n nsg/npl-unclear/russ cx:nom/gen pxpl3);
LIST NOUNIneNplUnclearRussPxSg3 = (n nsg/npl-unclear/russ cx:ine pxsg3);
LIST NOUNProlNplUnclearRussPxPl3 = (n nsg/npl-unclear/russ cx:prol pxpl3 unclear);

LIST NOUNSgNomDef = (n def nsg cx:nom) (inf/verbnMO/ME/MU/M def nsg cx:nom) (N Sg Nom Def);
LIST NOUNPlNomDef = (n def npl cx:nom) (inf/verbnMO/ME/MU/M def npl cx:nom) (N Pl Nom Def);

LIST PNOUNSgNomDef = (n:prop def nsg cx:nom) (N Prop Sg Nom Def);
LIST PNOUNPlNomDef = (n:prop def npl cx:nom) (N Prop Pl Nom Def);

SET SGNOMDEF = (inf/verbn/agptcpMA def nsg cx:nom) OR (inf/verbnMO/ME/MU/M def nsg cx:nom) OR (num:card:1 def nsg cx:nom) OR (pron:VESEgroup def nsg cx:nom) OR ("мезе" pron:indef def nsg cx:nom) OR (pron:dem def nsg cx:nom) OR ("кона" pron:indef def nsg cx:nom) OR (pron:LIJAgroup def nsg cx:nom) OR (num:card:2- def nsg cx:nom) OR (num:ord def nsg cx:nom) OR (ptcp4 def nsg cx:nom) OR (ptcp2 def nsg cx:nom) OR (ptcp1 def nsg cx:nom) OR (pron:pers def nsg cx:nom) OR (pron:subord def nsg cx:nom) OR (Sg Nom Def) OR (n/adj def nsg cx:nom) OR (n def nsg cx:nom) OR (n:prop def nsg cx:nom) OR (N Prop Sg Nom Def) OR (pron:subord def nsg cx:nom) OR ("кие" Pron Rel Sg Nom Def) OR ("кона" Pron Rel Sg Nom Def) OR NAdjSgNomDef OR AJJNomSgDef OR NOUNSgNomDef ;# all instances of Sg Nom Def

LIST PNOUNSgNom = (n:prop indf nsg cx:nom) (N Prop Sg Nom Indef) (n:prop def nsg cx:nom) (N Prop Sg Nom Def);
LIST PNOUNSPNomIndef = (n:prop indf nsg cx:nom) (N Prop Sg Nom Indef) (n:prop indf npl cx:nom) (N Prop Pl Nom Indef);
SET PNOUNSPNomIndefCpoundEnd = PNOUNSPNomIndef + CpoundEnd ;
LIST NMNNomSgPX = (nsg cx:nom pxsg1) (N Sg Nom PxSg1)
 (nsg cx:nom pxsg2) (N Sg Nom PxSg2)
 (nsg cx:nom pxsg3) (N Sg Nom PxSg3)
 (nsg cx:nom pxpl1) (N Sg Nom PxPl1)
 (nsg cx:nom pxpl2) (N Sg Nom PxPl2)
 (nsg cx:nom pxpl3) (N Sg Nom Pxpl3)
  (n:prop nsg cx:nom pxsg1) (N Prop Sg Nom PxSg1)
 (n:prop nsg cx:nom pxsg2) (N Prop Sg Nom PxSg2)
 (n:prop nsg cx:nom pxsg3) (N Prop Sg Nom PxSg3)
 (n:prop nsg cx:nom pxpl1) (N Prop Sg Nom PxPl1)
 (n:prop nsg cx:nom pxpl2) (N Prop Sg Nom PxPl2)
 (n:prop nsg cx:nom pxpl3) (N Prop Sg Nom Pxpl3);
LIST NMNNomPlPX = (npl cx:nom pxsg1) (N Pl Nom PxSg1)
 (npl cx:nom pxsg2) (N Pl Nom PxSg2)
 (npl cx:nom pxsg3) (N Pl Nom PxSg3)
 (npl cx:nom pxpl1) (N Pl Nom PxPl1)
 (npl cx:nom pxpl2) (N Pl Nom PxPl2)
 (npl cx:nom pxpl3) (N Pl Nom Pxpl3)
  (n:prop npl cx:nom pxsg1) (N Prop Pl Nom PxSg1)
 (n:prop npl cx:nom pxsg2) (N Prop Pl Nom PxSg2)
 (n:prop npl cx:nom pxsg3) (N Prop Pl Nom PxSg3)
 (n:prop npl cx:nom pxpl1) (N Prop Pl Nom PxPl1)
 (n:prop npl cx:nom pxpl2) (N Prop Pl Nom PxPl2)
 (n:prop npl cx:nom pxpl3) (N Prop Pl Nom Pxpl3);

LIST SPNomPX = NAdjSgNomPxSg1 NAdjSgNomPxSg2 NAdjSgNomPxSg3 NAdjSgNomPxPl1 NAdjSgNomPxPl2 NAdjSgNomPxPl3 NAdjPlNomPxSg1 NAdjPlNomPxSg2 NAdjPlNomPxSg3 NAdjPlNomPxPl1 NAdjPlNomPxPl2 NAdjPlNomPxPl3  AJJSgNomPxSg1 AJJSgNomPxSg2 AJJSgNomPxSg3 AJJSgNomPxPl1 AJJSgNomPxPl2 AJJSgNomPxPl3 AJJPlNomPxSg1 AJJPlNomPxSg2 AJJPlNomPxSg3 AJJPlNomPxPl1 AJJPlNomPxPl2 AJJPlNomPxPl3  NOUNSgNomPxSg1 NOUNSgNomPxSg2 NOUNSgNomPxSg3 NOUNSgNomPxPl1 NOUNSgNomPxPl2 NOUNSgNomPxPl3 NOUNPlNomPxSg1 NOUNPlNomPxSg2 NOUNPlNomPxSg3 NOUNPlNomPxPl1 NOUNPlNomPxPl2 NOUNPlNomPxPl3  PNOUNSgNomPxSg1 PNOUNSgNomPxSg2 PNOUNSgNomPxSg3 PNOUNSgNomPxPl1 PNOUNSgNomPxPl2 PNOUNSgNomPxPl3 PNOUNPlNomPxSg1 PNOUNPlNomPxSg2 PNOUNPlNomPxSg3 PNOUNPlNomPxPl1 PNOUNPlNomPxPl2 PNOUNPlNomPxPl3 NMNNomSgPX NMNNomPlPX ;#Nominals with nominative in possessive declension

LIST NOUNSgAblDef = (n def nsg cx:abl) (N Sg Abl Def);
LIST NOUNPlAblDef = (n def npl cx:abl) (N Pl Abl Def);

LIST NOUNDat = (n cx:all) (N Dat);
LIST NOUNSgDatDef = (n def nsg cx:all) (N Sg Dat Def);
LIST NOUNPlDatDef = (n def npl cx:all) (N Pl Dat Def);
LIST NOUNSPDatPX = (nsg cx:all pxsg2) (nsg cx:all pxsg3) (N SP Dat PxPl3) (N SP Dat PxSg3) (N SP Dat PxSg2) (N SP Dat PxSP3);

SET NOUNSPDatDefPX = NOUNSgDatDef | NOUNPlDatDef | NOUNSPDatPX;

LIST NOUNSPDEF = (n def) (N Def);
LIST NOUNSgElaDef = (n def nsg cx:ela) (N Sg Ela Def);
LIST NOUNPlElaDef = (n def npl cx:ela) (N Pl Ela Def);

LIST SPELA =  (n def nsg cx:ela) (N Sg Ela Def)  (n def npl cx:ela) (N Pl Ela Def) (N SP Ela) (n/adj def nsg cx:ela) (n/adj def npl cx:ela)  (n/adj indf nsg cx:ela) (n/adj indf npl cx:ela) ;
LIST SPINE =  (n def nsg cx:ine) (N Sg Ine Def)  (n def npl cx:ine) (N Pl Ine Def) (N SP Ine) (n/adj def nsg cx:ine) (n/adj def npl cx:ine)  (n/adj indf nsg cx:ine) (n/adj indf npl cx:ine) ;
LIST SPILL =  (n indf nsg cx:ill) (n def npl cx:ill) (N Pl Ill Def) (N SP Ill) (n/adj indf nsg cx:ill) (n/adj def npl cx:ill)  (n/adj indf npl cx:ill) ;

LIST EXISTENTINEBASE = (n def nsg cx:ine) (N Sg Ine Def)  (n def npl cx:ine) (N Pl Ine Def) (N SP Ine PxSg1) (N SP Ine PxSg2) (N SP Ine PxSg3) (N SP Ine PxPl1) (N SP Ine PxPl2) (N SP Ine PxPl3) (n/adj def nsg cx:ine) (n/adj def npl cx:ine) ;#existential locative base, definite 

LIST NOUNSgGenDef = (n def nsg cx:gen) (N Sg Gen Def);
LIST NOUNPlGenDef = (n def npl cx:gen) (N Pl Gen Def);
LIST SGGENDEF = (def nsg cx:gen) (Sg Gen Def);
LIST PLGENDEF = (def npl cx:gen) (Pl Gen Def);
LIST GENDEF = (def nsg cx:gen) (def npl cx:gen) (Sg Gen Def) (Pl Gen Def);
LIST GENINDEF = (indf nsg cx:gen) (indf npl cx:gen) (SP Gen Indef);
LIST SGOBJGEN = (def nsg cx:gen) (Sg Gen Def) (n nsg cx:gen pxsg1) (n nsg cx:gen pxsg2) (n nsg cx:gen pxsg3) (n nsg cx:gen pxpl1) (n nsg cx:gen pxpl2) (n nsg cx:gen pxpl3);
LIST PLOBJGEN = (def npl cx:gen) (Pl Gen Def) (n npl cx:gen pxsg1) (n npl cx:gen pxsg2) (n npl cx:gen pxsg3) (n npl cx:gen pxpl1) (n npl cx:gen pxpl2) (n npl cx:gen pxpl3) ;

LIST NOUNSgDatPxSg3Akgroup = (n nsg cx:all pxsg3 encl:AKgroup) (N Sg Dat PxSg3 Clt/Add);


LIST NProp = n:prop (N Prop);
LIST NPropDat = (n:prop cx:all) (N Prop Dat);
LIST NPropGen = (n:prop cx:gen) (N Prop Gen);
LIST NPropPlGenDef = (n:prop def npl cx:gen) (N Prop Pl Gen Def);


LIST NPropNom = (n:prop cx:nom) (N Prop Nom);

LIST NPropDatDef = (n:prop def cx:all) (N Prop Dat Def);

LIST NPropAblIndf = (n:prop indf nsg cx:abl) (N Prop Abl Indef);
LIST NPropDatIndef = (n:prop indf nsg cx:all) (N Prop Dat Indef);
LIST NPropGenIndef = (n:prop indf nsg cx:gen) (N Prop Gen Indef);# try SP
LIST NPropSgNomIndef = (n:prop indf nsg cx:nom) (N Prop Sg Nom Indef);
LIST NPropNomPlIndef = (n:prop indf npl cx:nom) (N Prop Pl Nom Indef);
LIST NPropNomIndef = (n:prop indf nsg cx:nom) (N Prop Sg Nom Indef) (n:prop indf npl cx:nom) (N Prop Pl Nom Indef);
LIST NPropSgNomPxSg1 = (n:prop nsg cx:nom pxsg1) (N Prop Sg Nom PxSg1);


LIST Clt/Cop = Clt/Cop ;
LIST Der/Ozj = Der/Ozj ;
LIST Ger = Ger ;

LIST SupEla = (infMS/ME cx:ela) (Ger Ela) (Sup Ela) (NomAct N SP Ela) (NomAct N Sg Ela Def);
LIST SupLoc = (infMS/ME cx:nom) (Inf Loc) ;
LIST NumCard1IndfSgGen = (num:card:1 indf nsg cx:gen);
LIST NumCard1IndfSgGenAkgroup = (num:card:1 indf nsg cx:gen encl:AKgroup);
LIST NumSgNomIndef = (num:card:2- indf nsg cx:nom) (num:card:1 indf nsg cx:nom) (Num Sg Nom Indef);
LIST NumPlNomIndef = (num:card:2- indf npl cx:nom) (Num Pl Nom Indef);
LIST NumPlGenDef = (num:card:2- def npl cx:gen) (Num Pl Gen Def);#check this
LIST NumInstruktNPxSg1 = (num:coll cx:instruktN pxsg1) (Pron AssocColl PxSg1);
LIST NumInstruktNPxSg2 = (num:coll cx:instruktN pxsg2) (Pron AssocColl PxSg2);
LIST NumInstruktNPxSg3 = (num:coll cx:instruktN pxsg3) (Pron AssocColl PxSg3);
LIST NumInstruktNPxPl1 = (num:coll cx:instruktN pxpl1) (Pron AssocColl PxPl1);
LIST NumInstruktNPxPl2 = (num:coll cx:instruktN pxpl2) (Pron AssocColl PxPl2);
LIST NumInstruktNPxPl3 = (num:coll cx:instruktN pxpl3) (Pron AssocColl PxPl3);#кавонест
LIST NumOrdSgAbl = (num:ord indf nsg cx:abl);
LIST NumOrdPlAbl = (num:ord indf npl cx:abl);
LIST NumOrdSPAbl = (num:ord indf nsg cx:abl) (num:ord indf npl cx:abl);
LIST NumOrdSgNomIndef = (num:ord indf nsg cx:nom) (A Sg Nom Indef);

LIST Ptcp1DefPlNom = (ptcp1 def npl cx:nom); #ptcp1 эри, эрий, эриця 3 separate things 2021-11-21
LIST Ptcp1DefPlGen = (ptcp1 def npl cx:gen);

LIST PostpPrep = postp/prep Adp Po;

SET PostpNoPX = Po - PxSg1 - PxSg2 - PxSg3 - PxPl1 - PxPl2 - PxPl3 ;#postposition without PX
SET EJSTENoPX = (postp:EZ cx:ela) | ("эйстэ" Adp Ela) - PxSg1 - PxSg2 - PxSg3 - PxPl1 - PxPl2 - PxPl3  ;# эйстэ

SET PronPersSg2DatShort = (pron:pers cx:all pxsg2) - (pron:pers nsg cx:all pxsg2) | (Pron Pers Sg2 Dat Short); #CheckMe 2021-11-21 Is there really such a thing in Erzya?
SET PronPersPl2DatShort = (pron:pers cx:all pxpl2) - (pron:pers npl cx:all pxpl2) | (Pron Pers Pl2 Dat Short);
SET PronPersSg3DatShort = (pron:pers cx:all pxsg3) - (pron:pers nsg cx:all pxsg3) | (Pron Pers Sg3 Dat Short);
SET PronPersPl3DatShort = (pron:pers cx:all pxpl3) - (pron:pers npl cx:all pxpl3) | (Pron Pers Pl3 Dat Short);
SET PronPersSg1DatShort = (pron:pers cx:all pxsg1) - (pron:pers nsg cx:all pxsg1) | (Pron Pers Sg1 Dat Short);
SET PronPersPl1DatShort = (pron:pers cx:all pxpl1) - (pron:pers npl cx:all pxpl1) |  (Pron Pers Pl1 Dat Short);

SET PronPersSg2DatLong = (pron:pers nsg cx:all pxsg2) | (Pron Pers Sg2 Dat Long); #CheckMe 2021-11-21 Is there really such a thing in Erzya?
SET PronPersPl2DatLong = (pron:pers npl cx:all pxpl2) | (Pron Pers Pl2 Dat Long);
SET PronPersSg3DatLong = (pron:pers nsg cx:all pxsg3) | (Pron Pers Sg3 Dat Long);
SET PronPersPl3DatLong = (pron:pers npl cx:all pxpl3) | (Pron Pers Pl3 Dat Long);
SET PronPersSg1DatLong = (pron:pers nsg cx:all pxsg1) | (Pron Pers Sg1 Dat Long);
SET PronPersPl1DatLong = (pron:pers npl cx:all pxpl1) |  (Pron Pers Pl1 Dat Long);

SET PronPersSg2Dat = (pron:pers cx:all pxsg2) | (pron:pers nsg cx:all pxsg2) | (Pron Pers Sg2 Dat);
SET PronPersPl2Dat = (pron:pers cx:all pxpl2) | (pron:pers npl cx:all pxpl2) | (Pron Pers Pl2 Dat);
SET PronPersSg3Dat = (pron:pers cx:all pxsg3) | (pron:pers nsg cx:all pxsg3) | (Pron Pers Sg3 Dat);
SET PronPersPl3Dat = (pron:pers cx:all pxpl3) | (pron:pers npl cx:all pxpl3) | (Pron Pers Pl3 Dat);
SET PronPersSg1Dat = (pron:pers cx:all pxsg1) | (pron:pers nsg cx:all pxsg1) | (Pron Pers Sg1 Dat);
SET PronPersPl1Dat = (pron:pers cx:all pxpl1) | (pron:pers npl cx:all pxpl1) |  (Pron Pers Pl1 Dat);

SET PronPersSPDat = PronPersSg1Dat | PronPersSg2Dat | PronPersSg3Dat | PronPersPl1Dat | PronPersPl2Dat | PronPersPl3Dat ;# This should include both short and long personal pronouns

LIST PostpElaPxSg1 = (postp/prep cx:ela pxsg1) (Adp Ela PxSg1);
LIST PostpElaPxPl1 = (postp/prep cx:ela pxpl1) (Adp Ela PxPl1);
LIST PostpElaPxSg2 = (postp/prep cx:ela pxsg2) (Adp Ela PxSg2);
LIST PostpElaPxPl2 = (postp/prep cx:ela pxpl2) (Adp Ela PxPl2);
LIST PostpElaPxSg3 = (postp/prep cx:ela pxsg3) (Adp Ela PxSg3);
LIST PostpElaPxPl3 = (postp/prep cx:ela pxpl3) (Adp Ela PxPl3);

LIST PostpIllPxSg1 = (postp/prep cx:ill pxsg1) (Adp Ill PxSg1);
LIST PostpIllPxPl1 = (postp/prep cx:ill pxpl1) (Adp Ill PxPl1);
LIST PostpIllPxSg2 = (postp/prep cx:ill pxsg2) (Adp Ill PxSg2);
LIST PostpIllPxPl2 = (postp/prep cx:ill pxpl2) (Adp Ill PxPl2);
LIST PostpIllPxSg3 = (postp/prep cx:ill pxsg3) (Adp Ill PxSg3);
LIST PostpIllPxPl3 = (postp/prep cx:ill pxpl3) (Adp Ill PxPl3);

LIST PostpInePxSg1 = (postp/prep cx:ine pxsg1) (Adp Ine PxSg1);
LIST PostpInePxPl1 = (postp/prep cx:ine pxpl1) (Adp Ine PxPl1);
LIST PostpInePxSg2 = (postp/prep cx:ine pxsg2) (Adp Ine PxSg2);
LIST PostpInePxPl2 = (postp/prep cx:ine pxpl2) (Adp Ine PxPl2);
LIST PostpInePxSg3 = (postp/prep cx:ine pxsg3) (Adp Ine PxSg3);
LIST PostpInePxPl3 = (postp/prep cx:ine pxpl3) (Adp Ine PxPl3);

SET PostpInePX = PostpInePxSg1 | PostpInePxSg2 | PostpInePxSg3 | PostpInePxPl1 | PostpInePxPl2 | PostpInePxPl3;
LIST PostpIne = (postp/prep cx:ine) (Adp Ine);
LIST PostpLat = (postp/prep cx:lat) (Adp Lat);

LIST PostpPrlPxSg1 = (postp/prep cx:prol pxsg1) (Adp Prl PxSg1);
LIST PostpPrlPxPl1 = (postp/prep cx:prol pxpl1) (Adp Prl PxPl1);
LIST PostpPrlPxSg2 = (postp/prep cx:prol pxsg2) (Adp Prl PxSg2);
LIST PostpPrlPxPl2 = (postp/prep cx:prol pxpl2) (Adp Prl PxPl2);
LIST PostpPrlPxSg3 = (postp/prep cx:prol pxsg3) (Adp Prl PxSg3);
LIST PostpPrlPxPl3 = (postp/prep cx:prol pxpl3) (Adp Prl PxPl3);

SET PostpPrlPX = PostpPrlPxSg1 | PostpPrlPxSg2 | PostpPrlPxSg3 | PostpPrlPxPl1 | PostpPrlPxPl2 | PostpPrlPxPl3;

LIST PostpOtherLocal = (postp/prep cx:other-local);
LIST PostpEzInePxSg2 = (postp:EZ cx:ine pxsg2);


LIST PronDefSgNom = (pron:pers def nsg cx:nom);
LIST PronDefPlNom = (pron:pers def npl cx:nom);
LIST PronReflSg1Nom = ("монсь" pron:pers def nsg cx:nom) ("монсь" Pron Refl Sg1 Nom); #
LIST PronReflSg2Nom = ("тонсь" pron:pers def nsg cx:nom) ("тонсь" Pron Refl Sg2 Nom); #
LIST PronReflSg3Nom = ("сонсь" pron:pers def nsg cx:nom) ("сонсь" Pron Refl Sg3 Nom); #"сонсь" Pron Refl Sg3 Nom
LIST PronReflPl1Nom = ("монсь" pron:pers def npl cx:nom) ("монсь" Pron Refl Pl1 Nom); #
LIST PronReflPl2Nom = ("тонсь" pron:pers def npl cx:nom) ("тонсь" Pron Refl Pl2 Nom); #
LIST PronReflPl3Nom = ("сонсь" pron:pers def npl cx:nom) ("сонсь" Pron Refl Pl3 Nom); #

SET PronReflSg1NomNoCop = PronReflSg1Nom - (mod:ind) - (mod:conj) - (Clt/Cop) ;#
SET PronReflSg2NomNoCop = PronReflSg2Nom - (mod:ind) - (mod:conj) - (Clt/Cop) ;#
SET PronReflSg3NomNoCop = PronReflSg3Nom - (mod:ind) - (mod:conj) - (Clt/Cop) ;#
SET PronReflPl1NomNoCop = PronReflPl1Nom - (mod:ind) - (mod:conj) - (Clt/Cop) ;#
SET PronReflPl2NomNoCop = PronReflPl2Nom - (mod:ind) - (mod:conj) - (Clt/Cop) ;#
SET PronReflPl3NomNoCop = PronReflPl3Nom - (mod:ind) - (mod:conj) - (Clt/Cop) ;#

LIST PronDemSg = (pron:dem nsg);
LIST PronDemPl = (pron:dem npl);

LIST PronDemSgNom = (pron:dem nsg cx:nom);
LIST PronDemPlNom = (pron:dem npl cx:nom);
LIST PronDemSgGen = (pron:dem nsg cx:gen);
LIST PronDemPlGen = (pron:dem npl cx:gen);
LIST PronDemSPGen = (pron:dem nsg cx:gen) (pron:dem npl cx:gen) (Dem Sg Gen) (Dem Pl Gen);
LIST PronDemSgNomIndf = (pron:dem indf nsg cx:nom);
LIST PronDemPlNomIndf = (pron:dem indf npl cx:nom);
LIST PronDemSgAblIndf = (pron:dem indf nsg cx:abl);
LIST PronDemPlAblIndf = (pron:dem indf npl cx:abl);
LIST PronIndefNom = (pron:indef cx:nom); # jemand
LIST PronIndefGen = (pron:indef cx:gen); # jemand
LIST PronIndefSgNom = (pron:indef indf nsg cx:nom) (Pron Indef Sg Nom Indef);
LIST PronIndefPlNom = (pron:indef indf npl cx:nom);
LIST PronIndefSgAbl = (pron:indef indf nsg cx:abl);
LIST PronIndefPlAbl = (pron:indef indf npl cx:abl);
LIST PronIndefSgGenDerN = (pron:indef indf nsg gen-derN);
LIST PronIndefPlGenDerN = (pron:indef indf npl gen-derN);
LIST PronInterIndefSgNom = (pron:inter indf nsg cx:nom);
LIST PronInterIndefPlNom = (pron:inter indf npl cx:nom);
LIST PronInterIndefSgGen = (pron:inter indf nsg cx:gen);
LIST PronInterIndefPlGen = (pron:inter indf npl cx:gen);
LIST PronRelSgNomIndef = (pron:subord indf nsg cx:nom) ("кие" Pron Rel Sg Nom) ("кона" Pron Rel Sg Nom Indef) ;
LIST ESJ = ("эсь" Det Refl);
LIST PronRelPlNomIndef = (pron:subord indf npl cx:nom) ("кие" Pron Rel Pl Nom) ("кона" Pron Rel Pl Nom) ;
LIST PronRelSgNomDef = (pron:subord def nsg cx:nom) ("кие" Pron Rel Sg Nom Def) ("кона" Pron Rel Sg Nom Def);
LIST PronRelPlNomDef =(pron:subord def npl cx:nom) ("кие" Pron Rel Pl Nom Def) ("кона" Pron Rel Pl Nom Def) ;
LIST PronRelSPGenIndef = (pron:subord indf nsg cx:gen) ("кие" Pron Rel SP Gen) ("кона" Pron Rel SP Gen Indef) ;
LIST PronRelSgGenDef = (pron:subord def nsg cx:gen) ("кона" Pron Rel Sg Gen Def) ;
LIST PronPersNom = (pron:pers cx:nom) (Pron Pers Nom);
LIST PronPersSg1Nom = ("мон" pron:pers nsg cx:nom) (Pron Pers Sg1 Nom);
LIST PronPersSg2Nom = ("тон" pron:pers nsg cx:nom) (Pron Pers Sg2 Nom);
LIST PronPersSg3Nom = ("сон" pron:pers nsg cx:nom) (Pron Pers Sg3 Nom);
LIST PronPersSgNom = (pron:pers nsg cx:nom) (Pron Pers Sg1 Nom) (Pron Pers Sg2 Nom) (Pron Pers Sg3 Nom) ;
LIST PronPersPl1Nom = ("мон" pron:pers npl cx:nom) (Pron Pers Pl1 Nom);
LIST PronPersPl2Nom = ("тон" pron:pers npl cx:nom) (Pron Pers Pl2 Nom);
LIST PronPersPl3Nom = ("сон" pron:pers npl cx:nom) (Pron Pers Pl3 Nom);
LIST PronPersPlNom = (pron:pers npl cx:nom) (Pron Pers Pl1 Nom) (Pron Pers Pl2 Nom) (Pron Pers Pl3 Nom) ;

SET PronPersSg1NomNoCop = ("мон" pron:pers nsg cx:nom) - (mod:ind) - (mod:conj) | (Pron Pers Sg1 Nom) - (Clt/Cop) ;
SET PronPersSg2NomNoCop = ("тон" pron:pers nsg cx:nom) - (mod:ind) - (mod:conj) | (Pron Pers Sg2 Nom) - (Clt/Cop) ;
SET PronPersSg3NomNoCop = ("сон" pron:pers nsg cx:nom) - (mod:ind) - (mod:conj) | (Pron Pers Sg3 Nom) - (Clt/Cop) ;
SET PronPersPl1NomNoCop = ("мон" pron:pers npl cx:nom) - (mod:ind) - (mod:conj) | (Pron Pers Pl1 Nom) - (Clt/Cop) ;
SET PronPersPl2NomNoCop = ("тон" pron:pers npl cx:nom) - (mod:ind) - (mod:conj) | (Pron Pers Pl2 Nom) - (Clt/Cop) ;
SET PronPersPl3NomNoCop = ("сон" pron:pers npl cx:nom) - (mod:ind) - (mod:conj) | (Pron Pers Pl3 Nom) - (Clt/Cop) ;

#LIST PronPersSgGenSg1 = (pron:pers nsg cx:gen pxsg1);
#LIST PronPersSgGenSg2 = (pron:pers nsg cx:gen pxsg2);
#LIST PronPersSgGenSg3 = (pron:pers nsg cx:gen pxsg3);
#LIST PronPersPlGenPl1 = (pron:pers npl cx:gen pxpl1);
#LIST PronPersPlGenPl2 = (pron:pers npl cx:gen pxpl2);
#LIST PronPersPlGenPl3 = (pron:pers npl cx:gen pxpl3);
LIST PronPersSg1Gen = ("мон" pron:pers indf nsg cx:gen pxsg1) (pron:pers nsg cx:gen pxsg1) (Pron Pers Sg1 Gen) (pron:pers def nsg cx:gen pxsg1) (Pron Refl Sg1 Gen) (pron:refl nsg cx:gen pxsg1) ;#монь, монсь
LIST PronPersSg2Gen = ("тон" pron:pers indf nsg cx:gen) (pron:pers nsg cx:gen pxsg2) (Pron Pers Sg2 Gen) (pron:pers def nsg cx:gen pxsg2) (Pron Refl Sg2 Gen) (pron:refl nsg cx:gen pxsg2) ;#тонь тонть тонсеть эсеть
LIST PronPersSg3Gen = ("сон" pron:pers nsg cx:gen) (pron:refl nsg cx:gen pxsg3) (Pron Pers Sg3 Gen) (pron:pers def nsg cx:gen pxsg3) (Pron Refl Sg3 Gen)  (pron:refl nsg cx:gen pxsg3);#сонзэ, сонсензэ
LIST PronPersPl1Gen = ("мон" pron:pers npl cx:gen) (Pron Pers Pl1 Gen) (pron:pers def nsg cx:gen pxpl1) (Pron Refl Pl1 Gen) (pron:refl nsg cx:gen pxpl1);#минек
LIST PronPersPl2Gen = ("тон" pron:pers npl cx:gen) (Pron Pers Pl2 Gen) (pron:pers def nsg cx:gen pxpl2) (Pron Refl Pl2 Gen) (pron:refl nsg cx:gen pxpl2);#тынк
LIST PronPersPl3Gen = ("сон" pron:pers npl cx:gen) (Pron Pers Pl3 Gen) (pron:pers def nsg cx:gen pxpl3) (Pron Refl Pl3 Gen) (pron:refl nsg cx:gen pxpl3);#сынст


LIST PronPersReflSg3Gen = ("сонсь" pron:pers def nsg cx:gen pxsg3) ("эсь" pron:refl nsg cx:gen pxsg3) (pron:pers def nsg cx:gen pxsg3) (Pron Refl Sg3 Gen)  ("эсь" pron:refl nsg cx:gen pxsg3);#сонзэ, сонсензэ, эсензэ

LIST PronPersSg1Abl = (pron:pers nsg cx:abl) (Pron Pers Sg1 Abl);#мондень
LIST PronPersSg2Abl = (pron:pers nsg cx:abl) (Pron Pers Sg2 Abl);#тондеть
LIST PronPersSg3Abl = (pron:pers nsg cx:abl) (Pron Pers Sg3 Abl);#сондензэ
LIST PronPersPl1Abl = (pron:pers npl cx:abl) (Pron Pers Pl1 Abl);#минденек
LIST PronPersPl2Abl = (pron:pers npl cx:abl) (Pron Pers Pl2 Abl);#тынденк
LIST PronPersPl3Abl = (pron:pers npl cx:abl) (Pron Pers Pl3 Abl);#сынденст
LIST PronPersGen = (pron:pers cx:gen) (Pron Pers Gen);

LIST PronPersGenNotPl3 = PronPersSg1Gen PronPersSg2Gen PronPersSg3Gen PronPersPl1Gen PronPersPl2Gen; #2022-01-26

LIST IDEOPHONES = "ёлчк" "лавцк" ;#ideophones

LIST PronPersIndfSgNom = (pron:pers indf nsg cx:nom);
LIST PronPersIndfPlNom = (pron:pers indf npl cx:nom);

LIST PronReflIndfNom = (pron:refl indf nsg cx:nom);
LIST PronLIJASgNom = (pron:LIJAgroup indf nsg cx:nom);
LIST PronLIJAPlNom = (pron:LIJAgroup indf npl cx:nom);
LIST PronVESE = pron:VESEgroup "эрьва" "весе";
LIST PronVESESgNom = (pron:VESEgroup indf nsg cx:nom);
LIST VESENOMSG = ("весе" pron:VESEgroup indf nsg cx:nom) ("весе" Pron Sg Nom Indef);# весе Sg Nom Indef
LIST SEMBESGNOM = ("сембе" pron:VESEgroup indf nsg cx:nom);#"сембе" everybody takes ScPl3

# need to disallow personal pronoun objects
LIST LOCATIVE = Loc Ine ;
SET LOCATIVE-NOCLT = LOCATIVE - (Clt/Cop) - (Pl);

SET SUBJECTCANDIDATESG3 = NMNNomSgPX OR PronPersSg3Nom OR SGNOMDEF;
SET SUBJECTCANDIDATEPL3 = NMNNomPlPX OR PronRelPlNomDef OR PNOUNPlNomDef OR NOUNPlNomDef OR NAdjPlNomDef OR PronPersPl3Nom OR (Num Card Coll Pl Nom Def) ;

SET OBJECTCANDIDATEPL3INDEF = NPropNomPlIndef | NOUNPlNomIndef | NumPlNomIndef ;
SET OBJECTCANDIDATEPL3DEF = NPropPlGenDef | ("весеме" pron:VESEgroup indf nsg cx:gen) | ("сембе" pron:VESEgroup indf nsg cx:gen) | NOUNPlGenDef | NumPlGenDef ;

SET VOBLIQ_PATCANDIDATE = (pron:dem indf nsg cx:nom) | (n indf nsg cx:nom) | (pron:inter indf nsg cx:nom) | (n nsg cx:nom/gen pxsg1) | (n nsg cx:nom pxsg1) | (n npl cx:nom pxsg3) | (n npl cx:nom/gen pxsg3) | (n def nsg cx:nom) | (n def npl cx:nom);#patient candidate for VObliq

LIST DefSg3Obj = PronPersSg3Gen (def nsg cx:gen) (Sg Gen Def) ; #2022-02-20 object candidates, 
LIST DefPl3Obj = PronPersPl3Gen (def npl cx:gen) (Pl Gen Def) ; #2022-01-26

LIST Ptcp2 = ptcp2;



LIST Infinitive = infMS/ME; #
LIST Infinitives = (inf/verbnMO/ME/MU/M);
LIST InfinitiveNom = (inf/verbnMO/ME/MU/M cx:nom) (NomAct N Sg Nom) (NomAct N Pl Nom);# was (infMS/ME cx:nom) (inf/verbnMO/ME/MU/M cx:nom);
LIST InfinitiveAbl = (inf/verbnMO/ME/MU/M indf nsg cx:abl);
LIST InfinitiveEla = (inf/verbnMO/ME/MU/M indf nsg cx:ela);
LIST InfinitiveGenPxSg2 = (inf/verbnMO/ME/MU/M nsg cx:gen pxsg2) (inf/verbnMO/ME/MU/M nsg cx:nom/gen pxsg2);
LIST InfinitiveGenPxSg3 = (inf/verbnMO/ME/MU/M nsg cx:gen pxsg3);# чинь оймамонзо deverbal noun in -мо (cf. inf/verbn/agptcpMA nsg cx:gen) вень удоманзо = deverbal noun in -ма 2022-02-07

LIST InfinitiveNomPxSg2 = (inf/verbnMO/ME/MU/M nsg cx:nom pxsg2);
LIST InfinitiveElaPxSg1 = (inf/verbnMO/ME/MU/M nsg cx:ela pxsg1);
LIST InfinitiveElaPxSg2 = (inf/verbnMO/ME/MU/M nsg cx:ela pxsg2);
LIST InfinitiveElaPxSg3 = (inf/verbnMO/ME/MU/M nsg cx:ela pxsg3);
LIST InfinitiveElaPxPl1 = (inf/verbnMO/ME/MU/M nsg cx:ela pxpl1);
LIST InfinitiveElaPxPl2 = (inf/verbnMO/ME/MU/M nsg cx:ela pxpl2);
LIST InfinitiveElaPxPl3 = (inf/verbnMO/ME/MU/M nsg cx:ela pxpl3);
LIST GerEla = (infMS/ME cx:ela) (Ger Ela);
LIST GerElaPxSg1 = (infMS/ME cx:ela pxsg1) (Ger Ela PxSg1);
LIST GerElaPxSg2 = (infMS/ME cx:ela pxsg2) (Ger Ela PxSg2);
LIST GerElaPxSg3 = (infMS/ME cx:ela pxsg3) (Ger Ela PxSg3);
LIST GerElaPxPl1 = (infMS/ME cx:ela pxpl1) (Ger Ela PxPl1);
LIST GerElaPxPl2 = (infMS/ME cx:ela pxpl2) (Ger Ela PxPl2);
LIST GerElaPxPl3 = (infMS/ME cx:ela pxpl3) (Ger Ela PxPl3);

SET GerElaPx = GerElaPxSg1 | GerElaPxSg2 | GerElaPxSg3 | GerElaPxPl1 | GerElaPxPl2 | GerElaPxPl3 | InfinitiveElaPxSg1 | InfinitiveElaPxSg2 | InfinitiveElaPxSg3 | InfinitiveElaPxPl1 | InfinitiveElaPxPl2 | InfinitiveElaPxPl3 ;
SET AllGerEla = GerEla | GerElaPx | InfinitiveEla ;

LIST MOOD-V = Cond Conj CondConj Des Imprt Ind Opt Prec   ; #!! MOOD-V
SET VINF = (infMS/ME cx:nom) | (infMS/ME cx:ill) | (V Inf) | (V) - (MOOD-V) ;#non-finite
#LIST VINF = (infMS/ME cx:nom) (infMS/ME cx:ill) (V Inf);#Inf 1 and 2, ill and loc
SET VINF1 = (infMS/ME cx:ill) | (V Inf) - (Inf Loc); # First infinitive
     #was (infMS/ME cx:nom) (infMS/ME cx:ill) (V Inf); cf SupLoc
LIST vfin = vfin; # These are Mormula values: 2023_02_23
SET a-finpred = (Clt/Cop) | (mod:ind) - vfin | (mod:conj) - vfin;#a-finite predication
 #Оршазель ташто костюмсо.
 # This still needs all instances of Prs+ScSg3 where there is a non-finite present
 
SET VFIN = vfin | MOOD-V | ConNeg; #finite verbs
# there should be an hierarchy of other-than-finite-verb entities
# that can be predicates
LIST ULEMS = "улемс" "ульнемс" "эрьме" ;#Copula verbs
#inf/verbnMO/ME/MU/M 
SET FINCOPULA = ULEMS + MOOD-V; #Will this give me finite copula? 2022-02-15
LIST SCONJSHTOBU = "штобу" "штоба" ;#


LIST OBLIQUECASES = cx:abe cx:abl cx:all cx:gen cx:ill cx:ine cx:lat cx:loc cx:prl cx:transl  Abe Abl Com Cmpr Dat Ela Gen Ill Ine Lat Loc Prl TempCx Trl Temp ;
LIST NONCORECASES = cx:abe cx:abl cx:ill cx:ine cx:lat cx:loc cx:prl cx:transl  Abe Abl Com Cmpr Ela Ill Ine Lat Loc Prl TempCx Trl Temp ;#

LIST WORD = n/adj Po A Adv CC CS Interj N Num Pcle Pron V;
LIST NON-VERB = n/adj Po A Adv CC CS Interj N Num Pcle Pron ;
SET NONOBLIQUECASES = WORD - OBLIQUECASES; #
SET UNIQUANTSGNOM = PronVESE - OBLIQUECASES - Pl - Def ;



LIST VfinImper = (vfin mod:imper); # TODO: mod:imper??? Imperative? then it is infin!!!
LIST VfinImper23 = (vfin mod:imper dsg2-osg3);
LIST VfinImperV2Sg = (vfin mod:imper vsg2);
LIST VfinImperV2Pl = (vfin mod:imper vpl2);
LIST VfinImperD2O3 = (vfin mod:imper dsg2-osg3);
LIST VfinInd12 = (vfin mod:ind dsg1-osg2);
LIST VfinIndScSg3OcSP = (vfin mod:ind /dsg3-osg[1-3]/ri)
                 (vfin mod:ind /dsg3-opl[1-3]/ri)
                 (neg:ES mod:ind /dsg3-osg[1-3]/ri)
                 (neg:ES mod:ind /dsg3-opl[1-3]/ri);
LIST VfinIndScSgOcSP = (vfin mod:ind /dsg[1-3]-osg[1-3]/ri)
                   (vfin mod:ind /dsg[1-3]-opl[1-3]/ri)
                   (neg:ES mod:ind /dsg[1-3]-osg[1-3]/ri)
                   (neg:ES mod:ind /dsg[1-3]-opl[1-3]/ri);
LIST VfinIndScPlOcSP = (vfin mod:ind /dpl[1-3]-osg[1-3]/ri)
                   (vfin mod:ind /dpl[1-3]-opl[1-3]/ri)
                   (neg:ES mod:ind /dpl[1-3]-osg[1-3]/ri)
                   (neg:ES mod:ind /dpl[1-3]-opl[1-3]/ri);
LIST VfinInd33 = (vfin mod:ind dsg3-osg3);
SET VfinVsg1 = (vfin vsg1) | (neg:ES vsg1) | (ScSg1) - (OcSg1) - (OcSg2) - (OcSg3) - (OcPl1) - (OcPl2) - (OcPl3) - (Clt/Cop);
SET VfinVsg2 = (mod:imper vsg2) | (vfin vsg2) | (neg:ES vsg2) | (ScSg2) - (OcSg1) - (OcSg2) - (OcSg3) - (OcPl1) - (OcPl2) - (OcPl3) - (Clt/Cop);
SET VfinVsg3 = (vfin vsg3) | (neg:ES vsg3) | (ScSg3) - (OcSg1) - (OcSg2) - (OcSg3) - (OcPl1) - (OcPl2) - (OcPl3) - (Clt/Cop);# Only Subject conjucation
SET VfinVpl1 = (vfin vpl1) | (neg:ES vpl1) | (ScPl1) - (OcSg1) - (OcSg2) - (OcSg3) - (OcPl1) - (OcPl2) - (OcPl3) - (Clt/Cop);#subject-inflection pl1
SET VfinVpl2 = (mod:imper vpl2) | (vfin vpl2) | (neg:ES vpl2) | (ScPl2) - (OcSg1) - (OcSg2) - (OcSg3) - (OcPl1) - (OcPl2) - (OcPl3) - (Clt/Cop);
SET VfinVpl3 = (vfin vpl3) | (neg:ES vpl3) | (ScPl3) - (OcSg1) - (OcSg2) - (OcSg3) - (OcPl1) - (OcPl2) - (OcPl3) - (Clt/Cop);#verb predicate with Pl3 subject and no other argument marking
SET VSUBJCONJ = VfinVsg1 | VfinVsg2 | VfinVsg3 | VfinVpl1 | VfinVpl2 | VfinVpl3 ;#all instances of finite verbal conjugation

LIST VfinPretSIVpl3 = (vfin mod:ind temp:pretS/I vpl3);
LIST VfinPretSIVpl3Cpound = (vfin mod:ind temp:pres vsg1 cpound-end/cpound-unsegm);
SET VfinSC = VfinVsg1 | VfinVsg2 | VfinVsg3 | VfinVpl1 | VfinVpl2 | VfinVpl3; #2022-01-26 subject conjugated verbs not copulas without object marking
SET VfinSCNOTPL3 = VfinVsg1 | VfinVsg2 | VfinVsg3 | VfinVpl1 | VfinVpl2 ;#subject conjugation not PL3

SET VFINPERSONSUBJ =  VFINSG1SUBJ | VFINSG2SUBJ | VFINSG3SUBJ | VFINPL1SUBJ | VFINPL2SUBJ | VFINPL3SUBJ ;

#Instances with subject-object conjugation only
LIST VFINPL3SUBJWITHOBJ = (dpl3-osg1) (dpl3-osg2) (dpl3-osg3) (dpl3-opl1) (dpl3-opl2) (dpl3-opl3) (ScPl3 OcSg1) (ScPl3 OcSg2) (ScPl3 OcSg3) (ScPl3 OcPl1) (ScPl3 OcPl2) (ScPl3 OcPl3); # all predicates with Pl3 subject marking
LIST VFINPL2SUBJWITHOBJ = (dpl2-osg1) (dpl2-osg3) (dpl2-opl1) (dpl2-opl3) (dpl2-osg3/opl3) (ScPl2 OcSg1) (ScPl2 OcSg3) (ScPl2 OcPl1) (ScPl2 OcPl3);
LIST VFINPL1SUBJWITHOBJ = (dpl1-osg2) (dpl1-osg3) (dpl1-opl2) (dpl1-opl3) (vpl1/dpl1-osg3/opl3) (ScPl1 OcSg2) (ScPl1 OcSg3) (ScPl1 OcPl2) (ScPl1 OcPl3);
LIST VFINSG3SUBJWITHOBJ = (dsg3-osg1) (dsg3-osg2) (dsg3-osg3) (dsg3-opl1) (dsg3-opl2) (dsg3-opl3) (ScSg3 OcSg1) (ScSg3 OcSg2) (ScSg3 OcSg3) (ScSg3 OcPl1) (ScSg3 OcPl2) (ScSg3 OcPl3) ;
LIST VFINSG2SUBJWITHOBJ = (dsg2-osg1) (dsg2-osg3) (dsg2-opl1) (dsg2-opl3) (ScSg2 OcSg1) (ScSg2 OcSg3) (ScSg2 OcPl1) (ScSg2 OcPl3);
LIST VFINSG1SUBJWITHOBJ = (dsg1-osg2) (dsg1-osg3) (dsg1-opl2) (dsg1-opl3) (ScSg1 OcSg2) (ScSg1 OcSg3) (ScSg1 OcPl2) (ScSg1 OcPl3) ;

LIST VTEMP = (temp:pres) (temp:pretL) Pres Prt1 Prt2 ;
LIST VOCPL3 = (dsg1-opl3) (dpl1-opl3) (dsg2-opl3) (dpl2-opl3) (dsg3-opl3) (dpl3-opl3) (ScSg1 OcPl3) (ScPl1 OcPl3) (ScSg2 OcPl3) (ScPl2 OcPl3) (ScSg3 OcPl3) (ScPl3 OcPl3)   ;
LIST VOCPL2 = (dsg1-opl2) (dpl1-opl2) (dsg3-opl2) (dpl3-opl2) (ScSg1 OcPl2) (ScPl1 OcPl2) (ScSg3 OcPl2) (ScPl3 OcPl2) ;
LIST VOCPL1 = (dsg2-opl1) (dpl2-opl1) (dsg3-opl1) (dpl3-opl1) (ScSg2 OcPl1) (ScPl2 OcPl1) (ScSg3 OcPl1) (ScPl3 OcPl1) ;
LIST VOCSG3 = (dsg1-osg3) (dpl1-osg3) (dsg2-osg3) (dpl2-osg3) (dsg3-osg3) (dpl3-osg3) (ScSg1 OcSg3) (ScPl1 OcSg3) (ScSg2 OcSg3) (ScPl2 OcSg3) (ScSg3 OcSg3) (ScPl3 OcSg3)  (dpl2-osg3/opl3) (vpl1/dpl1-osg3/opl3) (dpl3-osg3/opl3);#some oSP ambiguity
LIST VOCSG2 = (dsg1-osg2) (dpl1-osg2) (dsg3-osg2) (dpl3-osg2) (ScSg1 OcSg2) (ScPl1 OcSg2) (ScSg3 OcSg2) (ScPl3 OcSg2) ;
LIST VOCSG1 = (dsg2-osg1) (dpl2-osg1) (dsg3-osg1) (dpl3-osg1) (ScSg2 OcSg1) (ScPl2 OcSg1) (ScSg3 OcSg1) (ScPl3 OcSg1) ;

SET VOCPERSON =  VOCSG1 | VOCSG2 | VOCSG3 | VOCPL1 | VOCPL2 | VOCPL3 ;

SET VOCSG3NOSCSG3 = VOCSG3 - (dsg3-osg3);#кандынек тенк кшинек-салонок
SET NOTVOCSG3 = VFIN - VOCSG1 - VOCSG2 - VOCPL1 - VOCPL2 - VOCPL3;
SET NOTVOCPL3 = VFIN - VOCSG1 - VOCSG2 - VOCSG3 - VOCPL1 - VOCPL2;
SET NOTVFINPL3SUBJ = VFINPERSONSUBJ - VFINPL3SUBJ ;
SET ADNOMINALATTRCANDIDATE = NAdjSgNomIndef | AJJSgNomIndef | NOUNSgNomIndef | NPropSgNomIndef | NumOrdSgNomIndef;

SET PREDForDefSG3Obj = VOCSG3 | VfinSC;#predicate that can take sg3 def object 
SET PREDForDefPL3Obj = VOCPL3 | VfinSC;#predicate that can take pl3 def object 
SET PREDForIndefSG3Obj = VfinSC;#predicate for sg3 indef object

SET PREDForIndef3ObjNot3Subj = VfinSC - VfinVsg3 - VfinVpl3;#predicate for sg3/pl3 indef object without sg3 subj

SET SG2REFERENCE =  ("тон") | ("вана") | VfinVsg2 | VOCSG2 | PxSg2 ;#reference to Sg2 person


##2022-09-03 word lists

LIST ADJTAKESMAMOABL = "бойка" "кол" "од" "сыре" ;# колат укшномадо,


LIST NOUNTAKESABL = "ёвкс" "куля" "мель" "приказ" "тема" "указания" "чумо" "эпизод" ; #пленс понгомадо мельтне

LIST POSTPTAKESABL = "башка" "икеле" "мейле" ;#postp/adverb that is preceded by ablative

LIST IVERBTAKESABL = "абунгадомс" "авардемс" "ландявомс" "олякстомтомс" "пелемс" "пешкедемс" "покордавомс" "ракамс" "рангомс" "сыргоземс" "таргоземс";

LIST VERBTAKESABL = "арсемс" "бредямс" "ванстомс" "видькстамс" "визделгадомс" "виздемс" "ёвтнемс" "кортамс" "кортнемс" "ледстнемс" "ледстямс" "ловномс" "марсемс" "марямс" "меремс" "мернемс" "пачтнемс" "пачтямс" "сёрмадомс" "содамс" "толковамс" "энялдомс" ;

LIST VERBTAKESMAMOABL = "лоткамс" "лотксемс" "удаламс" ;

LIST INGESTIONVABLARG = "андомс" "каванямс" "корштамс" "лексемс" "лекстямс" "поремс" "симдемс" "симемс" "сускомс" "таргамс" "ярсамс" ;# verbs of ingestion with ablative arguments

SET INGESTIONVABLARGINF = INGESTIONVABLARG - VFIN;#ойдензэ ярсамо якси
SET INGESTIONVABLARGFIN = INGESTIONVABLARG - (infMS/ME) - (V Inf) ;# finite ingestion verbs
LIST VERBTAKESkodaCCOMP = "арсемс" "ледстямс" "марямс" "невтемс" "невтнемс" "неемс" "помнямс" "редямс" "содамс" "чарькодемс" ;#knows how

SET MEASURES = ("валкс") | ("пондо") | ("сядо") | ("уштомо") ;#measures and quantifiers, numerals and measures

LIST VOCATIVETARGET = "ава" "альте" "Вармальте" "Верепаз" "корьминець" "матушка" "паз" "Пачальте" "Сярко" ;#words that are vocatives, but not personal names
# there may be a list of vocatives followed by a subsequent address of the second person.

# cobj
# allows for interim vocative: Ды содат ли, браток, кода седеем токнозевсь?
# further issues inclued: сон тосо распоряженият максниль, кода теемс укреплениятнень,

LIST VERBTAKESkodaCSUBJ = "ледстявомс" "неявомс" "помнявомс" ;
# csubj

LIST VERBTAKESDATILL = "радовамс" ;

LIST DATAUX = "кадовомс" "летемс" "савкшномс" "савомс" "эрявкшномс" "эрявомс" ;# auxiliary verbs with non-finite main verbs in MS and a dative agent

SET DATAUX_FIN = DATAUX + VFIN ;

LIST IVMOTIONVERBSWITHMO = "велявтомс" "каявомс" "кепетемс" "комамс" "куземс" "лисемс" "лоткакшномс" "лоткамс" "лотксемс" "мадемс" "молемс" "напустямс" "озамс" "оргодемс" "появакшномс" "появамс" "пульзямс" "самс" "совамс" "сыргамс" "туемс" "чиемс" "якамс" "яксемс" ; #intransitive motion verbs with SUP
LIST TVMOTIONVERBSWITHMO = "кадомс" "комавтомс" "кучнемс" "кучомс" "ливтемс" "мадстемс"; #transitive motion verbs with SUP

LIST IVERBWITHMO = "арсекшнемс" "бажамс" "капшамс" "кенеремс" "маштомс" "смеямс" "снартнемс" "тонавтнемс" "тонадокшномс" "тонадомс" "ушодомс" ; #intransitive verbs with SUP
LIST TVERBWITHMO = "баславамс" "кармавтомс" "кармавтнемс" "тонавтомс" ; #transitive verbs with SUP

LIST ALLIVERBSWITHMO = IVMOTIONVERBSWITHMO IVERBWITHMO; #all intransitive verbs with SUP
LIST ALLTVERBSWITHMO = TVMOTIONVERBSWITHMO TVERBWITHMO ; #all transitive verbs with SUP
LIST VERBWITHMO = ALLIVERBSWITHMO ALLTVERBSWITHMO ; #!!озамс ярсамо Distinguish from Der/NomAct


LIST SUPAUX = "кармамс" ;# auxiliaries with non-finite main verbs in MO/ME supine/ Inf Loc


LIST VERBWITHMS_SAMEAGENT = "алтамс" "арсекшнемс" "арсемс" "бажамс" "вечкемс" "кенеремс" "лездамс" "налкстамс" "нулгодемс" "отказамс" "пелемс" "решамс" "смеямс" "снартнемс" "снартомс" "согласямс" "стараямс" "терявтнемс" "удаламс" ; #Verbs taking MS where the subject is retained as subject/agent of the non-finite verb

LIST VERBWITHMS_DIFFAGENT = "агитировамс" "кадомс" "кармавтомс" "максомс" "меремс" "энялдомс" ;
#Verbs taking MS where the subject is not the subject/agent of the non-finite verb

LIST VERBWITHMS_OBJ = "понгомс" "сатомс" ; # Non-volitional IV subject becomes patient of MS

SET VERBWITHMS = VERBWITHMS_SAMEAGENT | VERBWITHMS_DIFFAGENT | VERBWITHMS_OBJ ;
#!! макссь чарькодемс, Deal with DATAUX separately; they also take MS
#This will require splitting


LIST MEREMSDATWITHNOM = "меремс" "мярьгомс" ;# Erzya and Moksha
     		      #наукати мярьгихть естествознания
		      #наукантень мерить естествознания

SET IVSupEla = IV + SupEla ;#


SET TVFIN = VFIN - IV - MOOD-V ;

SET SUPAUX_FIN = SUPAUX + VFIN - TV ;# finite-form auxiliaries taking supine MO/ME

SET AUXVERBS = SUPAUX - TV | DATAUX | (Aux Neg Ind Prt1) ;#"летемс" "савшкномс" "савомс" "эрявкшномс" "эрявомс" ;#DATAUX

SET NOUNPHRASEBREAK = VFIN | EOS | Adv | VINF | VINF1 ;# Whatever will break a noun phrase

# need to disallow personal pronoun objects
SET FOR-VOCSG1 = VFIN - VOCPL3 - VOCPL2 - VOCPL1 - VOCSG3 - VOCSG2 ;

SET SCPERSON =  ScSg1 | ScSg2 | ScSg3 | ScPl1 | ScPl2 | ScPl3 ;

SET NONVCENTERS = (ptcp1) | (ptcp2) | (ptcp3) | (ptcp4) | VOblig | (n/adj) | (n) | (adj) | (adv:pron) | (pron:LIJAgroup) | Clt/Cop | (postp/prep cx:ine) | Gen | Loc ;#non-verb centers, predicates

SET NONVCENTERSSG = PostpInePX | NOUNSPInePX | PostpPrlPX | NOUNSPPrlPX | (cx:ine pxsg1) | (cx:ine pxsg2) | (cx:ine pxsg3) | (cx:ine pxpl1) | (cx:ine pxpl2) | (cx:ine pxsg3) | (cx:ine) | (Clt/Cop Prs ScSg3) | (Clt/Cop Prt2 ScSg3) ;#non-verbal predicate candidates for singular subjects. Here third person has ZERO marking

SET NONVCENTERSPL = PostpInePX | NOUNSPInePX | PostpPrlPX | NOUNSPPrlPX | (cx:ine pxsg1) | (cx:ine pxsg2) | (cx:ine pxsg3) | (cx:ine pxpl1) | (cx:ine pxpl2) | (cx:ine pxsg3) | (Clt/Cop Prs ScPl3) | (Clt/Cop Prt2 ScPl3) ;#non-verbal predicate candidates for plural subjects.
    # сиянь одюжат [лангсонзо]

#CHECK why these do not work 2022-04-08
SET NONVSG1 = NONVCENTERS + ScSg1 ;
SET NONVSG2 = NONVCENTERS + ScSg2 ;
SET NONVSG3 = NONVCENTERS + ScSg3 ;
SET NONVPL1 = NONVCENTERS + ScPl1 ;
SET NONVPL2 = NONVCENTERS + ScPl2 ;
SET NONVPL3 = NONVCENTERS + ScPl3 ;
SET NONVPERSON = NONVSG1 | NONVSG2 | NONVSG3 | NONVPL1 | NONVPL2 | NONVPL3 ;# this is used for identifying all but Prs ScSg3 and ScPl3 in a-finite verbal predication

SET FAUXVERBS = AUXVERBS + MOOD-V;# these are finite auxiliaries
SET FNOTAUXVERBS = VFINPERSONSUBJ - Clt/Cop - AUXVERBS ;# these are non-auxiliary finites
SET NONFAUXVERBS = (AUXVERBS) - MOOD-V; # these are non-finite auxiliaries
SET NONFMAINVERBS = VINF - AUXVERBS - MOOD-V ;# these are non-finite main verbs
#SET FNOTAUXVERBS = VFINPERSONSUBJ + MOOD-V - Clt/Cop - AUXVERBS ;


SET PREDCASES = Abe | Abl | Ela | Gen | Ine | Loc | Nom | Prl | Tra ;

SET ADVLPREDCASESSG3 = Abe + ScSg3 | Abl + ScSg3 | Ela + ScSg3 | Ine + ScSg3 | Loc + ScSg3 | Prl + ScSg3 | Tra + ScSg3 ;# 
SET ADVLPREDCASESPL3 = Abe + ScPl3 | Abl + ScPl3 | Ela + ScPl3 | Ine + ScPl3 | Loc + ScPl3 | Prl + ScPl3 | Tra + ScPl3 ;# 

SET ADVLPREDCASES = Abe + SCPERSON | Abl + SCPERSON | Ela + SCPERSON | Ine + SCPERSON | Loc + SCPERSON | Prl + SCPERSON | Tra + SCPERSON ;# used with @ADVLPRED, i.e. where the predicate is the adverbial

#SET ADVLPREDCASES = OBLIQUECASES - Dat - Gen - Lat - Nom + NONVPERSON;
#SET ADVLPREDCASES = NONVPERSON - NONOBLIQUECASES - Dat - Gen - Lat - Nom;

# ???
LIST AuxNeg = (neg:ES) (neg:imper/optat) (neg:cond) (Aux Neg) (neg:ASH mod:ind temp:pretS/I vsg1) (neg:ASH mod:ind temp:pretS/I vsg2) (neg:ASH mod:ind temp:pretS/I vsg3)  (neg:ASH mod:ind temp:pretS/I vpl1) (neg:ASH mod:ind temp:pretS/I vpl2) (neg:ASH mod:ind temp:pretS/I vpl3)
 (neg:ASH mod:ind temp:pretS/I dsg1-osg2)
 (neg:ASH mod:ind temp:pretS/I dsg1-osg3)
 (neg:ASH mod:ind temp:pretS/I dsg1-opl2)
 (neg:ASH mod:ind temp:pretS/I dsg1-opl3)
 (neg:ASH mod:ind temp:pretS/I dsg2-osg1)
 (neg:ASH mod:ind temp:pretS/I dsg2-osg3)
 (neg:ASH mod:ind temp:pretS/I dsg2-opl1)
 (neg:ASH mod:ind temp:pretS/I dsg2-opl3)
 (neg:ASH mod:ind temp:pretS/I dsg3-osg1)
 (neg:ASH mod:ind temp:pretS/I dsg3-osg2)
 (neg:ASH mod:ind temp:pretS/I dsg3-osg3)
 (neg:ASH mod:ind temp:pretS/I dsg3-opl1)
 (neg:ASH mod:ind temp:pretS/I dsg3-opl2)
 (neg:ASH mod:ind temp:pretS/I dsg3-opl3)
 (neg:ASH mod:ind temp:pretS/I dpl1-osg2)
 (neg:ASH mod:ind temp:pretS/I dpl1-osg3)
 (neg:ASH mod:ind temp:pretS/I dpl1-opl2)
 (neg:ASH mod:ind temp:pretS/I dpl1-opl3)
 (neg:ASH mod:ind temp:pretS/I dpl2-osg1)
 (neg:ASH mod:ind temp:pretS/I dpl2-osg3)
 (neg:ASH mod:ind temp:pretS/I dpl2-opl1)
 (neg:ASH mod:ind temp:pretS/I dpl2-opl3)
 (neg:ASH mod:ind temp:pretS/I dpl3-osg1)
 (neg:ASH mod:ind temp:pretS/I dpl3-osg2)
 (neg:ASH mod:ind temp:pretS/I dpl3-osg3)
 (neg:ASH mod:ind temp:pretS/I dpl3-opl1)
 (neg:ASH mod:ind temp:pretS/I dpl3-opl2)
 (neg:ASH mod:ind temp:pretS/I dpl3-opl3)
 (neg:AVOL mod:conj) ;
   #these are auxiliary verbs of negation from the supletive paradigm; they are not locative or existential

LIST NegVRole = neg:Agroup;
LIST ImperOptatV2Sg = (neg:imper/optat mod:imper vsg2); # Get rid of neg???
LIST ImperOptatV2Pl = (neg:imper/optat mod:imper vpl2); # Get rid of neg???
LIST ImperOptatV3Sg = (neg:imper/optat mod:imper vsg3); # Get rid of neg???
LIST ImperOptatV3Pl = (neg:imper/optat mod:imper vpl3); # Get rid of neg???
LIST ImperOptat21 = (neg:imper/optat mod:imper dsg2-osg1); # Get rid of neg???
LIST ImperOptatXXSg = (neg:imper/optat mod:imper /dsg[1-3]-osg[1-3]/ri)
                      (neg:imper/optat mod:imper /dsg[1-3]-opl[1-3]/ri);
LIST ImperOptatXXPl = (neg:imper/optat mod:imper /dpl[1-3]-osg[1-3]/ri)
                      (neg:imper/optat mod:imper /dpl[1-3]-opl[1-3]/ri);


LIST ImperParticle = (imper-particle);
#LIST PretV3Sg = (temp:pretS/I mod:ind /dpl3-osg[1-3]/ri)
#LIST Pret3XSg = (temp:pretS/I mod:ind /dsg3-osg[1-3]/ri)
#                (temp:pretS/I mod:ind /dsg3-opl[1-3]/ri);
#LIST Pret3XPl = (temp:pretS/I mod:ind /dpl3-osg[1-3]/ri)
#                (temp:pretS/I mod:ind /dpl3-opl[1-3]/ri);

SET N-ALL = N | NAdj | NProp;
SET NNom = NOUNNom | NAdjNom | NPropNom;
SET NNomIndef = NOUNNomIndef | NPropNomIndef;
SET NGen = NOUNGen | NAdjGen | NPropGen;
SET NPron = N-ALL | Pron;
SET PronNom = PronPersNom | PronIndefNom;
SET PronGen = PronPersGen | PronIndefGen;
SET PronNNom = NNom | PronNom;
SET PronNGen = NGen | PronGen;
SET PronNGenWithoutProp = NOUNGen | NAdjGen | PronGen;
#LIST PronNNom = (n/adj cx:nom) (n:prop cx:nom) (pron:pers cx:nom);
#SET PronNNom = NOUNNom | NAdjNom | NPropNom | PronPersNom;

SET NPBARRIER = VFINPERSONSUBJ;#noun phrase barrier, cannot occur inside of a noun phrase
        #теде: Паряк, Зина теде содась уш Поля патянзо пельде,
	
MAP (@FS-<ADVL) TARGET SupEla IF (-1* VFIN OR a-finpred BARRIER CLB OR BOS) (1 CLB OR EOS);
MAP (@FS-<ADVL) TARGET SupEla IF (-1* VFIN OR a-finpred BARRIER CLB OR BOS) (NOT 1 CLB OR EOS) (NOT 1* VFIN OR a-finpred BARRIER CLB OR EOS);
#infMS/ME cx:ela , конат нолдазельть операциянть анокстамсто ды ветямсто.
MAP (@FS-ADVL>) TARGET SupEla IF (1* VFIN OR a-finpred BARRIER CLB OR EOS) (-1 CLB OR BOS);
MAP (@FS-ADVL>) TARGET SupEla IF (1* VFIN OR a-finpred BARRIER CLB OR EOS) (NOT -1 CLB OR BOS) (NOT -1* VFIN OR a-finpred BARRIER CLB OR BOS);
    #ловномсто: Те пек покш подвигесь, - ловномсто арсесь Пуркаев.
    # Is this deverbal noun an ADVL> or should it be FS-ADVL> 2022-07-17
    
MAP (@FS-ADVL>) TARGET VFIN IF (*0 ("бути") BARRIER CLB)
     		 	(*1 (",") LINK *0 VFIN BARRIER CLB OR EOS);# This only deals with a subsequent FMAINV
			#прась: Бути тонь икелев эли тонь кедь лангс прась монь Андрей, можобуть томбавить...

MAP (@FS-ADVL>) TARGET Cond OR CondConj IF
     		 	(1 (","))
			(NOT *-1 VFIN BARRIER (":") OR BOS)
			(*2 VFIN BARRIER CLB OR EOS);# This only deals with a subsequent FMAINV
			#кундындерясь: Сонсь кедстеме: кундындерясь, а менстяви

MAP (@FS-ADVL>) TARGET FAUXVERBS IF (-1* ("зярдо") BARRIER BOS OR CLB LINK -1 CLB OR BOS LINK 1* CLB BARRIER CLB LINK 1* FNOTAUXVERBS OR FAUXVERBS BARRIER CLB OR EOS);


MAP (@-F<AUXV) TARGET FAUXVERBS OR SUPAUX_FIN OR DATAUX_FIN OR AuxNeg IF (-1* VINF BARRIER CLB OR BOS OR @CVP);
MAP (@-FAUXV>) TARGET FAUXVERBS OR SUPAUX_FIN OR DATAUX_FIN OR AuxNeg IF (1* VINF BARRIER CLB OR BOS OR @CVP);
# а : Монь койсэ, тесэ тондеть парсте кияк а содасынзе тевтнень.
# эзь : Эзь сода.
# @CVP : Ожо мекшкесь ливтясь ципакине малас ды кармась тердемензэ нешкепирев.

## conjugated a-finites
LIST @+FAUXV = @+FAUXV ; #!! * @+FAUXV : finite auxiliary verbs
#MAP (@+FAUXV) TARGET FAUXVERBS OR SUPAUX_FIN OR DATAUX_FIN OR AuxNeg;

LIST @-FAUXV = @-FAUXV ; #!! * @-FAUXV : non-finite auxiliary verbs
MAP (@-FAUXV) TARGET NONFAUXVERBS;

MAP (@-FMAINV) TARGET ConNeg IF (*-1 @+FAUXV); # 
##
LIST @+FMAINV = @+FMAINV ; #!! * @+FMAINV : finite main verbs
MAP (@+FMAINV) TARGET FNOTAUXVERBS ;# this is not working 2022-07-18; it is now including aux FIXME
LIST @-FMAINV = @-FMAINV ; #!! * @-FMAINV : non-finite main verb


MAP:afinPred (@SPRED) TARGET a-finpred ; # from @PRED 2023_02_23
#



#PronRelPlNomIndef 2022-02-15 perhaps too powerful, since it does not deal with subordinate clauses separately. It only disallows FAUXVERBS
#MAP (@+FMAINV) TARGET VFIN IF (0 FNOTAUXVERBS);
MAP (@+FMAINV) TARGET VFIN IF (NOT *0 AUXVERBS OR Clt/Cop);#Does this allow nonverbal


#LIST infinitive = vinf;
#LIST preposition = p;
#LIST particle = part;
#LIST adjective = a;
#LIST nmnoun = (n nm);
#LIST prequal = "ofnadwy" "andros";



SECTION

# !!!
# From Manual:
# Caveat: (NOT 0* V) will probably not work as you expect; it will be true if either direction doesn't find set V.
# What you want instead is (NEGATE 0* V) or split into (NOT -1* V) (NOT 1* V).
# !!!






###############################################################################
#
# MAPPING MORPHOLOGICAL TAGS TO ALL THEORETICALLY POSSIBLE SYNTACTIC TAGS
#
###############################################################################

# Numerals
LIST num:card:1 = num:card:1;
LIST num:card:2- = num:card:2-;
LIST num:ord = num:ord;
LIST num:coll = num:coll;
LIST num:indef = num:indef;
LIST num:fract = num:fract;
LIST num:foreign = num:foreign;
LIST num:unclear = num:unclear;

# Pronouns
LIST pron:pers = pron:pers;
LIST pron:refl = pron:refl;
LIST pron:dem = pron:dem;
LIST pron:inter = pron:inter;
LIST pron:subord = pron:subord;
LIST pron:indef = pron:indef;
LIST pron:VESEgroup = pron:VESEgroup;
LIST pron:LIJAgroup = pron:LIJAgroup;
LIST pron:indef:redupl = pron:indef:redupl;
LIST pron:indef:JAKgroup = pron:indef:JAKgroup;
LIST pron:indef:BUTIgroup = pron:indef:BUTIgroup;
LIST pron:indef:cpound = pron:indef:cpound;
LIST pron:indef:CELAgroup = pron:indef:CELAgroup;
LIST part:LI/ZHO = part:LI/ZHO;
SET QST-LI = ("ли" part:LI/ZHO) | ("ли" Pcle);
SET DISC-ZHO = ("жо" part:LI/ZHO) | ("жо" Pcle);
LIST glide-J = glide-J;

# Other nominals
LIST n/adj:pron-stem = n/adj:pron-stem;
LIST n/adj:num-stem = n/adj:num-stem;
LIST n:prop = n:prop;
LIST n/adj = n/adj;
LIST adj = adj;
LIST n = n;
LIST n/adj:postp-stem/adv-stem = n/adj:postp-stem/adv-stem;

# Adverbs
LIST adv:pron = adv:pron;
LIST adv:num = adv:num;
LIST adv:modal = adv:modal;
LIST Parenthetical = "келя" ("ваномс" Ind Prs ScSg2) ("ваномс" mod:ind temp:pres vsg2) ;
LIST PARJAK = "может быть" "паряк" ; # parenthetical adverbs, should these be separate? 2022-07-17

LIST adv:quantity = adv:quantity;
LIST adv:cmpar/super = adv:cmpar/super;
LIST adv:cpound-unclear-end = adv:cpound-unclear-end;
LIST adv:-DO = adv:-DO;
LIST adv:NEJgroup = adv:NEJgroup;

# Other particles
LIST cnj:coord = cnj:coord;
LIST cnj:subord = cnj:subord;
LIST postp:EZ = postp:EZ;
LIST postp/prep = postp/prep;
LIST imper-particle = imper-particle;
LIST interj = interj;
LIST cond-particle = cond-particle;
LIST prep:russ = prep:russ;

# Finite verb and negation
LIST neg:ASH = neg:ASH;
LIST neg:A = neg:A ("а" Pcle Neg) ("а" V Aux Neg);
# а V+Aux+Neg
LIST neg:Agroup = neg:Agroup ;
LIST neg:ARAS = neg:ARAS;
LIST neg:AVOL = neg:AVOL;
LIST neg:ES = neg:ES;
LIST neg:imper/optat = neg:imper/optat;
LIST neg:russ = neg:russ;
LIST ptcp1/pres-vsg3 = ptcp1/pres-vsg3;
LIST neg:cond = neg:cond;

LIST NEGAUX = neg:ES (Aux Neg Ind Prt1) neg:cond neg:imper/optat (neg:AVOL mod:conj) (Aux Neg Conj);#these are finite neg auxiliaries
# Non-finite verbs
LIST infMS/ME = infMS/ME;
LIST inf/verbnMO/ME/MU/M = inf/verbnMO/ME/MU/M;
LIST inf/verbn/agptcpMA = inf/verbn/agptcpMA;
LIST ptcp1 = ptcp1;
LIST ptcp2 = ptcp2;
LIST ptcp3 = ptcp3;
LIST ptcp4 = ptcp4;
LIST vunclear/russ = vunclear/russ;
LIST NONFINITES = inf/verbnMO/ME/MU/M inf/verbn/agptcpMA (Der/OmA NomAct N) ptcp1 (Der/Y NomAg) (Der/Yj NomAg) (Der/Ycja NomAg) ;#need to remove Pss
SET GerOzj = ptcp4 - Def - Indef - Pl - Sg - Ind | (Der/Ozj Ger) - Indef - Clt/Cop ;# this is plain
SET PrfPrcF = ptcp2 - Def - Indef - Pl - Sg - Ind | (Der/f PrfPrc) ;#Moksha-f
#Der/f+PrfPrc+Sg+Nom+Indef
SET VERBWITHMO_FIN = VERBWITHMO - NONFINITES ;#finite verbs that take MO/ME xcomp 
SET VERBWITHMS_FIN = VERBWITHMS + VFIN ;#finite verbs that take MS xcomp 


# Cases
LIST cx:nom = cx:nom;
LIST cx:gen = cx:gen;
LIST gen-derN = gen-derN;
LIST Der/Y = Der/Y ;#Der+Der/Y+NomAg
LIST Der/Yj = Der/Yj ;#Der+Der/Yj+NomAg
LIST Der/Ycja = Der/Ycja ;##Der+Der/Yj+NomAg

LIST AllNOMAG = ptcp1 (Der/Y NomAg) (Der/Yj NomAg) (Der/Ycja NomAg);#all NomAg

LIST cx:instruktN = cx:instruktN;
LIST cx:nom/gen = cx:nom/gen;
LIST cx:gen/instrukt = cx:gen/instrukt;
LIST cx:ine = cx:ine;
LIST cx:ela = cx:ela;
LIST cx:ill = cx:ill;
LIST cx:lat = cx:lat;
LIST cx:abl = cx:abl;
LIST cx:all = cx:all;
LIST cx:other-local = cx:other-local;
LIST cx:abl/ela = cx:abl/ela;
LIST cx:locative/separative = cx:locative/separative;
LIST cx:prol = cx:prol;
LIST cx:transl = cx:transl;
LIST transl-derKS = transl-derKS;
LIST PTCPVIKS = (ptcp1 indf nsg transl-derKS inflection+der);
LIST cx:tmporNEgroup = cx:tmporNEgroup;
LIST cx:tmpor-T = cx:tmpor-T;
LIST cx:tmporNAgroup = cx:tmporNAgroup;
LIST cx:compar = cx:compar;
LIST cx:abe = cx:abe;
LIST abe-derVTOMO = abe-derVTOMO;
LIST cx:comit = cx:comit;
LIST cx:exes = cx:exes;
LIST cx:voc = cx:voc ;
LIST Voc = Voc ;
LIST VOCATIVE = cx:voc Voc ;
LIST cx:caus = cx:caus;
LIST cx:double-separative = cx:double-separative;
LIST cx:gen/gen-derN = cx:gen/gen-derN;
LIST cx:gen+def = cx:gen+def;
LIST cx:gen+ine = cx:gen+ine;
LIST cx:gen+ill = cx:gen+ill;
LIST cx:ine+gen/gen-derN = cx:ine+gen/gen-derN;
LIST cx:ine+def = cx:ine+def;
LIST cx:abl+gen/gen-derN = cx:abl+gen/gen-derN;
LIST cx:compar+ill = cx:compar+ill;
LIST cx:compar+abl/prol/N = cx:compar+abl/prol/N;
LIST cx:tmpor+ill = cx:tmpor+ill;
LIST cx:transl-derKS+all = cx:transl-derKS+all;
LIST cx:double-voc = cx:double-voc;
LIST cx:inf+S = cx:inf+S;
LIST infMOK = infMOK;
LIST cx:latcase+element = cx:latcase+element;
LIST cx:separative+element = cx:separative+element;
LIST cx:prol+element = cx:prol+element;
LIST cx:locative+element = cx:locative+element;
LIST cx:ine+all = cx:ine+all;
LIST cx:russ = cx:russ;

########################################

## Numerals
#ADD (@>N__ @SUBJ__ @OBJ__ @ADVL__) TARGET num:card:1;
#ADD (@>N__ @SUBJ__ @OBJ__ @ADVL__) TARGET num:card:2-;
#ADD (@>N__ @SUBJ__ @OBJ__ @ADVL__) TARGET num:ord;
#ADD (@>N__ @SUBJ__ @OBJ__ @ADVL__) TARGET num:coll;
#ADD (@>N__ @SUBJ__ @OBJ__ @ADVL__) TARGET num:indef;
#ADD (@>N__ @SUBJ__ @OBJ__ @ADVL__) TARGET num:fract;
#ADD (@>N__ @SUBJ__ @OBJ__) TARGET num:foreign;
#ADD (@>N__ @SUBJ__ @OBJ__) TARGET num:unclear;
#
## Pronouns
#ADD (@SUBJ__ @OBJ__) TARGET pron:pers;
#ADD (@SUBJ__ @OBJ__ @>P__ @APP__ @ADVL__ @>N__) TARGET pron:refl;
#ADD (@SUBJ__ @OBJ__ @>N__ @ADVL__) TARGET pron:dem;
#ADD (@SUBJ__ @OBJ__ @>N__ @ADVL__) TARGET pron:inter;
#ADD (@CONJ-sub__) TARGET pron:subord;
#ADD (@SUBJ__ @OBJ__ @>N__ @ADVL__) TARGET pron:indef;
#ADD (@SUBJ__ @OBJ__ @>N__ @ADVL__) TARGET pron:VESEgroup;
#ADD (@SUBJ__ @OBJ__ @>N__ @ADVL__) TARGET pron:LIJAgroup;
#ADD (@SUBJ__ @OBJ__ @>N__ @ADVL__) TARGET pron:indef:redupl;
#ADD (@SUBJ__ @OBJ__ @>N__ @ADVL__) TARGET pron:indef:JAKgroup;
#ADD (@SUBJ__ @OBJ__ @>N__ @ADVL__) TARGET pron:indef:BUTIgroup;
#ADD (@SUBJ__ @OBJ__ @>N__ @ADVL__) TARGET pron:indef:cpound;
#ADD (@SUBJ__ @OBJ__ @>N__ @ADVL__) TARGET pron:indef:CELAgroup;
#ADD (@QUESTIONorEMPHASIS__) TARGET part:LI/ZHO;
#ADD (@X__) TARGET glide-J;
#
## Other nominals
#ADD (@SUBJ__ @OBJ__ @>N__ @ADVL__) TARGET n/adj:pron-stem;
#ADD (@SUBJ__ @OBJ__ @>N__ @ADVL__) TARGET n/adj:num-stem;
#ADD (@SUBJ__ @OBJ__ @>N__) TARGET n:prop;
#ADD (@SUBJ__ @OBJ__ @>N__ @ADVL__ @APP__ @SPRED__) TARGET n/adj;
#ADD (@SUBJ__ @OBJ__ @>N__ @ADVL__) TARGET n/adj:postp-stem/adv-stem;
#
## Adverbs
#ADD (@ADVL__) TARGET adv:pron;
#ADD (@ADVL__) TARGET adv:num;
#ADD (@ADVL__) TARGET adv:modal;
#ADD (@ADVL-quantity__ @>N__) TARGET adv:quantity;
#ADD (@COMPARATIVE__) TARGET adv:cmpar/super;
#ADD (@ADVL__) TARGET adv:cpound-unclear-end;
#ADD (@-FAUXV-do__) TARGET adv:-DO;
#ADD (@ADVL__) TARGET adv:NEJgroup;
#
## Other particles
#ADD (@CNP__ @CVP__) TARGET cnj:coord;
#ADD (@CONJ-sub__) TARGET cnj:subord;
#ADD (@OBJ__ @ADVL__) TARGET postp:EZ;
#ADD (@OBJ__ @ADVL__) TARGET postp/prep;
#ADD (@IMPERATIVE__) TARGET imper-particle;
#ADD (@INTERJ__) TARGET interj;
#ADD (@CONDITIONAL__) TARGET cond-particle;
#ADD (@ADVL__) TARGET prep:russ;
#
## Finite verb and negation
#ADD (@NEG__) TARGET neg:ASH;
#ADD (@+FMAINV__) TARGET vfin;
#ADD (@+FMAINV__) TARGET ConNeg;
#ADD (@NEG__) TARGET neg:Agroup;
#ADD (@NEG__) TARGET neg:ARAS;
#ADD (@NEG__) TARGET neg:AVOL;
#ADD (@NEG__) TARGET neg:ES;
#ADD (@IMPERATIVE-NEG__) TARGET neg:imper/optat;
#ADD (@NEG__) TARGET neg:russ;
#ADD (@+FMAINV__ @-FMAINV__ @SUBJ__ @OBJ__ @SPRED__) TARGET ptcp1/pres-vsg3;
#ADD (@+FMAINV__) TARGET neg:cond;
#
## Non-finite verbs
#MAP (@-FMAINV) TARGET NONFMAINVERBS;
MAP (@FS-<FMAINV) TARGET SupLoc IF (*-1 VERBWITHMO_FIN BARRIER CLB OR BOS) ;# point left to finite when self non-finite main verb. MO/ME
MAP (@FS-FMAINV>) TARGET SupLoc IF (*1 VERBWITHMO_FIN BARRIER CLB OR EOS) ; # point left to finite when self non-finite main verb. MO/ME
MAP (@FS-<FMAINV) TARGET VINF1 IF (*-1 VERBWITHMS_FIN BARRIER CLB OR BOS) ;# point left to finite when self non-finite main verb. MS
MAP (@FS-FMAINV>) TARGET VINF1 IF (*1 VERBWITHMS_FIN BARRIER CLB OR EOS) ; # point left to finite when self non-finite main verb. MS



#ADD (@-FMAINV__ @SUBJ__ @OBJ__ @ADVL__) TARGET infMS/ME;
#ADD (@-FMAINV__ @SUBJ__) TARGET inf/verbnMO/ME/MU/M;
#ADD (@-FMAINV__ @SUBJ__ @SPRED__) TARGET VOblig;
#ADD (@-FMAINV__ @SUBJ__ @SPRED__) TARGET inf/verbn/agptcpMA;
#ADD (@-FMAINV__ @SUBJ__ @SPRED__ @>N__) TARGET ptcp1;
#ADD (@-FMAINV__ @>N__ @SUBJ__ @SPRED__ @>N__) TARGET ptcp2;
#ADD (@-FMAINV__ @>N__ @SUBJ__ @SPRED__ @>N__) TARGET ptcp3;
#ADD (@-FMAINV__ @>N__ @SUBJ__ @SPRED__ @>N__) TARGET ptcp4;
#ADD (@-FMAINV__) TARGET vunclear/russ;
#
## Cases
#ADD (@SUBJ__ @OBJ__ @>N__ @ADVL-quantity__ @SPRED__ @>N__ @>P__ @APP__) TARGET cx:nom;
#ADD (@>N__ @>P__ @<POSSESSOR__ @SPRED__ @OBJ__) TARGET cx:gen;
#ADD (@>N__) TARGET gen-derN;
#ADD (@ADVL__) TARGET cx:instruktN;
#ADD (@OBJ__) TARGET cx:nom/gen;
#ADD (@ADVL__) TARGET cx:gen/instrukt;
#ADD (@ADVL__ @SPRED__ @OBJ__ @>N__) TARGET cx:ine;
#ADD (@ADVL__ @SPRED__) TARGET cx:ela;
#ADD (@ADVL__) TARGET cx:ill;
#ADD (@ADVL__) TARGET cx:lat;
#ADD (@OBJ__ @ADVL__ @SPRED__ @SUBJ__ @COMP-standard__ @>P__) TARGET cx:abl;
#ADD (@ADVL__ @AGENT__) TARGET cx:all;
#ADD (@ADVL__) TARGET cx:other-local;
#ADD (@ADVL__) TARGET cx:abl/ela;
#ADD (@ADVL__) TARGET cx:locative/separative;
#ADD (@ADVL__ @SPRED__) TARGET cx:prol;
#ADD (@SPRED-ADVL__ @ADVL__) TARGET cx:transl;
#ADD (@X__) TARGET transl-derKS;
#ADD (@ADVL__) TARGET cx:tmporNEgroup;
#ADD (@ADVL__) TARGET cx:tmpor-T;
#ADD (@ADVL__) TARGET cx:tmporNAgroup;
#ADD (@ADVL__) TARGET cx:compar;
#ADD (@ADVL__) TARGET cx:abe;
#ADD (@X__) TARGET abe-derVTOMO;
#ADD (@ADVL__ @COMPANION__) TARGET cx:comit;
#ADD (@ADVL__) TARGET cx:exes;
#ADD (@VOC__) TARGET cx:voc;
MAP (@<DISC) TARGET DISC-ZHO;
MAP (@<QST) TARGET QST-LI;
MAP (@ADDR) TARGET VOCATIVE; #2022-02-03
#ADD (@PURPOSE__) TARGET cx:caus;
#ADD (@ADVL__) TARGET cx:double-separative;
#ADD (@>N__ @>P__ @<POSSESSOR__ @SPRED__ @OBJ__) TARGET cx:gen/gen-derN;
#ADD (@SUBJ__ @OBJ__ @>N__ @SPRED__ @APP__) TARGET cx:gen+def;
#ADD (@ADVL__ @SPRED__ @OBJ__ @>N__) TARGET cx:gen+ine;
#ADD (@ADVL__) TARGET cx:gen+ill;
#ADD (@>N__ @>P__ @<POSSESSOR__ @SPRED__ @OBJ__) TARGET cx:ine+gen/gen-derN;
#ADD (@SUBJ__ @OBJ__ @>N__ @SPRED__ @APP__) TARGET cx:ine+def;
#ADD (@>N__ @SPRED__ @OBJ__) TARGET cx:abl+gen/gen-derN;
#ADD (@ADVL__) TARGET cx:compar+ill;
#ADD (@ADVL__ @SPRED__) TARGET cx:compar+abl/prol/N;
#ADD (@ADVL__) TARGET cx:tmpor+ill;
#ADD (@ADVL__ @AGENT__) TARGET cx:transl-derKS+all;
#ADD (@VOC__) TARGET cx:double-voc;
#ADD (@ADVL__) TARGET cx:inf+S;
#ADD (@-FMAINV__) TARGET infMOK;
#ADD (@ADVL__) TARGET cx:latcase+element;
#ADD (@ADVL__) TARGET cx:separative+element;
#ADD (@ADVL__ @SPRED__) TARGET cx:prol+element;
#ADD (@ADVL__) TARGET cx:locative+element;
#ADD (@ADVL__) TARGET cx:ine+all;
#ADD (@ADV__) TARGET cx:russ;






###############################################################################
#
# Conjuctions, Compounds, Postpositions...
#
###############################################################################

# 11->44384
# CLB
# this should be removed, since CLB is always a dependent MAP (@CLB) TARGET CLB OR DASH OR PUNCT;

#not a conjunction
#[[катка марто] бараннэнь]: молян горявамо хоть катка марто бараннэнь
# between copula phrases CCP
#пастухось ашти вакссонзо -- одежанзо лыткат ды судозо рудазов.
# between verbal phrases CVP
#и :тейсь прязонзо пизэ и ливтсь левкст.
# between NPs CNP
# эзть юта ли вакскаст од цёра ды од тейтерь?

# 11->39647
# Conjunctions

MAP (@CVP) TARGET CConj IF (*-1 VFIN BARRIER CLB OR BOS LINK *1 VFIN BARRIER CLB OR EOS);
MAP (@CVP) TARGET CConj IF (*1 VFIN BARRIER CLB OR EOS LINK *-1 VFIN BARRIER CLB OR BOS);
    #и :тейсь прязонзо пизэ и ливтсь левкст.

#MAP (@+FAUXV>) TARGET SUPAUX OR DATAUX IF (*1 VINF BARRIER CLB OR EOS);
MAP (@C-FVP) TARGET CConj IF (*0 SUPAUX OR DATAUX BARRIER CLB OR EOS OR BOS) (*-1 VINF BARRIER CLB OR BOS) (*1 VINF BARRIER CLB OR EOS);# actually this could be inf split
#и: Эряви саламс сёрось и явомс сембе вачедотненди.
MAP (@CVP) TARGET CConj IF (*-2 VFIN BARRIER CLB OR BOS) (-1 (",")) (*1 VFIN BARRIER CLB OR BOS);
#а: , голой сови, а раужо сёлги.

MAP (@CNP) TARGET CConj IF (-1 N) (1 N);#verbs and predicates come before nouns

MAP (@CADJP) TARGET CConj IF (-1 A) (1 A OR (n/adj));#
    #минек пек виев ды превей, сон киненьгак прянзо нарьгамс а макссы.

MAP (@CC) TARGET CConj;
MAP (@SC) TARGET SConj;

## predications with ideophones as predicates
MAP (@SPRED) TARGET IDEOPHONES IF (-1 SUBJECTCANDIDATESG3 OR NOUNSgNomIndef OR AJJSgNomIndef OR NAdjSgNomIndef);# from @PRED 2023_02_23
    #голой ёлчк, понав лавцк.

MAP (@SUBJ>) TARGET SUBJECTCANDIDATESG3 OR NOUNSgNomIndef OR AJJSgNomIndef OR NAdjSgNomIndef IF (1 IDEOPHONES);
    #голой ёлчк, понав лавцк.

# 11->44301
# sehe, (vaga)
MAP (@IMP-PTCLE) TARGET ImperParticle;
#MAP (@DISC) TARGET Interj;
MAP (@INTERJ) TARGET Interj;

# седе
MAP (@CMP-STD) TARGET (Pron Dem Sg Abl Indef) OR (adj indf nsg cx:abl encl:AKgroup) OR (pron:dem indf nsg cx:abl) OR NAdjSPAbl IF (1 (A) OR (n/adj) OR (AJJ) OR AdvNEJgroup OR POSTPTAKESABL);# седе покш
    #весемеде вадрятнень

# MOVE IT SOMEWHERE ELSE
# COMPARATIVE
MAP (@CMP-STD) TARGET PronDemSgAblIndf IF (1 A OR (n/adj));
MAP (@CMP-STD) TARGET EJSTENoPX IF (1 A OR (n/adj));
MAP (@CMP-STD) TARGET PronDemPlAblIndf;

#
MAP (@CMP-STD) TARGET NumOrdSgAbl;
MAP (@CMP-STD) TARGET NumOrdPlAbl;

## Bring postpostions here after standard of comparison

MAP (@>A) TARGET ("пек") IF (1 A OR (n/adj) OR (AJJ));# пек покш

MAP (@>A) TARGET ("эрьва" Det Sg Nom Indef) IF (1 ("кодамо"));# эрьва кодамо

MAP (@>ADVL) TARGET ("пек") IF (1 Adv OR (n/adj indf nsg cx:ela));# пек бойкасто
# auxiliaries and main verbs


#MAP (@+F<AUXV) TARGET SUPAUX OR DATAUX IF (*-1 VINF BARRIER CLB OR BOS);
#MAP (@-F<AUXV) TARGET FAUXVERBS IF (*-1 VINF BARRIER CLB OR BOS);
    	       # вешнемс эряви 2022-02-07
	       
#MAP (@+FAUXV>) TARGET SUPAUX OR DATAUX IF (*1 VINF BARRIER CLB OR EOS);
#MAP (@-FAUXV>) TARGET FAUXVERBS IF (*1 VINF BARRIER CLB OR EOS);
    	       	      # сави вешнемс


# 11->41699
# _Pirgime_ ... makaza
MAP (@+FMAINV) TARGET VfinIndScSg3OcSP IF (*0 PNOUNSgNom BARRIER CLB);
MAP (@<SUBJ) TARGET PNOUNSgNom IF (*-1 VfinIndScSg3OcSP BARRIER CLB)
                               (NOT 1 Infinitives)
                               (NOT 1 PostpNoPX);

MAP (@SUBJ>) TARGET PNOUNSgNom IF (*1 VfinIndScSg3OcSP BARRIER CLB)
                               (NOT 1 Infinitives)
                               (NOT 1 PostpNoPX);


MAP (@+FMAINV) TARGET VfinVsg3 IF (*0 PNOUNSgNom BARRIER CLB);
MAP (@SUBJ>) TARGET PNOUNSgNom OR PronLIJASgNom IF (*1 VFINSG3SUBJ BARRIER CLB)
                               (NOT 1 Infinitives)
                               (NOT 1 PostpNoPX);
MAP (@<SUBJ) TARGET PNOUNSgNom OR PronLIJASgNom IF (*-1 VFINSG3SUBJ BARRIER CLB);




#personal pronouns as predicates
#cx:nom mod:ind temp:pres vsg2
MAP (@SUBJ>) TARGET SUBJECTCANDIDATESG3 IF (*1 PronPersSg1Nom BARRIER CLB OR EOS);
MAP (@SUBJ>) TARGET SUBJECTCANDIDATESG3 IF (*1 PronPersSg2Nom BARRIER CLB OR EOS);
MAP (@SUBJ>) TARGET SUBJECTCANDIDATEPL3 IF (*1 PronPersPl1Nom BARRIER CLB OR EOS);
MAP (@SUBJ>) TARGET SUBJECTCANDIDATEPL3 IF (*1 PronPersPl2Nom BARRIER CLB OR EOS);

MAP (@<SUBJ) TARGET SUBJECTCANDIDATESG3 IF (*-1 PronPersSg1Nom BARRIER CLB OR EOS);
MAP (@<SUBJ) TARGET SUBJECTCANDIDATESG3 IF (*-1 PronPersSg2Nom BARRIER CLB OR EOS);
MAP (@<SUBJ) TARGET SUBJECTCANDIDATEPL3 IF (*-1 PronPersPl1Nom BARRIER CLB OR EOS);
MAP (@<SUBJ) TARGET SUBJECTCANDIDATEPL3 IF (*-1 PronPersPl2Nom BARRIER CLB OR EOS);

MAP (@<SUBJ) TARGET NOUNSgNomIndef IF (*-1 VFINPL3SUBJWITHOBJ BARRIER CLB OR BOS OR @CVP) (1 @CNP LINK (1 NOUNSgNomIndef) OR (2 NOUNSgNomIndef));
MAP (@<SUBJ) TARGET NOUNSgNomIndef IF (*-4 VFINPL3SUBJWITHOBJ BARRIER CLB OR BOS OR @CVP) (-3 NOUNSgNomIndef) (-2 @CNP) ;
MAP (@<SUBJ) TARGET NOUNSgNomIndef IF (*-4 VFINPL3SUBJWITHOBJ BARRIER CLB OR BOS OR @CVP) (-2 NOUNSgNomIndef) (-1 @CNP) ;
    #Сонзэ вастызь генерально штабонь генерал ды госбезопасностень роботник.

### for a subject to be assigned, there has to be agreement in the predicate in most cases
# 1Sg
MAP (@<SUBJ) TARGET PronReflSg1NomNoCop IF (-1* VFINSG1SUBJ BARRIER CLB OR BOS) (NOT -1 CLB OR BOS) (1 CLB OR EOS);
MAP (@<SUBJ) TARGET PronReflSg1NomNoCop IF (-1* VFINSG1SUBJ BARRIER CLB OR BOS) (NOT -1 CLB OR BOS) (NOT 1 CLB OR EOS) (NOT 1* VFINSG1SUBJ BARRIER CLB OR EOS);
MAP (@SUBJ>) TARGET PronReflSg1NomNoCop IF (1* VFINSG1SUBJ BARRIER CLB OR EOS) (NOT 1 CLB OR EOS) (-1 CLB OR EOS);
MAP (@SUBJ>) TARGET PronReflSg1NomNoCop IF (1* VFINSG1SUBJ BARRIER CLB OR EOS) (NOT 1 CLB OR EOS) (NOT -1 CLB OR EOS) (NOT -1* VFINSG1SUBJ BARRIER CLB OR EOS);
# 2Sg
MAP (@<SUBJ) TARGET PronReflSg2NomNoCop IF (-1* VFINSG2SUBJ BARRIER CLB OR BOS) (NOT -1 CLB OR BOS) (1 CLB OR EOS);
MAP (@<SUBJ) TARGET PronReflSg2NomNoCop IF (-1* VFINSG2SUBJ BARRIER CLB OR BOS) (NOT -1 CLB OR BOS) (NOT 1 CLB OR EOS) (NOT 1* VFINSG2SUBJ BARRIER CLB OR EOS);
MAP (@SUBJ>) TARGET PronReflSg2NomNoCop IF (1* VFINSG2SUBJ BARRIER CLB OR EOS) (NOT 1 CLB OR EOS) (-1 CLB OR EOS);
MAP (@SUBJ>) TARGET PronReflSg2NomNoCop IF (1* VFINSG2SUBJ BARRIER CLB OR EOS) (NOT 1 CLB OR EOS) (NOT -1 CLB OR EOS) (NOT -1* VFINSG2SUBJ BARRIER CLB OR EOS);
# 3Sg
MAP (@<SUBJ) TARGET PronReflSg3NomNoCop IF (-1* VFINSG3SUBJ BARRIER CLB OR BOS) (NOT -1 CLB OR BOS) (1 CLB OR EOS);
MAP (@<SUBJ) TARGET PronReflSg3NomNoCop IF (-1* VFINSG3SUBJ BARRIER CLB OR BOS) (NOT -1 CLB OR BOS) (NOT 1 CLB OR EOS) (NOT 1* VFINSG3SUBJ BARRIER CLB OR EOS);
MAP (@SUBJ>) TARGET PronReflSg3NomNoCop IF (1* VFINSG3SUBJ BARRIER CLB OR EOS) (NOT 1 CLB OR EOS) (-1 CLB OR EOS);
MAP (@SUBJ>) TARGET PronReflSg3NomNoCop IF (1* VFINSG3SUBJ BARRIER CLB OR EOS) (NOT 1 CLB OR EOS) (NOT -1 CLB OR EOS) (NOT -1* VFINSG3SUBJ BARRIER CLB OR EOS);

# 1Pl
MAP (@<SUBJ) TARGET PronReflPl1NomNoCop IF (-1* VFINPL1SUBJ BARRIER CLB OR BOS) (NOT -1 CLB OR BOS) (1 CLB OR EOS);
MAP (@<SUBJ) TARGET PronReflPl1NomNoCop IF (-1* VFINPL1SUBJ BARRIER CLB OR BOS) (NOT -1 CLB OR BOS) (NOT 1 CLB OR EOS) (NOT 1* VFINPL1SUBJ BARRIER CLB OR EOS);
MAP (@SUBJ>) TARGET PronReflPl1NomNoCop IF (1* VFINPL1SUBJ BARRIER CLB OR EOS) (NOT 1 CLB OR EOS) (-1 CLB OR EOS);
MAP (@SUBJ>) TARGET PronReflPl1NomNoCop IF (1* VFINPL1SUBJ BARRIER CLB OR EOS) (NOT 1 CLB OR EOS) (NOT -1 CLB OR EOS) (NOT -1* VFINPL1SUBJ BARRIER CLB OR EOS);
# 2Pl
MAP (@<SUBJ) TARGET PronReflPl2NomNoCop IF (-1* VFINPL2SUBJ BARRIER CLB OR BOS) (NOT -1 CLB OR BOS) (1 CLB OR EOS);
MAP (@<SUBJ) TARGET PronReflPl2NomNoCop IF (-1* VFINPL2SUBJ BARRIER CLB OR BOS) (NOT -1 CLB OR BOS) (NOT 1 CLB OR EOS) (NOT 1* VFINPL2SUBJ BARRIER CLB OR EOS);
MAP (@SUBJ>) TARGET PronReflPl2NomNoCop IF (1* VFINPL2SUBJ BARRIER CLB OR EOS) (NOT 1 CLB OR EOS) (-1 CLB OR EOS);
MAP (@SUBJ>) TARGET PronReflPl2NomNoCop IF (1* VFINPL2SUBJ BARRIER CLB OR EOS) (NOT 1 CLB OR EOS) (NOT -1 CLB OR EOS) (NOT -1* VFINPL2SUBJ BARRIER CLB OR EOS);
# 3Pl
MAP (@<SUBJ) TARGET PronReflPl3NomNoCop IF (-1* VFINPL3SUBJ BARRIER CLB OR BOS) (NOT -1 CLB OR BOS) (1 CLB OR EOS);
MAP (@<SUBJ) TARGET PronReflPl3NomNoCop IF (-1* VFINPL3SUBJ BARRIER CLB OR BOS) (NOT -1 CLB OR BOS) (NOT 1 CLB OR EOS) (NOT 1* VFINPL3SUBJ BARRIER CLB OR EOS);
MAP (@SUBJ>) TARGET PronReflPl3NomNoCop IF (1* VFINPL3SUBJ BARRIER CLB OR EOS) (NOT 1 CLB OR EOS) (-1 CLB OR EOS);
MAP (@SUBJ>) TARGET PronReflPl3NomNoCop IF (1* VFINPL3SUBJ BARRIER CLB OR EOS) (NOT 1 CLB OR EOS) (NOT -1 CLB OR EOS) (NOT -1* VFINPL3SUBJ BARRIER CLB OR EOS);
 # Subsequently there will have to be work with interceding parentheticals 2022-07-18

# check above! are these needed 2022-07-18, as they are not accurate.
MAP (@SUBJ>) TARGET PronPersPl1Nom IF (*1 VFINPL1SUBJ BARRIER CLB OR EOS);
MAP (@SUBJ>) TARGET PronPersPl2Nom IF (*1 VFINPL2SUBJ BARRIER CLB OR EOS);
MAP (@SUBJ>) TARGET PronPersPl3Nom IF (*1 VFINPL3SUBJ BARRIER CLB OR EOS);
MAP (@SUBJ>) TARGET PronPersSg1Nom IF (*1 VFINSG1SUBJ BARRIER CLB OR EOS);
MAP (@SUBJ>) TARGET PronPersSg2Nom IF (*1 VFINSG2SUBJ BARRIER CLB OR EOS);
MAP (@SUBJ>) TARGET PronPersSg3Nom IF (*1 VFINSG3SUBJ BARRIER CLB OR EOS);

MAP (@<SUBJ) TARGET PronPersPl1Nom IF (*-1 VFINPL1SUBJ BARRIER CLB OR BOS);
MAP (@<SUBJ) TARGET PronPersPl2Nom IF (*-1 VFINPL2SUBJ BARRIER CLB OR BOS);
MAP (@<SUBJ) TARGET PronPersPl3Nom IF (*-1 VFINPL3SUBJ BARRIER CLB OR BOS);
MAP (@<SUBJ) TARGET PronPersSg1Nom IF (*-1 VFINSG1SUBJ BARRIER CLB OR BOS);
MAP (@<SUBJ) TARGET PronPersSg2Nom IF (*-1 VFINSG2SUBJ BARRIER CLB OR BOS);
MAP (@<SUBJ) TARGET PronPersSg3Nom IF (*-1 VFINSG3SUBJ BARRIER CLB OR BOS);
#These are nominative-case personal pronouns acting as subjects, BUT
# we must deal with presentationals where the adjacent nominative-case argument without copula marking may be the subject.

#non-finites for aux
#MAP (@<INF) TARGET VINF IF (*-1 VFIN BARRIER CLB);
#MAP (@INF>) TARGET VINF IF (*1 VFIN BARRIER CLB);
MAP (@-FMAINV) TARGET VINF IF (*-1 VFIN BARRIER CLB); # ???2022-07-31
MAP (@-FMAINV) TARGET VINF IF (*1 VFIN BARRIER CLB); # ???






MAP (@>ADVL) TARGET ("эрьва" Det Sg Nom Indef) IF (1 ("косо") OR ("косто") OR ("ков") OR ("козонь") OR ("кува"));# эрьва косо

#personal pronouns as predicates
MAP (@SPRED) TARGET PronPersSg1NomNoCop IF (*0 SUBJECTCANDIDATESG3 BARRIER CLB OR EOS OR BOS); # from @PRED 2023_02_23
MAP (@SPRED) TARGET PronPersSg2NomNoCop IF (*0 SUBJECTCANDIDATESG3 BARRIER CLB OR EOS OR BOS); # from @PRED 2023_02_23

MAP (@SPRED) TARGET PronPersPl1NomNoCop IF (*0 SUBJECTCANDIDATEPL3 BARRIER CLB OR EOS OR BOS); # from @PRED 2023_02_23
MAP (@SPRED) TARGET PronPersPl2NomNoCop IF (*0 SUBJECTCANDIDATEPL3 BARRIER CLB OR EOS OR BOS); # from @PRED 2023_02_23

MAP (@SPRED) TARGET (neg:ARAS);#hmm, where is this not a predicate?
# from @PRED 2023_02_23
    #арась: , пекезэ арась, пулозо ули, ...

# was @ADVLPRED
MAP (@SPRED) TARGET ADVLPREDCASES OR NONVPERSON; # from @PRED 2023_02_23
MAP (@<SPRED) TARGET NAdjSgNomIndef OR AJJSgNomIndef IF (-2 CLB OR BOS) (-1 SUBJECTCANDIDATESG3) (1 CLB OR EOS) (NOT *0 VFIN BARRIER CLB OR BOS OR EOS);

MAP (@SPRED) TARGET NAdjSgNomIndef OR AJJSgNomIndef IF (-1 EJSTENoPX) (1 CLB OR EOS) (NOT *0 VFIN BARRIER CLB OR BOS OR EOS); # from @PRED 2023_02_23
#вишине:OBLPRED пазонть эйстэ вишине, инязоронть эйстэ покш.
#Zero subj

MAP (@SPRED) TARGET GerOzj (-1 ("мезе" Sg Nom Def));#Der/Ozj
# from @PRED 2023_02_23



#MAP (@ADVL-habitive>) TARGET NPropGen IF (1 FINCOPULA);
MAP (@ADVL-habitive>) TARGET NPropGen IF (1 ULEMS);
MAP (@ADVL-habitive>) TARGET Gen IF (1 ULEMS) (NOT *0 VFIN BARRIER CLB);
    #ве авань каштомсо каша чакшозо.
MAP (@ADVL-habitive>) TARGET SGGENDEF IF (NEGATE 0* ULEMS OR VFIN BARRIER CLB) (1* SPNomPxSg3 BARRIER CLB);
    #Пингенть: — Пингенть ламо пинксэнзэ, — мерсь ревизорось ды тусь.
MAP (@<SUBJ) TARGET SPNomPxSg3 IF (NEGATE 0* ULEMS OR VFIN BARRIER CLB) (-1* SGGENDEF BARRIER CLB);
    #пинксэнзэ: — Пингенть ламо пинксэнзэ, — мерсь ревизорось ды тусь.

MAP:IntercedingMeriat (@<ADVL-locative) TARGET LOCATIVE-NOCLT IF (NEGATE *0 ULEMS BARRIER CLB OR EOS OR BOS) (-1* Comma LINK -1 ("меремс" ScPl2) LINK -1 Comma LINK -1* SUBJECTCANDIDATESG3 BARRIER CLB OR BOS);
    #— Кенкшесь, мертядо, тона ёно.

MAP:Where (@ADVL-locative>) TARGET LOCATIVE-NOCLT IF (NEGATE 0* ULEMS OR VFIN BARRIER CLB OR EOS OR BOS) (1* SUBJECTCANDIDATESG3 BARRIER CLB OR BOS);
    #косо: Саша кевкстизе, косо цехень начальникесь, ды капшазевсь.
MAP:WhoIsWhere (@<SUBJ) TARGET SUBJECTCANDIDATESG3 IF (NEGATE 0* ULEMS OR VFIN BARRIER CLB OR EOS OR BOS) (-1* LOCATIVE-NOCLT);
    #начальникесь: Саша кевкстизе, косо цехень начальникесь, ды капшазевсь.
    
MAP (@<ADVL) TARGET Po OR (Adv Lat) OR SPELA OR SPINE IF (*-1 VFINPERSONSUBJ BARRIER CLB OR BOS OR ("ды"));
    #чийсть тов
    #оенть марто: карман оенть марто кашадонть ярсамо @>N
    #принценть марто: карман принценть марто кашадонть ярсамо 
    #тейтеренть	марто: тейтеренть марто Пандайть чийсть @>N
    #баяга марто: cасть баяга марто бабинентень.
    #принценть марто: кармась лакеесь совавтомо принценть марто тейтерентень самовар, @>N
    
MAP (@ADVL>) TARGET PostpLat OR (Adv Lat) OR SPILL OR SPELA OR SPINE IF (*1 VFINPERSONSUBJ BARRIER CLB OR EOS OR ("ды"));
#
MAP:existentialIne (@ADVL-locative>) TARGET EXISTENTINEBASE IF (1* NOUNSgNomIndef BARRIER CLB OR EOS OR VINF OR VFIN) (NEGATE 0* VFIN BARRIER CLB OR EOS OR BOS);
    #Прясонзо берякшке картуз, кедьпесэнзэ кандстке.

MAP:existentialSubj (@<SUBJ-ext) TARGET NOUNSgNomIndef IF (-1* EXISTENTINEBASE) (NEGATE 0* FNOTAUXVERBS OR FAUXVERBS BARRIER CLB OR EOS OR BOS);
    #Прясонзо берякшке картуз, кедьпесэнзэ кандстке.

MAP (@SUBJ>) TARGET VESENOMSG IF (1* VFINPL3SUBJ BARRIER CLB OR EOS OR N);
    # весе удыльть

MAP:IntercedingMeriat  (@SUBJ>) TARGET (Sg Nom Def) IF (1 Comma) (2 ("меремс" ScPl2) OR ("меремс" ScSg2)) (3 Comma) (4* VFINSG3SUBJ BARRIER CLB OR EOS LINK NEGATE 0* SUBJECTCANDIDATESG3 BARRIER CLB OR EOS);

MAP:TalkAboutABL (@ADVL>) TARGET (Pron Indef SP Abl) IF (NEGATE 1 POSTPTAKESABL OR NOUNTAKESABL) (1* VERBTAKESABL);
   #мезде-бути: Ансяк кенкшенть эйстэ а васоло кавто аштиця бабинетне мезде-бути кортнесть.

MAP:IngestionABL (@ADVL-partitive>) TARGET NOUNSPAbl IF (*1 INGESTIONVABLARGFIN BARRIER CLB OR EOS); 
MAP:IngestionABL (@<ADVL-partitive) TARGET NOUNSPAbl IF (*-1 INGESTIONVABLARGFIN BARRIER CLB OR BOS); 
	#This may still need a noun list for conceivable partitives
MAP:IngestionABL (@-FADVL-partitive>) TARGET NOUNSPAbl IF (*1 INGESTIONVABLARGINF BARRIER CLB OR EOS); 
MAP:IngestionABL (@-F<ADVL-partitive) TARGET NOUNSPAbl IF (*-1 INGESTIONVABLARGINF BARRIER CLB OR BOS); 
	
MAP (@<ADVL) TARGET NONCORECASES OR (Adv) IF (*-1 VFIN OR ConNeg BARRIER CLB OR BOS);#эзть мере варштамодо
MAP (@ADVL>) TARGET NONCORECASES OR (Adv) IF (*1 VFIN BARRIER CLB OR EOS);
    #трудсонзо: трудсонзо изни
    #шождынестэ: штобу пятакось шождынестэ ютаволь
    # problems: озадо чайде симеме
#
MAP (@ADVL>) TARGET Dat IF (1 MEREMSDATWITHNOM) (2 (Nom Indef));#наукантень мерить естествознания


MAP (@-FADVL>) TARGET Ine IF (1 GerOzj) (NOT *0 VFIN BARRIER CLB);
    #кодгемень иетнесэ валдомтозь кинть лангсо: @-FADVL>(валдомтозь, иетнесэ)

MAP (@-FSUBJ>) TARGET GENDEF OR GENINDEF IF (1 IVSupEla) (*0 VFIN BARRIER CLB);
MAP (@-FOBJ>) TARGET GENDEF OR GENINDEF IF (1 GerOzj OR SupEla) (*0 VFIN BARRIER CLB);
MAP (@>N) TARGET GerOzj IF (1 N) (*0 VFIN BARRIER CLB);
MAP:>n (@>N) TARGET ("кодамо" indf nsg cx:nom) OR ("кодамо" Sg Nom Indef) IF (1 N);
MAP:>n (@>N) TARGET NumSgNomIndef IF (1 N);
       #60:  революциянь 60 иетненень 2022-05-27
MAP:>n (@>N) TARGET (inf/verbnMO/ME/MU/M indf nsg cx:nom) OR (inf/verbn/agptcpMA indf nsg cx:nom) OR (n/adj gen-derN cpound-beg/mid) OR (n gen-derN cpound-beg/mid) IF (1 N);
       #топонь: топонь пряка
MAP (@>N) TARGET (n indf nsg abe-derVTOMO) OR (N SP Abe Indef) IF (1 N);
    #и нолдызе сонзэ потмакстомо Равс.

MAP (@>N) TARGET (n indf nsg cx:nom cpound-beg/mid) OR (n:prop indf nsg cx:nom cpound-beg/mid) IF (1 (n cx:nom cpound-end/cpound-unsegm) OR (n indf nsg cx:nom cpound-beg/mid));
    # пря черть in MORMULA
MAP (@>N) TARGET (n indf nsg cx:gen cpound-beg/mid) IF (-1 (n indf nsg cx:gen cpound-beg/mid));
    
MAP (@>N) TARGET (n indf nsg cx:nom) OR NOUNSgNomIndef IF (1 (N)) (2 CLB OR EOS);
    #чувто: струясонзо чувто прятнень

MAP (@>N) TARGET ESJ OR (Det Sg Nom) IF (1 N);# This can also take an entire NP
    #те: Те ведесь лиссь почванть эйстэ.
MAP (@>N) TARGET ESJ OR (Det Sg Nom) IF (1 A) (2 N);# This can also take an entire NP
    #те: Модань те верце слоентень мерить почва.

# 11->43761
# auf Erden (mastur _nansa_) This needs a finite verb 2022-02-23
#MAP (@<POSTP) TARGET Po IF (-1 N);
MAP (@<ADVL) TARGET Po IF (-1 N LINK *-1 VFIN BARRIER CLB OR BOS); #
MAP (@ADVL>) TARGET Po IF (-1 N LINK *1 VFIN BARRIER CLB OR EOS); #

# 11->44660
# Nicht weit (_at_ vasula)
#MAP (@NEG>) TARGET NegAgroup IF (NOT 1 CLB);
MAP (@NEG>) TARGET neg:A IF (1 (vfin mod:ind temp:pres) OR N OR Pron OR V OR Adv OR Num);
    #а эряви
MAP (@NEG>) TARGET neg:A IF (1 (adv:quantity) OR (ConNeg) OR (N) OR (Pron) OR A);
    #а ламо, аламо
#MAP (@NEG>) TARGET Neg IF (NOT 1 CLB); # ???
MAP (@NEG) TARGET Neg; # IF (NOT 1 CLB); ???
#MAP (@NEG) TARGET PretNeg;

# 11->44069
# totene nicht (ezize _taraft_)
MAP (@CONNEG) TARGET ConNeg;


# Identifying @-FSUBJ
#MAP (@-FSUBJ1) TARGET Gen IF (1 Ptcp2); These may be off with wrong names Not VOblig
#MAP (@-FSUBJ2) TARGET Gen IF (1 Ptcp2); # cx:gen (usually immediately before the Ptcp2 валскень правт лов)
#MAP (@-FSUBJ3) TARGET Dat IF (*1 VOblig BARRIER CLB); # cx:all (often, but perhaps not always, before the VOblig) CHECKME
#MAP (@-FSUBJ4) TARGET Dat IF (*1 VINF BARRIER CLB); # The position of @-FSUBJ is not fixed and it doesn't have to be the closest word to the non-finite verb form.
#MAP (@-FSUBJ5) TARGET Dat IF (*1 Infinitives BARRIER CLB); # The position of @-FSUBJ is not fixed and it doesn't have to be the closest word to the non-finite verb form.



#object/patients of inf-ptcpMA = VOblig July 2022
#MAP (@SUBJ>) TARGET VOBLIQ_PATCANDIDATE IF (-1 CLB OR BOS) (1 VOblig);
#MAP (@SUBJ>) TARGET VOBLIQ_PATCANDIDATE IF (-1 CLB OR BOS) (NOT 0* VFIN BARRIER CLB OR EOS OR BOS) (NOT 1 PostpNoPX OR CLB OR EOS) (1* VOblig BARRIER CLB OR EOS);
#MAP (@SUBJ>) TARGET VOBLIQ_PATCANDIDATE IF (NOT -1 CLB OR BOS) (NOT 0* VFIN BARRIER CLB OR EOS OR BOS) (NOT -1* VOblig BARRIER CLB OR BOS) (1 VOblig);
#MAP (@SUBJ>) TARGET VOBLIQ_PATCANDIDATE IF (NOT -1 CLB OR BOS) (NOT 0* VFIN BARRIER CLB OR EOS OR BOS) (NOT -1* VOblig BARRIER CLB OR BOS) (NOT 1 PostpNoPX OR CLB OR EOS) (1* VOblig BARRIER CLB OR EOS);
    #"се" pron:dem indf nsg cx:nom
    # ,  [се] сэвема.
    #, алось тозонь тапама,
#MAP (@<SUBJ) TARGET VOBLIQ_PATCANDIDATE IF (-1* VOblig BARRIER CLB OR BOS) (NOT 0* VFIN BARRIER CLB OR EOS OR BOS) (1 CLB OR EOS);#
#MAP (@<SUBJ) TARGET VOBLIQ_PATCANDIDATE IF (-1* VOblig BARRIER CLB OR BOS) (NOT 0* VFIN BARRIER CLB OR EOS OR BOS) (NOT 1 PostpNoPX OR CLB OR EOS) (NEGATE 1* VOblig BARRIER CLB OR EOS);
    # cаема трёшник, киргама пеельсэ цёрантень казнекс.
    # Кода бу тестэ саламаль гуень ой?

#NOT -OHHOH, JOPAS, TÄMÄ HUONO PAIMEN ON ETSITTÄVÄ.>> а_паронь саема ''
# Ох, уш, те а_паронь саема пастухось.


#Obvious subjects
MAP (@SUBJ>) TARGET SUBJECTCANDIDATESG3 OR (Pron Dem Sg Nom Indef) IF (1 VFIN OR MOOD-V) ;
    	     #Те эряви сень кискак, ...

MAP (@SUBJ>) TARGET SEMBESGNOM IF (*1 VFINPL3SUBJ BARRIER CLB OR EOS OR NON-VERB LINK NOT *0 SUBJECTCANDIDATEPL3 BARRIER CLB OR EOS OR BOS) ;
    # , мзярда сембе срадыхть кудга,
    # и, эсто-киге сембе вяшкондезь-юватькшнезь кадозь веленять.
    
MAP (@<SUBJ) TARGET SEMBESGNOM IF (*-1 VFINPL3SUBJ BARRIER CLB OR EOS OR BOS LINK NOT *0 SUBJECTCANDIDATEPL3 BARRIER CLB OR EOS OR BOS) (1 CLB OR EOS) ;

MAP (@SUBJ>) TARGET SUBJECTCANDIDATESG3 IF (1 NAdjSgNomIndef OR AJJSgNomIndef) (NOT *0 VFIN BARRIER CLB OR EOS OR BOS) (2 CLB OR EOS);
    #покш: прязо покш, удемезэ арась.

MAP (@SUBJ>) TARGET SUBJECTCANDIDATEPL3 OR NOUNPlNomPxPl3 OR NOUNPlNomPxPl2 OR NOUNPlNomPxPl1 OR NOUNPlNomPxSg3 OR NOUNPlNomPxSg2 OR NOUNPlNomPxSg1 IF (1 NAdjPlNomIndef OR AJJPlNomIndef OR NOUNPlNomIndef) (NOT *0 VFIN BARRIER CLB OR EOS OR BOS OR @CNP ) (2 CLB OR EOS OR @CNP );
# - одежанзо литкат ды судозо рудазов.

MAP (@SUBJ>) TARGET AJJSgNomIndef IF (-1 @CVP ) (1 VFINSG3SUBJ) (2  CLB OR EOS);
    #раужо: , а раужо сёлги.

MAP (@SUBJ>) TARGET NMNSgNomIndefSUBJ IF (*1 VFINSG3SUBJ BARRIER CLB OR EOS OR @CVP) (NOT *-1 SUBJECTCANDIDATESG3 BARRIER CLB OR BOS) (NOT *1 SUBJECTCANDIDATESG3 BARRIER CLB OR EOS) (NOT 1 PostpNoPX);
 #— Шумбрат, — каясь вал бабатнестэ вейкесь ды поладсь ялганстэнь:

MAP (@<SUBJ) TARGET NMNSgNomIndefSUBJ IF (*-1 VFINSG3SUBJ BARRIER CLB OR BOS OR @CVP) (NOT *-1 SUBJECTCANDIDATESG3 BARRIER CLB OR BOS) (NOT *1 SUBJECTCANDIDATESG3 BARRIER CLB OR EOS) (NOT 1 PostpNoPX);

MAP (@<SUBJ) TARGET SUBJECTCANDIDATESG3 IF (-1* VFINPL3SUBJ BARRIER CLB OR BOS OR @CVP) (1 @CNP LINK 1* SUBJECTCANDIDATESG3 BARRIER NPBARRIER OR CLB OR EOS);
   #отделэсь: Сонзэ ютавтызь народной образованиянь Саранск ошонь отделэсь ды ошонь методической кабинетэсь 1977 иенть прядовомсто.
MAP (@<SUBJ) TARGET SUBJECTCANDIDATESG3 IF (-1* @CNP  BARRIER NPBARRIER OR CLB OR BOS LINK -1 SUBJECTCANDIDATESG3 LINK -1* VFINPL3SUBJ BARRIER CLB OR BOS OR @CVP);
   #кабинетэсь: Сонзэ ютавтызь народной образованиянь Саранск ошонь отделэсь ды ошонь методической кабинетэсь 1977 иенть прядовомсто.

## SPRED
MAP (@SPRED) TARGET AJJSgNomIndef OR NOUNSgNomIndef IF (-2 @CNP OR CLB OR BOS) (-1 SUBJECTCANDIDATESG3) (1 CLB OR EOS);# from @PRED 2023_02_23
MAP (@SPRED) TARGET AJJPlNomIndef OR NOUNPlNomIndef IF (-2 @CNP OR CLB OR BOS) (-1 SUBJECTCANDIDATEPL3 OR NOUNPlNomPxPl3 OR NOUNPlNomPxPl2 OR NOUNPlNomPxPl1 OR NOUNPlNomPxSg3 OR NOUNPlNomPxSg2 OR NOUNPlNomPxSg1) (1 CLB OR EOS OR @CNP ); # from @PRED 2023_02_23

# 11->41678
# siebenkopfigen (_sisiX-_ _Xrasa_)
#MAP (@CPOUND>) TARGET CpoundBeg;
#MAP (@MCPOUND) TARGET CpoundEnd; # TODO Determine its function, syntactic tag
MAP (@CMPND) TARGET CpoundBeg;
MAP (@CMPND-) TARGET ("<.*->"ri) IF (1 CpoundEnd);

MAP (@>N) TARGET ("<[0-2][0-9][0-9][0-9]>"ri) IF (1 ("<иень>") OR ("ие" Gen) OR ("ие" cx:gen));
    #1956 иень
#####
#
# Phrasal relations with adjacent parent to right
#
######
# was @COPSUBJ>

MAP (@SUBJ>) TARGET SUBJECTCANDIDATESG3 OR PronRelSgNomIndef OR NOUNSgNomIndef OR NPropSgNomIndef IF (1 NONVSG3);
    # кона алтазель великой октябрьской социалистической революциянь 60 иетненень

MAP (@SUBJ>) TARGET ("кона" indf npl cx:nom) IF (1 GerOzj) (NOT *0 VFIN BARRIER CLB);
    #, конат алтазь ине октябрянтень,
    # This requires a list of possible nonverbal predicate heads

MAP (@SUBJ>) TARGET (Pron Sg Nom Indef) OR NPropSgNomIndef IF (1 VfinVsg3 OR NONVSG3);

MAP (@<SUBJ) TARGET SUBJECTCANDIDATESG3 IF (*-1 NONVSG3 OR VfinVsg3 BARRIER CLB OR BOS);

MAP (@<SUBJ) TARGET NOUNSgNomIndef OR (n indf nsg cx:nom) IF (*-3 VFINSG3SUBJ BARRIER CLB OR BOS) (-2 (",")) (-1 A OR (indf nsg cx:nom)) (1 (",")) (2 ("кона"));
    #интеллигенция: народонть ютксто лиссь од, социалистической интеллигенция, кона

MAP (@SUBJ>) TARGET NOUNSgNomIndef IF (*1 NONVCENTERSSG BARRIER CLB OR EOS OR CConj) (NOT *0 VFIN BARRIER CLB OR EOS OR BOS OR CConj) (NOT *-1 SUBJECTCANDIDATESG3 BARRIER CLB OR BOS OR CConj) (NOT *1 SUBJECTCANDIDATESG3 BARRIER CLB OR EOS OR CConj) (NOT 1 CLB OR EOS);
    #

MAP (@SUBJ>) TARGET NOUNPlNomIndef IF (*1 NONVCENTERSPL BARRIER CLB OR EOS OR CConj) (NOT *0 VFIN BARRIER CLB OR EOS OR BOS OR CConj) (NOT *-1 SUBJECTCANDIDATEPL3 BARRIER CLB OR BOS OR CConj) (NOT *1 SUBJECTCANDIDATEPL3 BARRIER CLB OR EOS OR CConj);
    #сиянь андямо лангсонзо, сиянь одюжат лангсонзо, сиянь шапка прясонзо

# work with measures needed
MAP:measure>n (@HNOUN) TARGET N IF (-1 MEASURES) (1 CLB OR EOS);

MAP:>n (@>N) TARGET ADNOMINALATTRCANDIDATE IF (1 N);
       #паро: вешнесь паро чувто
       #NOT , сиянь [шапка] прясонзо,
       #this is a clean up after indefinite subject, perhaps also object2022-04-14
MAP:nointerim>n (@>N) TARGET ADNOMINALATTRCANDIDATE IF (*1 N BARRIER NOUNPHRASEBREAK OR CLB LINK NOT 0 NOUNSgNomIndef);
		# does not allow проза ды поэзия to become an NP nmod(поэзия, проза)

MAP (@<OBJ) TARGET NOUNSgNomIndef IF (-1 (TV) LINK NOT *-1 NOTVOCSG3 LINK *0 SUBJECTCANDIDATESG3) (NOT 1 PostpNoPX);
    	    #ведь: штобу сон аволь нолда ведь. Identifying 

#FIXME MAP (@<OBJ) TARGET NOUNSgNomIndef IF (*-1 BARRIER CLB OR EOS OR BOS OR @CVP LINK NOT *-1 NOTVOCSG3 LINK *-1 SUBJECTCANDIDATESG3) (NOT 1 PostpNoPX);
     #, штобу гитлеровецтнэ тестэ саевельть натой вейке дивизия ды кучовлизь Сталинградонть малав.

MAP (@<OBJ) TARGET OBJECTCANDIDATEPL3INDEF IF (*-2 BOS OR CConj LINK 1 NOTVFINPL3SUBJ);
#MAP (@<OBJ) TARGET OBJECTCANDIDATEPL3INDEF IF (-1 NOTVFINPL3SUBJ) (-2 CConj);
    #левкст: тейсь прязонзо пизэ и ливтсь левкст.
     #пизэ vs нармунь: пачкодсь прязонзо нармунь и ливтсь левкст.


MAP (@<OBJ) TARGET NSgNomGenPxAMB (*-1 VOCSG3NOSCSG3) (NOT 1 PostpNoPX);
    #кандынек тенк кшинек-салонок

MAP (@OBJ>) TARGET NSPNomGenPx (*1 VOCPL3) (NOT 1 PostpNoPX);
    #мон нупонеть весе таргсесынь.

MAP (@<OBJ) TARGET OBJECTCANDIDATEPL3DEF IF (*-1 VOCPL3 BARRIER CLB OR BOS OR CConj) (NOT 1 PostpNoPX);
    #

MAP (@<OBJ) TARGET OBJECTCANDIDATEPL3DEF IF (*-1 VOCPL3 BARRIER CLB OR BOS OR CConj) (NOT 1 PostpNoPX);
    #прятнень: зярдо чись ансяк кармась пургсеме якстере струясонзо чувто прятнень,...

MAP (@OBJ>) TARGET OBJECTCANDIDATEPL3DEF IF (*1 VOCPL3 BARRIER CLB OR EOS OR CConj) (NOT 1 PostpNoPX);
    #весемень палынзе,
####
#
# @>P 
#
#####

MAP (@>P) TARGET PronRelSgNomIndef OR PronDemSPGen OR NAdjSgNomIndef OR NOUNSgNomIndef OR NPropSgNomIndef OR PronPersGen OR Gen IF (1 PostpNoPX);

MAP (@>P) TARGET (n indf nsg cx:nom cpound-beg/mid) OR (n:prop indf nsg cx:nom cpound-beg/mid) IF (1 (postp/prep cpound-end/cpound-unsegm));
    	  #кудо потсо

MAP (@>P) TARGET InfinitiveGenPxSg2 OR Gen OR NSPNomGenPx IF (1 PostpNoPX);# basically all genitive preceding postpositions that do not have person marking
#
MAP (@>P) TARGET AgptcpMaSgGenPxSg3 IF (1 Po);#This is all part of the misunderstood -мо/-ме; -ма/-мо; -ма system

#The target is N Sg Nom Indef, i.e. deverbal nouns, proper nouns etc.
MAP (@>P) TARGET AgptcpMaIndfSgNom IF (1 PostpNoPX);#This is a deverbal noun, -ма tells us that the preceding vowel must be е/э/о in the literary language
MAP (@>P) TARGET NAdjNom OR NOUNSgNomIndef IF (1 PostpNoPX);
MAP (@>P) TARGET NPropSgNomIndef IF (1 PostpNoPX);



# 195     2620  "" n/adj def npl cx:gen @>P                                               "" n/adj def npl cx:gen @<OBJ                                            MAP:1069
# 196     2254  "" n/adj def npl cx:gen @>P                                               "" n/adj def npl cx:gen @OBJ                                             MAP:1107
# 197     2302  "" n/adj def npl cx:gen @>P                                               "" n/adj def npl cx:gen @OBJ                                             MAP:1107
# 198     2532  "" n/adj def npl cx:gen @>P                                               "" n/adj def npl cx:gen @OBJ                                             MAP:1107
# 199     2835  "" n/adj def npl cx:gen @>P                                               "" n/adj def npl cx:gen @OBJ                                             MAP:1107
# 220     534   "" n/adj def nsg cx:gen @>P                                               "" n/adj def nsg cx:gen @<OBJ                                            MAP:1069
# 221     1149  "" n/adj def nsg cx:gen @>P                                               "" n/adj def nsg cx:gen @OBJ                                             MAP:1106
# 222     1428  "" n/adj def nsg cx:gen @>P                                               "" n/adj def nsg cx:gen @OBJ                                             MAP:1106
# 552     509   "" n/adj nsg cx:gen pxsg3 @>P                                             "" n/adj nsg cx:gen pxsg3 @<OBJ                                          MAP:1069
# 553     2589  "" n/adj nsg cx:gen pxsg3 @>P                                             "" n/adj nsg cx:gen pxsg3 @OBJ                                           MAP:1096
# 554     3142  "" n/adj nsg cx:gen pxsg3 @>P                                             "" n/adj nsg cx:gen pxsg3 @OBJ                                           MAP:1096
# 621     313   "" n:prop indf nsg cx:gen @>P                                             "" n:prop indf nsg cx:gen @<OBJ                                          MAP:1069
# 622     372   "" n:prop indf nsg cx:gen @>P                                             "" n:prop indf nsg cx:gen @<OBJ                                          MAP:1069
# 903     1050  "" pron:pers npl cx:gen pxpl3 @>P                                         "" pron:pers npl cx:gen pxpl3 @<OBJ                                      MAP:1069
# 919     1113  "" ptcp1 def npl cx:gen @>P                                               "" ptcp1 def npl cx:gen @OBJ                                             MAP:1101
 


#
MAP (@>P) TARGET NAdjGenNplUnclearRussPxSg3 OR NOUNGenNplUnclearRussPxSg3 IF (1 PostpNoPX);

#
#MAP (@>P) TARGET NumCard1IndfSgGen IF (NOT 0 NumCard1IndfSgGenAkgroup);
MAP (@>P) TARGET NumCard1IndfSgGen IF (1 PostpNoPX);


MAP (@>P) TARGET NAdjGen OR NOUNGen IF (1 PostpNoPX);
MAP (@>P) TARGET NPropGen IF (1 PostpNoPX);
MAP (@>P) TARGET PronPersGen IF (1 PostpNoPX);

MAP (@>P) TARGET NAdjGenNplUnclearRussPxSg2 OR NOUNGenNplUnclearRussPxSg2 IF (1 PostpNoPX);
MAP (@>P) TARGET NAdjGenNplUnclearRussPxPl2 OR NOUNGenNplUnclearRussPxPl2 IF (1 PostpNoPX);
MAP (@>P) TARGET NAdjGenNplUnclearRussPxSg3 OR NOUNGenNplUnclearRussPxSg3 IF (1 PostpNoPX);
MAP (@>P) TARGET NAdjGenNplUnclearRussPxPl3 OR NOUNGenNplUnclearRussPxPl3 IF (1 PostpNoPX);

MAP:AdjacentSg2Clause (@VOC) TARGET NOUNSgNomIndef OR PTCPPrsSgNomIndef IF ((-1 CLB OR BOS) OR ((-2 CLB OR BOS) LINK (NOT *0 VFIN OR NONVPERSON BARRIER CLB OR BOS OR EOS)) OR ((-3 CLB OR BOS) LINK (NOT *0 VFIN OR NONVPERSON BARRIER CLB OR BOS OR EOS)) ) (NOT -1 ConNeg) (1 CLB) (*2 SG2REFERENCE BARRIER CLB OR EOS);
		      #NOT прощения: макстая прощения, пичкавтыка Андреень should be @OBJ see @VOC 2022-04-13
		      
MAP:VocTargets (@VOC) TARGET NOUNNomIndef IF (0 VOCATIVETARGET) (-1 CLB OR BOS) (1 CLB OR EOS);
    #ялгат: Пасиба, ялгат, пасиба,
MAP:VocTargets (@VOC) TARGET NOUNSPNomIndefCpoundEnd OR PNOUNSPNomIndefCpoundEnd IF (0 VOCATIVETARGET) (-2 CLB OR BOS) (-1 CpoundBeg) (1 CLB OR EOS);
	  #, кардаз [сярко],

MAP:NoMeasures2wordNP (@VOC) TARGET NOUNSgNomIndef IF (-2 CLB OR BOS) (NOT -1 ConNeg OR VFIN OR NONVPERSON OR MEASURES) (1 CLB OR EOS);
	#May have probles with ожо канцяв, ороронь канцяв, канцяв канцяв пуван
	#what is the difference between list and vocative

MAP:NoMeasures3wordNP (@HNOUN) TARGET NOUNSgNomIndef IF (-3 CLB OR BOS) (NOT -2 ConNeg OR MEASURES OR VFIN OR NONVPERSON) (NOT -1 ConNeg OR MEASURES OR VFIN OR NONVPERSON) (1 CLB OR EOS) (NEGATE 0* VFIN);# for now 2022-05-27
MAP:HasFollowingParallel (@HNOUN) TARGET NOUNSgNomIndef IF (-1 CLB OR BOS) (1 ("ды") OR ("и")) (2 @HNOUN);
	# проза ды поэзия

#MAP:NoMeasures3wordNP (@VOC) TARGET NOUNSgNomIndef IF (-3 CLB OR BOS) (NOT -2 ConNeg OR MEASURES OR VFIN OR NONVPERSON) (NOT -1 ConNeg OR MEASURES OR VFIN OR NONVPERSON) (1 CLB OR EOS);
#this seems to be a description of something we want to draw attention to. The vocative should be defined as a subgroup 2022-04-13 

MAP (@VOC) TARGET NOUNSgNomPxSg1 OR NPropSgNomPxSg1 IF ((-1 CLB OR BOS) OR ((-2 CLB OR BOS) LINK (NOT *0 VFIN OR NONVPERSON BARRIER CLB OR BOS OR EOS)) OR (-3 CLB OR BOS LINK NOT *0 VFIN OR NONVPERSON BARRIER CLB OR BOS OR EOS) ) (1 CLB OR EOS) (NOT -1 ConNeg);
    #керень-чочконь-пазнэм

		      #NOT прощения: макстая прощения, пичкавтыка Андреень		      
MAP:OneSeparateNoun (@VOC) TARGET NOUNSgNomIndef IF (-1 CLB OR BOS) (1 CLB OR EOS);


MAP:VocTargetsProp (@VOC) TARGET NPropSgNomIndef IF (-2 CLB OR BOS) (-1 NPropSgNomIndef) (1 CLB OR EOS);#
    #Максим Алексеевич, тыненк максозь генераль-полковникень лем.

MAP:followedByVoc (@VOC) TARGET NOUNSgNomIndef OR PTCPPrsSgNomIndef IF ((-1 CLB OR BOS) OR ((-2 CLB OR BOS) LINK (NOT *0 VFIN OR NONVPERSON BARRIER CLB OR BOS OR EOS)) OR ((-3 CLB OR BOS) LINK (NOT *0 VFIN OR NONVPERSON BARRIER CLB OR BOS OR EOS)) ) (NOT -1 ConNeg) (1 CLB) (*2 @VOC BARRIER CLB OR EOS);#Voc before Voc


###############################################################################
#
# Prenominal Determiners @>N: adjectives...
#
###############################################################################

#
MAP (@>N) TARGET NAdjSgNomIndef OR NumOrdSgNomIndef OR NumSgNomIndef OR NOUNSgNomIndef OR AJJSgNomIndef IF (NOT 1 PostpNoPX)
#                                  (1 NPron)
                                  (NOT 1 CLB)
				  (NOT 1 (cnj:coord) LINK 1 VFIN);
#MAP (@>N) TARGET NAdjPlNomIndef OR NOUNPlNomIndef OR AJJNomPlIndf IF (NOT 1 PostpNoPX)
#                                  (1 NPron)
#                                  (NOT 1 CLB);

MAP (@>N) TARGET NAdjSgNomIndef OR NumOrdSgNomIndef OR NumSgNomIndef OR NOUNSgNomIndef OR AJJSgNomIndef IF (1 CLB)
                                  (2 @>N);
#Only in NW dialect where attributes take plural marking
#MAP (@>N) TARGET NAdjPlNomIndef OR NOUNPlNomIndef OR AJJNomPlIndf IF (1 CLB)
#                                  (2 @>N);

MAP (@-FOBJ>) TARGET Gen IF (1 VINF);
    	      	 #тееме : литературась тонавты национальной произведениянь тееме

MAP (@-FOBJ>) TARGET GENDEF IF (1 Adv) (2 VINF);
#MAP (@-FOBJ>) TARGET GENDEF IF (1 Adv) (2 SupLoc OR VINF);
    	    #природанть: Сон лезды тенек природанть видестэ-парсте чарькодеме.

MAP:GenPersWhenFollowedByDef (@N>) TARGET PronPersGen IF (1 NOUNSPDEF);
#стявтызь cынст литературанть кинть лангс.

MAP (@-FOBJ>) TARGET Gen OR NSPNomGenPx IF (1 NONFINITES);
    #мелест-бажамост нолдамонь опытсэнть
MAP (@-FOBJ>) TARGET Gen OR NSPNomGenPx IF (1 Gen OR NSPNomGenPx) (2 NONFINITES);

MAP (@-FADVL-partitive>) TARGET NAdjSPAbl IF (1 INGESTIONVABLARGINF);
    #ойдензэ ярсамо якси

MAP (@OBJ>) TARGET GENDEF IF (1 PronPersNom) (*0 VFIN BARRIER CLB OR BOS OR EOS);
    	    #кона: растениятнень, конатнень минь видекшнетяно

MAP (@<OBJ) TARGET PronPersSg1Gen OR PronPersSg1Nom IF (*-1 VOCSG1 BARRIER CLB OR BOS);
MAP (@OBJ>) TARGET PronPersSg1Gen OR PronPersSg1Nom IF (*1 VOCSG1 BARRIER CLB OR EOS);
    #монь кучимим
MAP (@<OBJ) TARGET PronPersPl1Gen OR PronPersPl1Nom IF (*-1 VOCPL1 BARRIER CLB OR BOS);
MAP (@OBJ>) TARGET PronPersPl1Gen OR PronPersPl1Nom IF (*1 VOCPL1 BARRIER CLB OR EOS);

MAP (@<OBJ) TARGET PronPersSg2Gen OR PronPersSg2Nom IF (*-1 VOCSG2 BARRIER CLB OR BOS);# The nominative has been placed here due to misprints. The assumption being that the verb form is prominent.
MAP (@OBJ>) TARGET PronPersSg2Gen OR PronPersSg2Nom IF (*1 VOCSG2 BARRIER CLB OR EOS);
MAP (@<OBJ) TARGET PronPersPl2Gen OR PronPersPl2Nom IF (*-1 VOCPL2 BARRIER CLB OR BOS);
MAP (@OBJ>) TARGET PronPersPl2Gen OR PronPersPl2Nom IF (*1 VOCPL2 BARRIER CLB OR EOS);

MAP (@<OBJ) TARGET PronPersSg3Gen OR PronPersSg3Nom IF (*-1 VOCSG3 BARRIER CLB OR BOS);
MAP (@OBJ>) TARGET PronPersSg3Gen OR PronPersSg3Nom IF (*1 VOCSG3 BARRIER CLB OR EOS);
MAP (@<OBJ) TARGET PronPersPl3Gen OR PronPersPl3Nom IF (*-1 VOCPL3 BARRIER CLB OR BOS);
MAP (@OBJ>) TARGET PronPersPl3Gen OR PronPersPl3Nom IF (*1 VOCPL3 BARRIER CLB OR EOS);

MAP (@<OBJ) TARGET NPropGenIndef IF (*-1 VOCSG3 BARRIER CLB OR BOS)(1 CLB);
    #ривезькесь кевкстизе пустачеень: 
#
MAP (@>N) TARGET NAdjSgGenIndf OR NAdjPlGenIndf OR NOUNSPGenIndf OR AJJSPGenIndf IF (NOT 1 PostpNoPX OR ESJ OR CLB OR VFIN OR MOOD-V OR VINF)
    	  	 	       	  		(NEGATE 1 ("ды") LINK 1 VFIN);
				  #эсь трудсонзо изни природанть
				  # Природанть эряви тонавтнемс аволь ансяк...

#MAP (@>N) TARGET NAdjPlGenIndf OR NOUNPlGenIndf OR AJJPlGenIndf IF (NOT 1 PostpNoPX)
#                                  (NOT 1 CLB);

MAP (@>N) TARGET NAdjSgGenIndf OR NAdjPlGenIndf OR NOUNSPGenIndf OR AJJSPGenIndf  IF (1 CLB) (2 @>N);
#MAP (@>N) TARGET NAdjPlGenIndf OR NOUNPlGenIndf OR AJJPlGenIndf  IF (1 CLB)
#                                  (2 @>N);

#
MAP (@>N) TARGET NPropSgNomIndef IF (NOT 1 PostpNoPX OR (pron:pers) OR (Pron Pers) OR VFIN)
                                 (NOT 1 CLB);
MAP (@>N) TARGET NPropSgNomIndef IF (1 CLB)
                                 (2 @>N);

#
MAP (@>N) TARGET NPropGenIndef IF (NOT 1 PostpNoPX)
                                 (NOT 1 CLB OR EOS)
				 (NOT 1 NPBARRIER);
	#урозокс: Войнась теизе урозокс Сашоконь. @OPRED
	#Паряк, Зина теде содась уш Поля патянзо пельде, 
MAP (@>N) TARGET NPropGenIndef IF (1 CLB)
                                 (2 @>N);

#
MAP (@>N) TARGET PronLIJASgNom IF (NOT 1 PostpNoPX)
                                  (NOT 1 VFINPERSONSUBJ)
                                  (NOT 1 CLB);
MAP (@>N) TARGET PronLIJAPlNom IF (NOT 1 PostpNoPX)
                                  (NOT 1 CLB);
MAP (@>N) TARGET PronLIJASgNom IF (1 CLB)
                                  (2 @>N);
MAP (@>N) TARGET PronLIJAPlNom IF (1 CLB)
                                  (2 @>N);
MAP (@ADVL>) SEMBESGNOM IF (1 ("сяка" pron:dem indf nsg cx:nom));#as group 
MAP (@ADVL>) ("сяка" pron:dem indf nsg cx:nom) IF (-1 SEMBESGNOM);#as group
#modal adverbial
#
MAP (@>N) TARGET PronVESESgNom IF (1 N) (NOT 1 PostpNoPX)
                                  (NOT 1 CLB OR VFIN);
    #, мон нупонеть весе таргсесынь.
    
MAP (@>N) TARGET PronVESESgNom IF (1 CLB)
                                  (2 @>N);

#
MAP (@>N) TARGET PronIndefSgNom IF (NOT 1 PostpNoPX)
                                   (NOT 1 CLB OR VFIN);
MAP (@>N) TARGET PronIndefPlNom IF (NOT 1 PostpNoPX)
                                   (NOT 1 CLB OR VFIN);
MAP (@>N) TARGET PronIndefSgNom IF (1 CLB)
                                   (2 @>N);
MAP (@>N) TARGET PronIndefPlNom IF (1 CLB)
                                   (2 @>N);

#
MAP (@>N) TARGET PronInterIndefSgNom IF (NOT 1 PostpNoPX)
                                        (NOT 1 CLB OR VFIN);
MAP (@>N) TARGET PronInterIndefPlNom IF (NOT 1 PostpNoPX)
                                        (NOT 1 CLB OR VFIN);
MAP (@>N) TARGET PronInterIndefSgNom IF (1 CLB)
                                        (2 @>N);
MAP (@>N) TARGET PronInterIndefPlNom IF (1 CLB)
                                        (2 @>N);

#
MAP (@>N) TARGET PronInterIndefSgGen IF (NOT 1 PostpNoPX)
                                        (NOT 1 CLB OR VFIN);
MAP (@>N) TARGET PronInterIndefPlGen IF (NOT 1 PostpNoPX)
                                        (NOT 1 CLB OR VFIN);
MAP (@>N) TARGET PronInterIndefSgGen IF (1 CLB)
                                        (2 @>N);
MAP (@>N) TARGET PronInterIndefPlGen IF (1 CLB)
                                        (2 @>N);

#
MAP (@>N) TARGET PronDemSgNomIndf IF (NOT 1 PostpNoPX)
                                     (NOT 1 CLB OR VFIN);
MAP (@>N) TARGET PronDemPlNomIndf IF (NOT 1 PostpNoPX)
                                     (NOT 1 CLB OR VFIN);
MAP (@>N) TARGET PronDemSgNomIndf IF (1 CLB)
                                     (2 @>N);
MAP (@>N) TARGET PronDemPlNomIndf IF (1 CLB)
                                     (2 @>N);

#
MAP (@>N) TARGET NumSgNomIndef IF (NOT 1 PostpNoPX)
                                 (NOT 1 CLB);
MAP (@>N) TARGET NumPlNomIndef IF (NOT 1 PostpNoPX)
                                 (NOT 1 CLB);
MAP (@>N) TARGET NumSgNomIndef IF (1 CLB)
                                 (2 @>N);
MAP (@>N) TARGET NumPlNomIndef IF (1 CLB)
                                 (2 @>N);

#
MAP (@>N) TARGET PronPersSg1Gen IF (NOT 1 PostpNoPX OR ESJ)
                                     (NOT 1 CLB);
MAP (@>N) TARGET PronPersSg2Gen IF (NOT 1 PostpNoPX OR ESJ)
                                     (NOT 1 CLB);
MAP (@>N) TARGET PronPersSg3Gen IF (NOT 1 PostpNoPX OR ESJ)
                                     (NOT 1 CLB);
MAP (@>N) TARGET PronPersPl1Gen IF (NOT 1 PostpNoPX OR ESJ)
                                     (NOT 1 CLB);
MAP (@>N) TARGET PronPersPl2Gen IF (NOT 1 PostpNoPX OR ESJ)
                                     (NOT 1 CLB);
MAP (@>N) TARGET PronPersPl3Gen IF (NOT 1 PostpNoPX OR ESJ)
                                     (NOT 1 CLB);
	#ды нолды сонзэ эсь лезэс

MAP (@>N) TARGET PronPersSg1Gen IF (1 CLB)
                                     (2 @>N);
MAP (@>N) TARGET PronPersSg2Gen IF (1 CLB)
                                     (2 @>N);
MAP (@>N) TARGET PronPersSg3Gen IF (1 CLB)
                                     (2 @>N);
MAP (@>N) TARGET PronPersPl1Gen IF (1 CLB)
                                     (2 @>N);
MAP (@>N) TARGET PronPersPl2Gen IF (1 CLB)
                                     (2 @>N);
MAP (@>N) TARGET PronPersPl3Gen IF (1 CLB)
                                     (2 @>N);

MAP (@>N) TARGET PronRelSPGenIndef OR PronRelSgGenDef IF (NOT 1 PostpNoPX) (*1 PREDForDefSG3Obj BARRIER CLB OR EOS OR CConj) ((*1 DefSg3Obj) LINK (NOT 1 PostpNoPX));
    #конань: , конань раса ведьса ашезь штакшне цёрать, аш стама корянь,
#
MAP (@>N) TARGET PronReflIndfNom IF (NOT 1 PostpNoPX)
                                    (NOT 1 CLB);
MAP (@>N) TARGET PronReflIndfNom IF (1 CLB)
                                    (2 @>N);

#
MAP (@>N) TARGET PronIndefSgGenDerN IF (NOT 1 PostpNoPX)
                                       (NOT 1 CLB);
MAP (@>N) TARGET PronIndefPlGenDerN IF (NOT 1 PostpNoPX)
                                       (NOT 1 CLB);
MAP (@>N) TARGET PronIndefSgGenDerN IF (1 CLB)
                                       (2 @>N);
MAP (@>N) TARGET PronIndefPlGenDerN IF (1 CLB)
                                       (2 @>N);

#
MAP (@>N) TARGET NAdjComparIndfSg OR NOUNComparIndfSg IF (NOT 1 PostpNoPX)
                                     (NOT 1 CLB);
MAP (@>N) TARGET NAdjComparIndfPl OR NOUNComparIndfPl IF (NOT 1 PostpNoPX)
                                     (NOT 1 CLB);
MAP (@>N) TARGET NAdjComparIndfSg OR NOUNComparIndfSg IF (1 CLB)
                                     (2 @>N);
MAP (@>N) TARGET NAdjComparIndfPl OR NOUNComparIndfPl IF (1 CLB)
                                     (2 @>N);

#
MAP (@>N) TARGET InfinitiveGenPxSg2 IF (NOT 1 PostpNoPX)
                                       (NOT 1 CLB);
MAP (@>N) TARGET InfinitiveGenPxSg3 IF (NOT 1 PostpNoPX)
                                       (NOT 1 CLB);
MAP (@>N) TARGET InfinitiveGenPxSg2 IF (1 CLB)
                                       (2 @>N);
MAP (@>N) TARGET InfinitiveGenPxSg3 IF (1 CLB)
                                       (2 @>N);




# 11->39576
# Schoner Damai (_maze_ Damaj)
#MAP (@ADJ>) TARGET NAdjNom IF (1 NPropNom);
#MAP (@ADJ>) TARGET NAdjNom IF (1 NPropGen);
#MAP (@ADJ>) TARGET NAdjNom IF (1 NPropDat);
MAP (@>N) TARGET NAdjSgNomIndef OR NOUNSgNomIndef OR AJJSgNomIndef IF (1 NPropNom);
MAP (@>N) TARGET NAdjSgNomIndef OR NOUNSgNomIndef OR AJJSgNomIndef IF (1 NPropGen);
MAP (@>N) TARGET NAdjSgNomIndef OR NOUNSgNomIndef OR AJJSgNomIndef IF (1 NPropDat);

# 11->43948
# _lieber_, schone Damai
#MAP (@ADJ>) TARGET NAdjNom IF (1 Comma)
MAP (@>N) TARGET NAdjSgNomIndef OR NOUNSgNomIndef OR AJJSgNomIndef IF (1 Comma)
                            (2 AllAdj);

MAP (@>N) TARGET UNIQUANTSGNOM IF (1 N OR n);#What about adj?2022-02-18

# 11->44882
# wessen heerde ist das (_tete_ stadas *in)
MAP (@>N) TARGET PronDemSgNom IF (1 NAdjSgNom OR NOUNSgNom);
MAP (@>N) TARGET PronDemPlNom IF (1 NAdjPlNom OR NOUNPlNom);
MAP (@>N) TARGET PronDemSgNom IF (1 NAdjSgGen OR NOUNSgGen);
MAP (@>N) TARGET PronDemPlNom IF (1 NAdjPlGen OR NOUNPlGen);

# 11->45132
# diese Phale (_nenin_ palmatnin)
MAP (@>N) TARGET PronDemSgGen IF (1 NAdjSgGen OR NOUNSgGen);
MAP (@>N) TARGET PronDemPlGen IF (1 NAdjPlGen OR NOUNPlGen);

# 11->44691
# dieses siebenkopfigen Karjas (_sese_ sisi*-*krasa karazt)
MAP (@>N) TARGET PronDemSgNom IF (1 Num);
MAP (@>N) TARGET PronDemPlNom IF (1 Num);

# 11->44257
# seine Hauser (sonze _kudutne_)
MAP (@>N) TARGET PronPersGen IF (1 N);

#
MAP (@>N) TARGET PrsPrcSgGenIndf OR NAdjGenDerNSPIndf OR AJJGenDerNSPIndf OR NOUNGenDerNSPIndf IF (*1 N BARRIER CLB OR EOS LINK NOT *1 VFIN BARRIER CLB OR EOS );
    	  # эрзянь содавикс писателесь Кузьма Абрамов пек видестэ ёвтызе, што октября ды
	  #кулевсть уродиень-авардиень вайгяльхть,
	  
MAP (@>N) TARGET PTCPVIKS IF (*1 N BARRIER CLB OR EOS LINK NOT *1 VFIN BARRIER CLB OR EOS );

# гайгевтизь мокшотнень ды эрзятнень творческой виест
MAP (@>N) TARGET PLGENDEF IF (*1 PxPl3 BARRIER CLB OR EOS);#ADNOM possessor possessum
MAP (@>N) TARGET PLGENDEF IF (*1 NONCORECASES BARRIER CLB OR EOS)
    	  	 	     (NOT *1 VFIN  BARRIER CLB OR EOS)
                             (NOT 1 SGGENDEF OR PLGENDEF);

MAP (@>N) TARGET SGGENDEF IF (*1 PxSg3 BARRIER CLB OR EOS)
    	  	 	     (NOT *1 VFIN BARRIER CLB OR EOS)
			     (NOT 1 SGGENDEF OR PLGENDEF);#2022-02-20

# [[Октябрянь [ине революциянтень]] [кодгемень иень] топодеманть] тешкстамсто
# иень топодеманть inf/verbn/agptcpMA def nsg cx:gen
# топодеманть тешкстамсто infMS/ME cx:ela
MAP (@>N) TARGET GENDEF IF (1 SupEla);

#, невтсть сы шкань седеяк валдо эрямонтень молемань минек эскелькстнэ.
###############################################################################


# 11->44861
# tochter seine (stirt _soncinze_)
MAP (@<N) TARGET PronPersReflSg3Gen IF (-1 N)
                                (NOT 1 N);

#
#MAP (@<N) TARGET Nom IF (-1 N)
#                        (1 EOS);




###############################################################################
#
# Determine Proper names as @SUBJ + Verb
#
###############################################################################

MAP (@<SUBJ) TARGET PronPersSg1Nom IF (*-1 VfinVsg1 BARRIER CLB OR BOS);
MAP (@<SUBJ) TARGET PronPersSg2Nom IF (*-1 VfinVsg2 BARRIER CLB OR BOS);
MAP (@<SUBJ) TARGET SUBJECTCANDIDATESG3 OR NPropSgNomIndef OR NOUNSgNomIndef IF (*-1 VFINSG3SUBJ BARRIER CLB OR BOS);
MAP (@<SUBJ) TARGET PronPersPl1Nom IF (*-1 VfinVpl1 BARRIER CLB OR BOS);
MAP (@<SUBJ) TARGET PronPersPl2Nom IF (*-1 VfinVpl2 BARRIER CLB OR BOS);
MAP (@<SUBJ) TARGET SUBJECTCANDIDATEPL3 IF (*-1 VFINPL3SUBJ BARRIER CLB OR BOS);
MAP (@<SUBJ) TARGET NOUNPlNomIndef IF (*-1 VFINPL3SUBJ BARRIER CLB OR BOS) (NOT *0 SUBJECTCANDIDATEPL3 BARRIER CLB OR BOS OR EOS);
    #теицят: улить велесэ-сядсо теицят-кадыцят
MAP (@<SUBJ) TARGET NOUNPlNomIndef IF (*-3 VFINPL3SUBJ BARRIER CLB OR BOS) (NOT *-3 SUBJECTCANDIDATEPL3 BARRIER CLB OR BOS OR EOS) (-2 NOUNPlNomIndef) (-1 CLB) (1 CLB OR EOS);
    #минек литературань фондтнэсэ улить романт, [поэмат], драмат.

MAP (@SUBJ>) TARGET PronPersSg1Nom IF (*1 VfinVsg1 BARRIER CLB OR EOS);
MAP (@SUBJ>) TARGET PronPersSg2Nom IF (*1 VfinVsg2 BARRIER CLB OR EOS);
MAP (@SUBJ>) TARGET SUBJECTCANDIDATESG3 IF (*1 VFINSG3SUBJ BARRIER CLB OR EOS);
MAP (@SUBJ>) TARGET NOUNPlNomIndef IF (*1 VFINPL3SUBJ BARRIER CLB OR BOS) (NOT *0 SUBJECTCANDIDATEPL3 BARRIER CLB OR BOS OR EOS);
MAP (@SUBJ>) TARGET PronPersPl1Nom IF (*1 VfinVpl1 BARRIER CLB OR EOS);
MAP (@SUBJ>) TARGET PronPersPl2Nom IF (*1 VfinVpl2 BARRIER CLB OR EOS);
MAP (@SUBJ>) TARGET SUBJECTCANDIDATEPL3 IF (*1 VFINPL3SUBJ BARRIER CLB OR EOS);

# алтазель ине октябрясь
#SUBJECTCANDIDATESG3
# was @COP<SUBJ
MAP (@<SUBJ) TARGET SUBJECTCANDIDATESG3 IF (*-1 NONVSG3 OR ADVLPREDCASESSG3 BARRIER CLB OR BOS);
#MAP (@<SUBJ) TARGET PronRelSgNomDef OR PNOUNSgNomDef OR NOUNSgNomDef OR NAdjSgNomDef IF (*-1 NONVSG3 BARRIER CLB OR BOS);
# was @COPSUBJ>
MAP (@SUBJ>) TARGET SUBJECTCANDIDATESG3 IF (*1 NONVSG3 OR ADVLPREDCASESSG3 BARRIER CLB OR EOS);
MAP (@SUBJ>) TARGET SUBJECTCANDIDATESG3 IF (1 ("-")) (*2 NONVSG3 OR ADVLPREDCASESSG3 BARRIER CLB OR EOS);

# was @COP<SUBJ
MAP (@<SUBJ) TARGET SUBJECTCANDIDATEPL3 IF (*-1 NONVPL3 OR ADVLPREDCASESPL3 BARRIER CLB OR BOS);
# was @COPSUBJ>
MAP (@SUBJ>) TARGET SUBJECTCANDIDATEPL3 IF (*1 NONVPL3 OR ADVLPREDCASESPL3 BARRIER CLB OR EOS);
MAP (@SUBJ>) TARGET SUBJECTCANDIDATEPL3 IF (1 ("-")) (*2 NONVPL3 OR ADVLPREDCASESPL3 BARRIER CLB OR EOS);

# аволь ансяк сюпавчить кандсь од эрямось
MAP (@<SUBJ) TARGET NAdjSgNomDef OR NOUNSgNomDef OR PNOUNSgNomDef OR NPropSgNomIndef OR NOUNSgNomPxSg3 OR PronRelSgNomIndef IF (*-1 VFINSG3SUBJ BARRIER CLB OR BOS);
MAP (@SUBJ>) TARGET SUBJECTCANDIDATESG3 OR NPropSgNomIndef OR NOUNSgNomPxSg3 OR PronRelSgNomIndef IF (*1 VFINSG3SUBJ OR (neg:ARAS) BARRIER CLB OR EOS);
    # , пекезэ арась, пулозо ули, ...
MAP (@SUBJ>) TARGET NAdjSgNomIndef IF (1 (neg:ARAS));
    #тени анцик кархчак арась.

#Пек уш шчастливый тонть стирсь.
#How to define a noun phrase:
# тонть ... стирсь: pron:pers nsg cx:gen pxsg2 ... n def nsg cx:nom
# beginning in pron:pers nsg cx:gen pxsg2
# middle: AJJSgNomIndef
# ending in SgNomDef


MAP (@<SUBJ) TARGET NAdjPlNomDef OR NOUNPlNomDef OR PNOUNPlNomDef OR PronRelPlNomIndef IF (*-1 VFINPL3SUBJ BARRIER CLB OR BOS);
MAP (@SUBJ>) TARGET NAdjPlNomDef OR NOUNPlNomDef OR PNOUNPlNomDef OR PronRelPlNomIndef IF (*1 VFINPL3SUBJ BARRIER CLB OR EOS);


# 11->44318
# Pirgime _inazur_ (Konig Pirgime)
#MAP (@<NGR) TARGET NAdjNom IF (-1 NPropNom)
#                              (NOT 1 PostpNoPX);
# NOUNNom? 2021-09-30



###############################################################################
#
# Determine Pronouns as @SUBJ + Verb
#
###############################################################################

# 11->39598
# Ich ... mache (mon tejan)
MAP (@+FMAINV) TARGET VfinVsg1 IF (*0 PronPersSgNom BARRIER CLB);
MAP (@SUBJ>) TARGET PronPersSgNom IF (*0 VfinVsg1 BARRIER CLB)
                                    (NOT 1 Infinitives)
                                    (NOT 1 PostpNoPX);
MAP (@<SUBJ) TARGET PronPersSgNom IF (*-1 VfinVsg1 BARRIER CLB);

# 11->39636
# Was wirst du mir guten thun. (...ton tejat...)
MAP (@+FMAINV) TARGET VfinVsg2 IF (*0 PronPersSgNom BARRIER CLB);
MAP (@SUBJ>) TARGET PronPersSgNom IF (*1 VfinVsg2 BARRIER CLB)
                                    (NOT 1 Infinitives)
                                    (NOT 1 PostpNoPX);

MAP (@<SUBJ) TARGET PronPersSgNom IF (*-1 VfinVsg2 BARRIER CLB);

# 11->
#
MAP (@+FMAINV) TARGET VfinVsg3 IF (*0 PronPersSg3Nom BARRIER CLB);
MAP (@SUBJ>) TARGET PronPersSg3Nom IF (*1 VFINSG3SUBJ BARRIER CLB)
                                    (NOT 1 Infinitives)
                                    (NOT 1 PostpNoPX);
MAP (@<SUBJ) TARGET PronPersSg3Nom IF (*-1 VFINSG3SUBJ BARRIER CLB);

#
MAP (@+FMAINV) TARGET VfinVpl3 IF (*0 PronPersPl3Nom BARRIER CLB);
MAP (@SUBJ>) TARGET SUBJECTCANDIDATEPL3 IF (*1 VFINPL3SUBJ BARRIER CLB)
                                    (NOT 1 Infinitives)
                                    (NOT 1 PostpNoPX);
MAP (@<SUBJ) TARGET SUBJECTCANDIDATEPL3 IF (*-1 VFINPL3SUBJ BARRIER CLB);

# 11->44874
# Wenn _jemand_ euch _fragen_ wird (esli _*e_ _*evstadiz_ tin*)
MAP (@+FMAINV) TARGET VfinVsg3 IF (*0 PronIndefSgNom BARRIER CLB);
MAP (@SUBJ>) TARGET PronIndefSgNom IF (*1 VFINSG3SUBJ BARRIER CLB)
                                    (NOT 1 Infinitives)
                                     (NOT 1 PostpNoPX);
MAP (@<SUBJ) TARGET PronIndefSgNom IF (*-1 VFINSG3SUBJ BARRIER CLB);

# 11->777
# Wir ... wollen
MAP (@+FMAINV) TARGET ScPl1 IF (*0 PronPersPl1NomNoCop OR PronReflPl1NomNoCop BARRIER CLB);
MAP (@SUBJ>) TARGET PronPersPl1NomNoCop OR PronReflPl1NomNoCop IF (1* ScPl1 BARRIER CLB)
                                    (NOT 1 Infinitives)
                                    (NOT 1 PostpNoPX);
MAP (@<SUBJ) TARGET PronPersPl1NomNoCop OR PronReflPl1NomNoCop IF (-1* ScPl1 BARRIER CLB)
                                    (NOT 1 Infinitives)
                                    (NOT 1 PostpNoPX);
#PronPersPl3NomNoCop PronReflPl3NomNoCop  
# 11->
# You (Ihr)
MAP (@+FMAINV) TARGET ScPl2 IF (*0 PronPersPl2NomNoCop OR PronReflPl2NomNoCop BARRIER CLB);
MAP (@SUBJ>) TARGET PronPersPl2NomNoCop OR PronReflPl2NomNoCop IF (1* ScPl2 BARRIER CLB)
                                    (NOT 1 Infinitives)
                                    (NOT 1 PostpNoPX);
MAP (@<SUBJ) TARGET PronPersPl2NomNoCop OR PronReflPl2NomNoCop IF (-1* ScPl2 BARRIER CLB)
                                    (NOT 1 Infinitives)
                                    (NOT 1 PostpNoPX);

# 11->
# They ?VFINPL3SUBJ 
MAP (@+FMAINV) TARGET ScPl3 IF (*0 PronPersPl3NomNoCop OR PronReflPl3NomNoCop BARRIER CLB);
MAP (@SUBJ>) TARGET PronPersPl3Nom OR PronReflPl3NomNoCop IF (1* ScPl3 BARRIER CLB)
                                    (NOT 1 Infinitives)
                                    (NOT 1 PostpNoPX);
MAP (@<SUBJ) TARGET PronPersPl3Nom OR PronReflPl3NomNoCop IF (-1* ScPl3 BARRIER CLB)
                                    (NOT 1 Infinitives)
                                    (NOT 1 PostpNoPX);

MAP (@+FMAINV) TARGET VfinVpl3 IF (*0 PronIndefPlNom BARRIER CLB);
MAP (@SUBJ>) TARGET PronIndefPlNom IF (1* ScPl3 BARRIER CLB)
                                     (NOT 1 Infinitives)
                                     (NOT 1 PostpNoPX);
MAP (@<SUBJ) TARGET PronIndefPlNom IF (-1* ScPl3 BARRIER CLB)
                                     (NOT 1 Infinitives)
                                     (NOT 1 PostpNoPX);

# dsg3
MAP (@+FMAINV) TARGET VfinIndScSgOcSP IF (*0 PronPersSgNom BARRIER CLB);
MAP (@SUBJ>) TARGET PronPersSg1NomNoCop IF (*1 ScSg1 BARRIER CLB OR EOS OR CConj) (NOT *-1  ScSg1 BARRIER CLB OR EOS OR CConj);
MAP (@<SUBJ) TARGET PronPersSg1Nom IF (*-1 ScSg1 BARRIER CLB OR EOS OR CConj) (NOT *1  ScSg1 BARRIER CLB OR EOS OR CConj);

MAP (@SUBJ>) TARGET PronPersSg1Nom IF (*1 ScSg2 BARRIER CLB OR EOS OR CConj) (NOT *-1  ScSg2 BARRIER CLB OR EOS OR CConj);
MAP (@<SUBJ) TARGET PronPersSg1Nom IF (*-1 ScSg2 BARRIER CLB OR EOS OR CConj) (NOT *1  ScSg2 BARRIER CLB OR EOS OR CConj);

MAP (@SUBJ>) TARGET PronPersSg1Nom IF (*1 ScSg3 BARRIER CLB OR EOS OR CConj) (NOT *-1  ScSg3 BARRIER CLB OR EOS OR CConj);
MAP (@<SUBJ) TARGET PronPersSg1Nom IF (*-1 ScSg3 BARRIER CLB OR EOS OR CConj) (NOT *1  ScSg3 BARRIER CLB OR EOS OR CConj);

MAP (@SUBJ>) TARGET PronPersSg1Nom IF (*1 ScPl1 BARRIER CLB OR EOS OR CConj) (NOT *-1  ScPl1 BARRIER CLB OR EOS OR CConj);
MAP (@<SUBJ) TARGET PronPersSg1Nom IF (*-1 ScPl1 BARRIER CLB OR EOS OR CConj) (NOT *1  ScPl1 BARRIER CLB OR EOS OR CConj);

MAP (@SUBJ>) TARGET PronPersSg1Nom IF (*1 ScPl2 BARRIER CLB OR EOS OR CConj) (NOT *-1  ScPl2 BARRIER CLB OR EOS OR CConj);
MAP (@<SUBJ) TARGET PronPersSg1Nom IF (*-1 ScPl2 BARRIER CLB OR EOS OR CConj) (NOT *1  ScPl2 BARRIER CLB OR EOS OR CConj);

MAP (@SUBJ>) TARGET PronPersSg1Nom IF (*1 ScPl3 BARRIER CLB OR EOS OR CConj) (NOT *-1  ScPl3 BARRIER CLB OR EOS OR CConj);
MAP (@<SUBJ) TARGET PronPersSg1Nom IF (*-1 ScPl3 BARRIER CLB OR EOS OR CConj) (NOT *1  ScPl3 BARRIER CLB OR EOS OR CConj);


MAP (@SUBJ) TARGET PronPersSgNom IF (*0 VfinIndScSgOcSP BARRIER CLB)
                                    (NOT 1 Infinitives)
                                    (NOT 1 PostpNoPX);

MAP (@+FMAINV) TARGET VfinIndScSgOcSP IF (*0 PronIndefSgNom BARRIER CLB);
MAP (@SUBJ) TARGET PronIndefSgNom IF (*0 VfinIndScSgOcSP BARRIER CLB)
                                     (NOT 1 Infinitives)
                                     (NOT 1 PostpNoPX);

# dpl3
MAP (@+FMAINV) TARGET VfinIndScPlOcSP IF (*0 PronPersPlNom BARRIER CLB);
MAP (@SUBJ) TARGET PronPersPlNom IF (*0 VfinIndScPlOcSP BARRIER CLB)
                                    (NOT 1 Infinitives)
                                    (NOT 1 PostpNoPX);

MAP (@+FMAINV) TARGET VfinIndScPlOcSP IF (*0 PronIndefPlNom BARRIER CLB);
MAP (@SUBJ) TARGET PronIndefPlNom IF (*0 VfinIndScPlOcSP BARRIER CLB)
                                     (NOT 1 Infinitives)
                                     (NOT 1 PostpNoPX);

#
MAP (@+FMAINV) TARGET VfinPretSIVpl3;
MAP (@+FMAINV) TARGET VfinPretSIVpl3Cpound;
MAP (@+FMAINV) TARGET VfinImperD2O3;



###############################################################################
#
# Nouns as @SUBJ
#
###############################################################################

# vsg3
MAP (@+FMAINV) TARGET VfinVsg3 IF (*0 NAdjSgNom OR NOUNSgNom BARRIER CLB)(NOT *0 ("бути") OR Cond OR CondConj BARRIER CLB OR EOS OR BOS);

MAP (@SUBJ>) TARGET NAdjSgNom OR NOUNSgNom IF (-2 NOUNSgNom) (-1 CConj) (*1 VfinVpl3 BARRIER CLB);
MAP (@SUBJ>) TARGET NAdjSgNom OR NOUNSgNom IF (1 CConj) (2 NOUNSgNom) (*3 VfinVpl3 BARRIER CLB);

MAP (@SUBJ>) TARGET NAdjSgNom OR NOUNSgNom IF (*1 VfinVsg3 BARRIER CLB)
                                (NEGATE *0 @SUBJ BARRIER CLB)
                                (NEGATE *1 PronNom BARRIER CLB)
                                (NOT 1 Infinitives)
                                (NOT 1 NAdjSgNom OR NOUNSgNom)
                                (NOT 1 PostpNoPX);
MAP (@<SUBJ) TARGET NAdjSgNom OR NOUNSgNom IF (*-1 VfinVsg3 BARRIER CLB)
                                (NEGATE *0 @SUBJ BARRIER CLB)
                                (NEGATE *1 PronNom BARRIER CLB)
                                (NOT 1 Infinitives)
                                (NOT 1 NAdjSgNom OR NOUNSgNom)
                                (NOT 1 PostpNoPX);

MAP (@SUBJ) TARGET NAdjSgNom OR NOUNSgNom IF (*0 VfinVsg3 BARRIER CLB)
                                (NEGATE *0 @SUBJ BARRIER CLB)
                                (NEGATE *1 PronNom BARRIER CLB)
                                (NOT 1 Infinitives)
                                (NOT 1 NAdjSgNom OR NOUNSgNom)
                                (NOT 1 PostpNoPX);

# vpl3
MAP (@+FMAINV) TARGET VfinVpl3 IF (*0 NAdjPlNom OR NOUNPlNom BARRIER CLB);
MAP (@SUBJ) TARGET NAdjPlNom OR NOUNPlNom IF (*0 VfinVpl3 BARRIER CLB)
                                (NEGATE *0 @SUBJ BARRIER CLB)
                                (NEGATE *1 PronNom BARRIER CLB)
                                (NOT 1 Infinitives)
                                (NOT 1 NAdjPlNom OR NOUNPlNom)
                                (NOT 1 PostpNoPX);

# dsg3
MAP (@+FMAINV) TARGET VfinIndScSgOcSP IF (*0 NAdjSgNom OR NOUNSgNom BARRIER CLB);
MAP (@SUBJ>) TARGET NAdjSgNom OR NOUNSgNom IF (1* VFINSG3SUBJ BARRIER CLB OR EOS)
                                (NEGATE 0* @SUBJ BARRIER CLB OR BOS OR EOS)
                                (NEGATE 1* PronNom BARRIER CLB OR BOS OR EOS)
                                (NOT 1 Infinitives)
                                (NOT 1 PostpNoPX);

MAP (@<SUBJ) TARGET NAdjSgNom OR NOUNSgNom IF (-1* VFINSG3SUBJ BARRIER CLB OR BOS)
                                (NEGATE *0 @SUBJ BARRIER CLB OR BOS OR EOS)
                                (NEGATE 1* PronNom BARRIER CLB OR BOS OR EOS)
                                (NOT 1 Infinitives)
                                (NOT 1 PostpNoPX);

# dpl3
#MAP (@+FMAINV) TARGET VfinIndScPlOcSP IF (*0 NAdjPlNom OR NOUNPlNom BARRIER CLB OR EOS OR BOS);
MAP (@+FMAINV) TARGET VFINPL3SUBJ IF (*0 NAdjPlNom OR NOUNPlNom BARRIER CLB OR EOS OR BOS);
MAP (@SUBJ>) TARGET NAdjPlNom OR NOUNPlNom IF (*1 VFINPL3SUBJ BARRIER CLB OR EOS)
                                (NEGATE *0 @SUBJ BARRIER CLB OR EOS)
                                (NEGATE *1 PronNom BARRIER CLB OR EOS)
                                (NOT 1 Infinitives)
                                (NOT 1 PostpNoPX);

#MAP (@<SUBJ) TARGET NAdjPlNom OR NOUNPlNom IF (*-1 VfinIndScPlOcSP BARRIER CLB OR BOS)
MAP (@<SUBJ) TARGET NAdjPlNom OR NOUNPlNom IF (*-1 VFINPL3SUBJ BARRIER CLB OR BOS)
                                (NEGATE *0 @SUBJ BARRIER CLB)
                                (NEGATE *1 PronNom BARRIER CLB)
                                (NOT 1 Infinitives)
                                (NOT 1 PostpNoPX);

MAP (@SUBJ) TARGET NAdjPlNom OR NOUNPlNom IF (*0 VfinIndScPlOcSP BARRIER CLB)
                                (NEGATE *0 @SUBJ BARRIER CLB)
                                (NEGATE *1 PronNom BARRIER CLB)
                                (NOT 1 Infinitives)
                                (NOT 1 PostpNoPX);

# 11->44565
# sollst du nicht viel sprechen (ton la korta)
# v2
MAP (@SUBJ) TARGET PronPersSgNom IF (*0 ImperOptatV2Sg BARRIER CLB);
MAP (@+FMAINV) TARGET ImperOptatV2Sg IF (*0 PronPersSgNom BARRIER CLB);

MAP (@SUBJ) TARGET PronPersPlNom IF (*0 ImperOptatV2Pl BARRIER CLB);
MAP (@+FMAINV) TARGET ImperOptatV2Pl IF (*0 PronPersPlNom BARRIER CLB);

# v3
MAP (@SUBJ) TARGET PronPersSgNom IF (*0 ImperOptatV2Sg BARRIER CLB);
MAP (@+FMAINV) TARGET ImperOptatV2Sg IF (*0 PronPersSgNom BARRIER CLB);

MAP (@SUBJ) TARGET PronPersPlNom IF (*0 ImperOptatV2Pl BARRIER CLB);
MAP (@+FMAINV) TARGET ImperOptatV2Pl IF (*0 PronPersPlNom BARRIER CLB);

# dsg1-3
MAP (@SUBJ) TARGET PronPersSgNom IF (*0 ImperOptatXXSg BARRIER CLB);
MAP (@+FMAINV) TARGET ImperOptatXXSg IF (*0 PronPersSgNom BARRIER CLB);

MAP (@SUBJ) TARGET PronPersPlNom IF (*0 ImperOptatXXPl BARRIER CLB);
MAP (@+FMAINV) TARGET ImperOptatXXPl IF (*0 PronPersPlNom BARRIER CLB);

#
MAP (@SUBJ) TARGET NAdjSgNomPxSg2 OR NOUNSgNomPxSg2 IF (NOT 1 Infinitives);
MAP (@SUBJ) TARGET NAdjSgNomPxSg3 OR NOUNSgNomPxSg3 IF (NOT 1 Infinitives);
MAP (@SUBJ) TARGET NAdjPlNomPxSg2 OR NOUNPlNomPxSg2 IF (NOT 1 Infinitives);
MAP (@SUBJ) TARGET NAdjPlNomPxSg3 OR NOUNPlNomPxSg3 IF (NOT 1 Infinitives);
MAP (@SUBJ) TARGET NAdjPlNomPxPl2 OR NOUNPlNomPxPl2 IF (NOT 1 Infinitives);
MAP (@SUBJ) TARGET NAdjPlNomPxPl3 OR NOUNPlNomPxPl3 IF (NOT 1 Infinitives);
MAP (@SUBJ) TARGET Ptcp1DefPlNom IF (NOT 1 Infinitives);
MAP (@SUBJ) TARGET NAdjNomNplUnclearRussPx OR NOUNNomNplUnclearRussPx IF (NOT 1 Infinitives);





###############################################################################
#
# If there is no Noun (TODO: or Pronoun), only Verb.
#
###############################################################################

# 11->41594
# . sagt (er), (, _korte_ ,)
MAP (@+FMAINV) TARGET VfinVsg1 IF (NEGATE *0 PronNNom BARRIER CLB);
MAP (@+FMAINV) TARGET VfinVsg2 IF (NEGATE *0 PronNNom BARRIER CLB);
MAP (@+FMAINV) TARGET VfinVsg3 IF (NEGATE *0 PronNNom BARRIER CLB);
MAP (@+FMAINV) TARGET VfinVpl1 IF (NEGATE *0 PronNNom BARRIER CLB);
MAP (@+FMAINV) TARGET VfinVpl2 IF (NEGATE *0 PronNNom BARRIER CLB);
MAP (@+FMAINV) TARGET VfinVpl3 IF (NEGATE *0 PronNNom BARRIER CLB);

MAP (@+FMAINV) TARGET VfinIndScSgOcSP IF (NEGATE *0 PronNNom BARRIER CLB);
MAP (@+FMAINV) TARGET VfinIndScPlOcSP IF (NEGATE *0 PronNNom BARRIER CLB);





###############################################################################
#
# Determine Verbs as @+FMAINV
#
###############################################################################

# 11->39557
# Der Fuchs sagt him (rivezs _korte_ sondenze)
# 11->39617
# Der schone Damai sagt him (mazi damajs _korte) sondenze)
MAP (@+FMAINV) TARGET VfinVsg3 IF (*-1 NNom BARRIER CLB);

# 11->41607
# Die Hirten antworten (, pastuxne _jofnit_ ,)
MAP (@+FMAINV) TARGET VfinVpl3 IF (*-1 NNom BARRIER CLB);

# 11->39628
# Wenn ich dich nicht toten werde, (at _taraftan_)
MAP (@+FMAINV) TARGET VfinInd12; # IF (NOT *-1 NNom BARRIER CLB);

# 11->41665
# ... hat (er) hinter sich gelassen (suvadbat vasuv udalu _kadize_)
MAP (@+FMAINV) TARGET VfinInd33; # IF (NOT *-1 NNom BARRIER CLB);
MAP (@+FMAINV) TARGET VfinVpl1 IF (NEGATE *0 @+FMAINV BARRIER CLB)
                                  (NEGATE *0 @SUBJ BARRIER CLB);

# 11->70
# Verzeihe (_makstaja_ proscenija)
MAP (@+FMAINV) TARGET VfinImperV2Sg;
MAP (@+FMAINV) TARGET VfinImperV2Pl;





###############################################################################
#
# Determine Gerunds of converbs
#
###############################################################################

#(@-F<ADVL) InfinitiveElaPxSg1 = (inf/verbnMO/ME/MU/M nsg cx:ela pxsg1);
# GerElaPxSg3 = (infMS/ME cx:ela pxsg3) (Ger Ela PxSg3);
MAP (@-F<ADVL) TARGET AllGerEla IF (*-1 VFINPERSONSUBJ BARRIER EOS OR CLB)
    	       	      		(NOT *1 VFINPERSONSUBJ BARRIER EOS OR CLB);

MAP (@-F<ADVL) TARGET SPELA IF
    	    	   	     (*-1 SCONJSHTOBU LINK 1 (V TV Inf Loc) OR (V TV Inf) OR (infMS/ME cx:nom) OR NONFINITES) (NOT *0 VFIN BARRIER CLB OR BOS OR EOS);

MAP (@-FADVL>) TARGET (infMS/ME cx:ela) OR (inf/verbnMO/ME/MU/M indf nsg cx:ela) OR (Ger Ela) IF (*1 vfin BARRIER EOS OR CLB)
    	       	      		(NOT *-1 vfin BARRIER BOS OR CLB);

MAP (@-FADVL>) TARGET Adv IF (1 SupLoc OR (Inf Loc));
    	       #видестэ-парсте: Сон лезды тенек природанть видестэ-парсте чарькодеме.

# more work needed 2022-02-03
# сась симемстэ, паряк ярсамсто
# <симемстэ> has @-F<ADVL, so we need to transfer this to <ярсамсто>
MAP (@-F<ADVL) TARGET (infMS/ME cx:ela) OR (inf/verbnMO/ME/MU/M indf nsg cx:ela) OR (Ger Ela) IF (-1 CLB)
    	       	  (-2 @-F<ADVL);
MAP (@-F<ADVL) TARGET (infMS/ME cx:ela) OR (inf/verbnMO/ME/MU/M indf nsg cx:ela) OR (Ger Ela) IF (-2 CLB)
    	       	  (-3 @-F<ADVL);
MAP (@-F<ADVL) TARGET (infMS/ME cx:ela) OR (inf/verbnMO/ME/MU/M indf nsg cx:ela) OR (Ger Ela) IF (-3 CLB)
    	       	  (-4 @-F<ADVL);

MAP (@-FADVL>) TARGET NOUNSPDAT IF (1 NONFINITES);

# 2022-02-03 default
MAP (@-FADVL) TARGET (infMS/ME cx:ela) OR (inf/verbnMO/ME/MU/M indf nsg cx:ela\
) OR (Ger Ela);

###############################################################################
#
# Determine Infinitives and other verbs
#
###############################################################################

# @-FMAINV: only non-finite verbal forms can have this label. The list of possible mor tags:
# infMS/ME 
# inf-ptcpMA = VOblig
# inf/verbnMO/ME/MU/M = 
# inf/verbn/agptcpMA
# ptcp1
# ptcp2
# ptcp3
# ptcp4


# was FMAINV-nonverb
MAP (@SPRED) TARGET NONVPERSON OR VOblig; # from @PRED 2023_02_23
    	    # everything but Prs ScSg3

MAP (@SPRED) TARGET GerOzj IF (NOT *0 VFIN OR VTEMP BARRIER CLB OR BOS OR EOS OR CConj); # from @PRED 2023_02_23
    #Максим Алексеевич, тыненк максозь генераль-полковникень лем.
MAP (@SPRED) TARGET PrfPrcF IF (NEGATE *0 VFIN OR VTEMP BARRIER CLB OR BOS OR EOS OR CConj); # from @PRED 2023_02_23
    #moksha: стаки пезфоль синтьф налть пец.



MAP (@>N) TARGET PrfPrcF IF (*0 VFIN OR VTEMP BARRIER CLB OR BOS OR EOS OR CConj) (1 N);
    # , пандсть кяж пяяртьф верть и сельмоветтнень
    #needs саф: ичкоздень вастста саф ногайхне, ногай паластонга
    
MAP (@-FMAINV) TARGET ptcp4;


#
#MAP (@-FMAINV) TARGET InfinitiveNom;
MAP (@-FMAINV) TARGET VINF;


#
MAP (@-FMAINV) TARGET InfinitiveElaPxSg1;



###############################################################################



# MOVE IT SOMEWHERE ELSE
# 11->44575
# wirst du viel sprechen (lama _la_ kortat)
MAP (@+FMAINV) TARGET ImperOptatV2Sg IF (NEGATE *0 PronPersSgNom BARRIER CLB);
MAP (@+FMAINV) TARGET ImperOptatV2Pl IF (NEGATE *0 PronPersPlNom BARRIER CLB);




###############################################################################
#
# If there are no Verbs or other cases
#
###############################################################################

MAP (@SPRED) TARGET NGen IF (1 CLB OR EOS)
                            (*-1 PronNNom)
                            (NEGATE *0 V);

# hmm, what are these for? non-verbal predication Copula
MAP (@SPRED) TARGET NAdjGenDerNSgIndf OR AJJGenDerNSgIndf OR NOUNGenDerNSgIndf; # from @PRED 2023_02_23
MAP (@SPRED) TARGET NAdjGenDerNPlIndf OR AJJGenDerNPlIndf OR NOUNGenDerNPlIndf; # from @PRED 2023_02_23


###############################################################################
#
# Objects
#
###############################################################################

#
MAP (@POSSESSOR) TARGET PronNGenWithoutProp IF (1 NAdjPxX OR NOUNPxX);
MAP (@POSSESSOR) TARGET NAdjNomPx OR NOUNNomPx IF (1 NAdjPxX OR NOUNPxX);


###############################################################################
#
# Vocatives Addressees
#
###############################################################################

MAP (@ADDR) TARGET NAdjSgNomIndef OR NOUNSgNomIndef IF (-1 ("<$,>")) (1 ("<$,>")) 
                                (-2 PronPersSgNom);

###############################################################################
#
# Non-finite arguments
#
###############################################################################

#MAP:-fobj> (@-FOBJ>) TARGET Acc (1 (TV VAbess) OR (TV Ger) OR (TV Actio Loc) OR 
#(TV PrfPrc) OR (TV Inf) LINK 0 SYN-V LINK NOT 1 Acc) (NEGATE *-1 TRANS-V BARRIER
# NOT-ADV-PCLE LINK NOT -1 Acc) ;
#кудонь кирди
MAP:-fobj> (@-FOBJ>) TARGET NOUNSPGenIndf (1 (AllNOMAG) OR (V TV Inf Loc) OR (infMS/ME cx:nom) OR (inf/verbnMO/ME/MU/M) OR (inf/verbn/agptcpMA));


MAP (@-F<OBJ) TARGET GENDEF IF (NOT 1 PostpNoPX)
    	    	   	     (*-1 (V TV Inf Loc) OR (V TV Inf) OR (infMS/ME cx:nom) OR (inf/verbnMO/ME/MU/M) OR (inf/verbn/agptcpMA) BARRIER CLB OR BOS);

MAP (@-F<OBJ) TARGET (Pl Nom Indef) IF
    	    	   	     (*-1 SCONJSHTOBU LINK 1 (V TV Inf Loc) OR (V TV Inf) OR (infMS/ME cx:nom) OR (inf/verbnMO/ME/MU/M) OR (inf/verbn/agptcpMA));

MAP:-f<objWhenBeforeComma-F<OBJ (@-F<OBJ) TARGET GENDEF IF (-2 (@-F<OBJ)) (-1 (",")) (1 (",") OR CLB OR EOS);
                             # карматано тонавтнеме моданть, веденть, воздухонть


###############################################################################
#
# Objects
#
###############################################################################

# 11->70
# Mache gesund -> Andrei
MAP (@+FMAINV) TARGET VfinImper23 IF (1 NPropGen);
MAP (@<ACC) TARGET NPropGen IF (-1 VfinImper23);

# 
MAP (@OBJ>) TARGET DefPl3Obj IF (*1 VOCPL3); #2022-01-26
    	    #конатнень теинзе минек народось

MAP (@OBJ>) TARGET PronPersSg2Gen IF (1 (","))(3 (",")) (4 VOCSG2);#
    #тонь: Кие истя тонь, Пустачей, тонавтынзеть?
MAP (@OBJ>) TARGET PronPersPl2Gen IF (1 (","))(3 (",")) (4 VOCPL2);#

MAP (@OBJ>) TARGET DefSg3Obj OR PronRelSPGenIndef OR PronRelSgGenDef IF (*1 VOCSG3 BARRIER CLB OR EOS)  (NEGATE 1 PostpNoPX);#OcSg3
    	    #историянть: человечествань историянть сюпалгавтызь олячис трудицятнень духовной мелест-бажамост нолдамонь опытсэнть...
	    # , конань азонкшнесазь средняй повольжень мокшэрзятнень ёткса.

MAP (@OBJ>) TARGET GENDEF IF (1 DATAUX) (2 (V Inf));
            #природанть эряви тонавтнемс
	    #REMOVE IV IF (-2 (Sg Gen Def) OR (Pl Gen Def))
	#             (-1 DATAUX) (0 (V Inf));

#FOR-VOCSG1
MAP (@<OBJ) TARGET PronPersSg1Gen IF (*-1 VOCSG1);
MAP (@<OBJ) TARGET PLOBJGEN IF (*-1 VOCPL3);
MAP (@<OBJ) TARGET SGOBJGEN IF (*-1 VOCSG3);

MAP (@<OBJ) TARGET OBJECTCANDIDATEPL3INDEF IF (*-1 VfinSCNOTPL3 BARRIER CLB OR BOS) (NOT *1 VfinSCNOTPL3 BARRIER CLB OR BOS);
MAP (@OBJ>) TARGET OBJECTCANDIDATEPL3INDEF IF (NOT *-1 VfinSCNOTPL3 BARRIER CLB OR BOS) (*1 VfinSCNOTPL3 BARRIER CLB OR BOS);
    #ятось сайсь колмо танковой ды пехотань зярыя [дивизият] фронтонь лия участкатнестэ.
    #The CConj has been removed, but some work might be needed when conjunctions operate at different levels.

# 11->44326
# Mit seiner Tochter (soncinze _stirt_ marta)
#MAP (@+FMAINV) TARGET VFIN IF (*1 PronNGen);
MAP (@<OBJ) TARGET PronNGen IF (NOT 0 NAdjSgGenIndf OR NOUNSgGenIndf)
                               (NOT 0 NAdjGenNplUnclearRussPxSg3 OR NOUNGenNplUnclearRussPxSg3)
                               (NOT 1 PostpNoPX)
                               (*-1 VfinSC); #2022-01-26
#                               (*-1 TVFIN);

MAP (@<OBJ) TARGET PronIndefSgNom IF (-1* VfinSC BARRIER CLB OR BOS) (NOT 1 PostpNoPX) (NOT 0* NOUNSPNomIndef);#is this too powerful? cалакшнить мезеяк

# 11->44897
# so antwortet: des schonen Damai (maze Damaijt joftada _sondenze_)
MAP (@+FMAINV) TARGET VfinImperV2Sg IF (1 PronPersSPDat);
MAP (@<IOBJ) TARGET PronPersSPDat IF (-1 VfinImperV2Sg);

MAP (@+FMAINV) TARGET VfinImperV2Pl IF (1 PronPersSPDat);
MAP (@<IOBJ) TARGET PronPersSPDat IF (-1 VfinImperV2Pl);



MAP (@+FMAINV) TARGET VfinImperV2Sg IF (1 NPropDat);
MAP (@<IOBJ) TARGET NPropDat IF (-1 VfinImperV2Sg);

MAP (@+FMAINV) TARGET VfinImperV2Pl IF (1 NPropDat);
MAP (@<IOBJ) TARGET NPropDat IF (-1 VfinImperV2Pl);

MAP (@+FMAINV) TARGET VfinImperV2Sg IF (1 NAdjDat OR NOUNDat);
MAP (@<IOBJ) TARGET NAdjDat OR NOUNDat IF (-1 VfinImperV2Sg);

MAP (@+FMAINV) TARGET VfinImperV2Pl IF (1 NAdjDat OR NOUNDat);
MAP (@<IOBJ) TARGET NAdjDat OR NOUNDat IF (-1 VfinImperV2Pl);








# 11->45093
# der Fuchs sag dem schonen Damai (rivizs korte maze _Damaijte_)
MAP (@<IOBJ) TARGET NPropDat IF (*-1 VFIN)
                               (NOT 0 NPropDatDef);

#
MAP (@<IOBJ) TARGET NAdjDat OR NOUNDat IF (*-1 VFIN)
                              (NOT 0 NAdjDat OR NOUNDat);







#
#MAP (@SUBJ) TARGET NNomIndef IF (1 Neg); What is [неть поздоровтне] 'these greetings' are not only for me
#This needs more definition
    #неть поздоровтне аволь ансяк монень, тыненкак, Николай Михайлович,
    #2022-04-08
MAP (@OBJ>) TARGET NNomIndef IF (1 CLB)
                          (2 Neg);

MAP (@<OBJ) TARGET NNomIndef IF (*-1 PREDForIndefSG3Obj BARRIER CLB OR BOS) (1 CLB OR EOS);
    # , иляка ветя ненавиства.
    #This was a problem, because "иля" neg:imper/optat was not listed as a finite
    #needed PREDForIndefSG3Obj

MAP (@OBJ>) TARGET NNomIndef IF (*1 PREDForIndef3ObjNot3Subj BARRIER CLB OR EOS OR CConj) ((-1 CLB OR BOS OR CConj) OR (NOT *-1 PREDForIndef3ObjNot3Subj BARRIER CLB OR BOS OR CConj));
MAP (@<OBJ) TARGET NNomIndef IF (*-1 PREDForIndef3ObjNot3Subj BARRIER  CLB OR BOS OR CConj) (NOT *1 PREDForIndef3ObjNot3Subj BARRIER CLB OR EOS OR CConj);



#
MAP (@OBJ>) TARGET NAdjSgNomGenPxSg2 OR NOUNSgNomGenPxSg2 IF (*1 VOCSG3 BARRIER CLB OR EOS OR @CVP ) (NOT 1 PostpNoPX);
MAP (@<OBJ) TARGET NAdjSgNomGenPxSg2 OR NOUNSgNomGenPxSg2 IF (*-1 VOCSG3 BARRIER CLB OR BOS OR @CVP ) (NOT 1 PostpNoPX);
#, мон нупонеть весе таргсесынь.
MAP (@OBJ) TARGET NAdjSgNomGenPxSg2 OR NOUNSgNomGenPxSg2 IF (NOT 1 PostpNoPX);

MAP (@OBJ>) TARGET NAdjPlNomGenPxSg2 OR NOUNPlNomGenPxSg2 IF (*1 VOCPL3 BARRIER CLB OR EOS OR @CVP ) (NOT 1 PostpNoPX);
MAP (@<OBJ) TARGET NAdjPlNomGenPxSg2 OR NOUNPlNomGenPxSg2 IF (*-1 VOCPL3 BARRIER CLB OR BOS OR @CVP ) (NOT 1 PostpNoPX);
MAP (@OBJ) TARGET NAdjPlNomGenPxSg2 OR NOUNPlNomGenPxSg2 IF (NOT 1 PostpNoPX);

MAP (@OBJ>) TARGET (pron:dem indf npl cx:gen) IF (*1 VOCPL3 BARRIER CLB OR EOS OR @CVP ) (NOT 1 PostpNoPX);
MAP (@<OBJ) TARGET (pron:dem indf npl cx:gen) IF (*-1 VOCPL3 BARRIER CLB OR BOS OR @CVP ) (NOT 1 PostpNoPX);
# Азё нень весе салыть ды пандо пряс ладсить,

MAP (@<OBJ) TARGET NAdjSgNomGenPxSg3 OR NOUNSgNomGenPxSg3 IF (-1* (Prt1 ScSg3) BARRIER CLB OR BOS) (NOT 1 PostpNoPX);
   # оймавтсь сон эсь прянзо.
MAP (@OBJ) TARGET NAdjSgNomGenPxSg3 OR NOUNSgNomGenPxSg3 IF (NOT 1 PostpNoPX);
MAP (@OBJ) TARGET NAdjPlNomGenPxSg3 OR NOUNPlNomGenPxSg3 IF (NOT 1 PostpNoPX);

MAP (@<OBJ) TARGET NAdjPlNomGenPxPl2 OR NOUNPlNomGenPxPl2 OR NOUNPlGenPxPl2 IF (-1* VSUBJCONJ OR VOCPL3) (NOT 1 PostpNoPX);#either
MAP (@<OBJ) TARGET NAdjPlNomGenPxPl2 OR NOUNPlNomGenPxPl2 OR NOUNSgGenPxPl2 IF (-1* VSUBJCONJ OR VOCSG3) (NOT 1 PostpNoPX);#
MAP (@OBJ>) TARGET NAdjPlNomGenPxPl2 OR NOUNPlNomGenPxPl2 OR NOUNPlGenPxPl2 IF (1* VSUBJCONJ OR VOCPL3) (NOT 1 PostpNoPX);#either
MAP (@OBJ>) TARGET NAdjPlNomGenPxPl2 OR NOUNPlNomGenPxPl2 OR NOUNSgGenPxPl2 IF (1* VSUBJCONJ OR VOCSG3) (NOT 1 PostpNoPX);#
MAP (@OBJ) TARGET NAdjPlNomGenPxPl2 OR NOUNPlNomGenPxPl2 IF (NOT 1 PostpNoPX);
MAP (@OBJ) TARGET NAdjPlNomGenPxPl3 OR NOUNPlNomGenPxPl3 IF (NOT 1 PostpNoPX);
MAP (@OBJ) TARGET Ptcp1DefPlGen IF (NOT 1 PostpNoPX);
MAP (@OBJ) TARGET PostpEzInePxSg2;
MAP (@OBJ) TARGET NumCard1IndfSgGenAkgroup IF (NOT 1 PostpNoPX);
MAP (@OBJ) TARGET NAdjSgNomGenPxSg1 OR NOUNSgNomGenPxSg1 IF (NOT 1 PostpNoPX);
MAP (@OBJ) TARGET NAdjPlNomGenPxSg1 OR NOUNPlNomGenPxSg1 IF (NOT 1 PostpNoPX);

MAP (@<OBJ) TARGET NAdjSgGenDef OR NOUNSgGenDef IF (-1* PREDForDefSG3Obj BARRIER CLB OR BOS) (NOT -1 CLB)  (1 CLB OR EOS);
MAP (@<OBJ) TARGET NAdjSgGenDef OR NOUNSgGenDef IF (-1* PREDForDefSG3Obj BARRIER CLB OR BOS) (NOT -1 CLB)  (NOT 1 PostpNoPX OR CLB) (NOT 1* PREDForDefSG3Obj BARRIER CLB OR EOS);

MAP (@OBJ>) TARGET NAdjSgGenDef OR NOUNSgGenDef IF (1* PREDForDefSG3Obj BARRIER CLB OR EOS) (NOT 1 CLB)  (-1 CLB OR BOS);
MAP (@OBJ>) TARGET NAdjSgGenDef OR NOUNSgGenDef IF (1* PREDForDefSG3Obj BARRIER CLB OR EOS) (NOT 1 CLB)  (NOT 1 PostpNoPX OR CLB) (NOT -1 CLB OR BOS) (NOT -1* PREDForDefSG3Obj BARRIER CLB OR BOS);
# predicate that can take sg3 def object
MAP (@OBJ) TARGET NAdjSgGenDef OR NOUNSgGenDef IF (NOT 1 PostpNoPX);

MAP (@<OBJ) TARGET NAdjPlGenDef OR NOUNPlGenDef IF (-1* PREDForDefPL3Obj BARRIER CLB OR BOS) (NOT -1 CLB)  (1 CLB OR EOS);
MAP (@<OBJ) TARGET NAdjPlGenDef OR NOUNPlGenDef IF (-1* PREDForDefPL3Obj BARRIER CLB OR BOS) (NOT -1 CLB)  (NOT 1 PostpNoPX OR CLB) (NOT 1* PREDForDefPL3Obj BARRIER CLB OR EOS);

MAP (@OBJ>) TARGET NAdjPlGenDef OR NOUNPlGenDef IF (1* PREDForDefPL3Obj BARRIER CLB OR EOS) (NOT 1 CLB)  (-1 CLB OR BOS);
MAP (@OBJ>) TARGET NAdjPlGenDef OR NOUNPlGenDef IF (1* PREDForDefPL3Obj BARRIER CLB OR EOS) (NOT 1 CLB)  (NOT 1 PostpNoPX OR CLB) (NOT -1 CLB OR BOS) (NOT -1* PREDForDefPL3Obj BARRIER CLB OR BOS);
MAP (@OBJ) TARGET NAdjPlGenDef OR NOUNPlGenDef IF (NOT 1 PostpNoPX);

#весе as a post Det
MAP:<n (@<N) TARGET VESENOMSG IF (-1 NSPNomGenPxNotSUBJ OR (pron:dem indf npl cx:gen));
#, мон нупонеть весе таргсесынь.

# сими ловсодо 2022-02-06
MAP (@<ADVL-partitive) TARGET NAdjSPAbl OR NOUNSPAbl IF (*-1 INGESTIONVABLARG BARRIER CLB OR BOS) (NOT *1 INGESTIONVABLARG BARRIER CLB OR EOS); #very limited abl object marking
#MAP (@<OBJ) TARGET NAdjSPAbl OR NOUNSPAbl IF (*-1 INGESTIONVABLARG BARRIER CLB OR BOS) (NOT *1 INGESTIONVABLARG BARRIER CLB OR EOS);


MAP (@ADVL-partitive>) TARGET NOUNSPAbl OR NAdjSPAbl IF (*1 INGESTIONVABLARG BARRIER CLB OR EOS); #very limited abl object marking
    # ловсодо сими
#MAP (@OBJ>) TARGET NOUNSPAbl OR NAdjSPAbl IF (*1 INGESTIONVABLARG BARRIER CLB OR EOS) (NOT *-1 INGESTIONVABLARG BARRIER CLB OR BOS); #very limited abl object marking

# After Ablative objects
MAP (@<ADVL) TARGET Abl IF (*-1 VFIN BARRIER CLB OR BOS);
MAP (@-F<ADVL) TARGET Abl IF (*-1 VINF BARRIER CLB OR BOS) (NOT *0 VFIN BARRIER CLB);
    #пувама сыре бабань кедте
MAP (@ADVL>) TARGET Abl IF (*1 VFIN BARRIER CLB OR BOS);
MAP (@-FADVL>) TARGET Abl IF (*1 VINF BARRIER CLB OR BOS) (NOT *0 VFIN BARRIER CLB);

# 2022-02-06 not even Mokša can deal with this
#MAP (@OBJ) TARGET InfinitiveAbl IF (1 VFIN);

MAP (@OBJ) TARGET InfinitiveGenPxSg2 IF (1 VFIN);
MAP (@OBJ) TARGET InfinitiveGenPxSg3 IF (1 VFIN);
MAP (@OBJ) TARGET InfinitiveElaPxSg1 IF (1 VFIN);

MAP (@OBJ) TARGET NAdjNomIndef OR NOUNNomIndef IF (1 VFIN);
MAP (@OBJ) TARGET NAdjNomIndef OR NOUNNomIndef IF (1 VINF);




###############################################################################
#
# Complement
#
###############################################################################

#
MAP (@>P) TARGET InfinitiveAbl IF (1 Po);
#No such thing MAP (@>P) TARGET InfinitiveElaPxSg1 IF (1 Postp);#what is this 2022-04-13







###############################################################################
#
# Pronouns
#
###############################################################################





###############################################################################
#
# Adverbials
#
###############################################################################

# 11->44645
# viel zu sprechen (_lamu_ kortams)
MAP (@ADVL>) TARGET AdvQuantity IF (1 V);
MAP (@<ADVL) TARGET AdvQuantity IF (-1 V);
    # should be @-FADVL>
    
MAP (@ADVL>) TARGET AdvQuantity IF (1 VINF)(NOT *0 VFIN BARRIER CLB OR EOS OR BOS);
    #стамбарнэ: Чувозь растениятнень стамбарнэ озавтомс сёвонень чакшс или жестень банкас.


# 11->44639
# sehr klug (_*e*_ *revij)
MAP (@ADVL>) TARGET AdvNEJgroup IF (1 N);
MAP (@ADJ1) TARGET NAdj OR A IF (-1 @ADVL>);

# 11->44992
# Der Fuchs lehrte alle Hirten so zu sagen... (tonaftinze _sta_ joftama)
MAP (@ADVL>) TARGET AdvPron IF (1 V);
MAP (@<ADVL) TARGET AdvPron IF (-1 V);

# 11->44498
# zuruckgekehrt (_*e*i_ velifc)
MAP (@ADVL>) TARGET AdvNEJgroup IF (1 V);

# 11->44518
# nun (tene)
MAP (@ADVL>) TARGET AdvNEJgroup IF (*1 MOOD-V);
MAP (@<ADVL) TARGET AdvNEJgroup IF (*-1 MOOD-V);

MAP (@<ADVL) TARGET Ill OR Lat IF (*-1 NONVCENTERS OR GerOzj BARRIER CLB OR BOS) (NOT *0 VFIN BARRIER CLB);# adverbials of non-verbal predicates
MAP (@ADVL>) TARGET Ill OR Lat IF (*1 NONVCENTERS OR GerOzj BARRIER CLB OR BOS) (NOT *0 VFIN BARRIER CLB);# adverbials of non-verbal predicates

MAP (@<ADVL) TARGET NOUNSPIne OR NAdjSPIne IF (*-1 MOOD-V OR NONVPERSON);
MAP (@ADVL>) TARGET NOUNSPIne OR NAdjSPIne IF (*1 MOOD-V);
#
MAP (@ADVL>) TARGET NOUNSPIne OR NAdjSPIne IF (*1 VFIN BARRIER CLB OR EOS);
MAP (@<ADVL) TARGET NOUNSPIne OR NAdjSPIne IF (*-1 VFIN BARRIER CLB OR BOS);


#
MAP (@<ADVL) TARGET NOUNSPAbl IF (*-1 VFIN BARRIER CLB OR BOS);
MAP (@ADVL>) TARGET NOUNSPAbl IF (*1 VFIN BARRIER CLB OR EOS);

MAP (@<ADVL) TARGET NAdjSgAblIndf IF (*-1 VFIN BARRIER CLB OR BOS);
MAP (@ADVL>) TARGET NAdjSgAblIndf IF (*1 VFIN BARRIER CLB OR BOS);

MAP (@<ADVL) TARGET NAdjPlAblIndf IF (*-1 VFIN BARRIER CLB OR BOS);
MAP (@ADVL>) TARGET NAdjPlAblIndf IF (*1 VFIN BARRIER CLB OR BOS);

MAP (@<ADVL) TARGET NPropAblIndf IF (*-1 VFIN BARRIER CLB OR BOS);;
MAP (@ADVL>) TARGET NPropAblIndf IF (*1 VFIN BARRIER CLB OR BOS);

#
MAP:VFIN<Ovse (@<ADVL) TARGET ("овсе") IF (*-1 VFIN BARRIER CLB OR BOS);
MAP:Ovse>VFIN (@ADVL>) TARGET ("овсе") IF (*1 VFIN BARRIER CLB OR EOS);

#
MAP (@<ADVL) TARGET NOUNSPIllIndf IF (*-1 VFIN BARRIER CLB OR BOS);
MAP (@ADVL>) TARGET NOUNSPIllIndf IF (*1 VFIN BARRIER CLB OR EOS);

MAP (@<ADVL) TARGET NAdjSgIllIndf IF (*-1 VFIN BARRIER CLB OR BOS);
MAP (@ADVL>) TARGET NAdjPlIllIndf IF (*1 VFIN BARRIER CLB OR EOS);


#
MAP (@<ADVL) TARGET NAdjSPLat OR NOUNSPLat IF (*-1 VFIN BARRIER CLB OR BOS);
MAP (@ADVL>) TARGET NAdjSPLat OR NOUNSPLat IF (*1 VFIN BARRIER CLB OR EOS);

#
MAP (@<ADVL) TARGET NPropDatIndef IF (*-1 VFIN BARRIER CLB OR BOS);
MAP (@ADVL>) TARGET NPropDatIndef IF (*1 VFIN BARRIER CLB OR EOS);
MAP (@<ADVL) TARGET NPropDatDef IF (*-1 VFIN BARRIER CLB OR BOS);
MAP (@ADVL>) TARGET NPropDatDef IF (*1 VFIN BARRIER CLB OR EOS);

#
MAP (@<ADVL) TARGET NAdjSgDatIndf IF (*-1 VFIN BARRIER CLB OR BOS);
MAP (@<ADVL) TARGET NAdjPlDatIndf IF (*-1 VFIN BARRIER CLB OR BOS);
MAP (@<ADVL) TARGET NOUNSPDatIndf IF (*-1 VFIN BARRIER CLB OR BOS);
MAP (@ADVL>) TARGET NAdjSgDatIndf IF (*1 VFIN BARRIER CLB OR EOS);
MAP (@ADVL>) TARGET NAdjPlDatIndf IF (*1 VFIN BARRIER CLB OR EOS);
MAP (@ADVL>) TARGET NOUNSPDatIndf IF (*1 VFIN BARRIER CLB OR EOS);

#
MAP (@<ADVL) TARGET NAdjSgDatDef OR NOUNSPDatDefPX IF (*-1 VFIN OR FAUXVERBS OR FNOTAUXVERBS BARRIER CLB OR BOS);
MAP (@ADVL>) TARGET NAdjSgDatDef OR NOUNSPDatDefPX IF (*1 VFIN OR FAUXVERBS OR FNOTAUXVERBS BARRIER CLB OR EOS);
MAP (@<ADVL) TARGET NAdjPlDatDef OR NOUNPlDatDef IF (*-1 VFIN BARRIER CLB OR BOS);
MAP (@ADVL>) TARGET NAdjPlDatDef OR NOUNPlDatDef IF (*1 VFIN BARRIER CLB OR EOS);


#
MAP (@<ADVL) TARGET PronPersSPDat  IF (*-1 VFIN OR @SPRED BARRIER CLB OR BOS); # from @PRED 2023_02_23
MAP (@ADVL>) TARGET PronPersSPDat IF (*1 VFIN OR @SPRED BARRIER CLB OR EOS); # from @PRED 2023_02_23
    #тыненк: Максим Алексеевич, тыненк максозь генераль-полковникень лем.

MAP (@<ADVL) TARGET PronPersSg1DatShort  IF (*-1 VFIN OR @SPRED BARRIER CLB OR BOS);
MAP (@ADVL>) TARGET PronPersSg1DatShort IF (*1 VFIN OR @SPRED BARRIER CLB OR EOS);

MAP (@<ADVL) TARGET PronPersPl1DatShort IF (*-1 VFIN OR @SPRED BARRIER CLB OR BOS);
MAP (@ADVL>) TARGET PronPersPl1DatShort IF (*1 VFIN OR @SPRED BARRIER CLB OR EOS);

MAP (@<ADVL) TARGET PronPersSg2DatShort IF (*-1 VFIN OR @SPRED BARRIER CLB OR BOS);
MAP (@ADVL>) TARGET PronPersSg2DatShort IF (*1 VFIN OR @SPRED BARRIER CLB OR EOS);

MAP (@<ADVL) TARGET PronPersPl2DatShort IF (*-1 VFIN OR @SPRED BARRIER CLB OR BOS);
MAP (@ADVL>) TARGET PronPersPl2DatShort IF (*1 VFIN OR @SPRED BARRIER CLB OR EOS);

MAP (@<ADVL) TARGET PronPersSg3DatShort IF (*-1 VFIN OR @SPRED BARRIER CLB OR BOS);
MAP (@ADVL>) TARGET PronPersSg3DatShort IF (*1 VFIN OR @SPRED BARRIER CLB OR EOS);

MAP (@<ADVL) TARGET PronPersPl3DatShort IF (*-1 VFIN OR @SPRED BARRIER CLB OR BOS);
MAP (@ADVL>) TARGET PronPersPl3DatShort IF (*1 VFIN OR @SPRED BARRIER CLB OR EOS);

#
MAP (@<ADVL) TARGET PostpElaPxSg2 IF (*-1 VFIN OR @SPRED BARRIER CLB OR BOS);
MAP (@ADVL>) TARGET PostpElaPxSg2 IF (*1 VFIN OR @SPRED BARRIER CLB OR EOS);

MAP (@<ADVL) TARGET PostpElaPxPl2 IF (*-1 VFIN OR @SPRED BARRIER CLB OR BOS);
MAP (@ADVL>) TARGET PostpElaPxPl2 IF (*1 VFIN OR @SPRED BARRIER CLB OR EOS);

#
MAP (@<ADVL) TARGET PostpIllPxSg1 IF (*-1 VFIN OR @SPRED BARRIER CLB OR BOS);
MAP (@ADVL>) TARGET PostpIllPxSg1 IF (*1 VFIN OR @SPRED BARRIER CLB OR BOS);

MAP (@<ADVL) TARGET PostpIllPxPl1 IF (*-1 VFIN OR @SPRED BARRIER CLB OR BOS);
MAP (@ADVL>) TARGET PostpIllPxPl1 IF (*1 VFIN OR @SPRED BARRIER CLB OR BOS);

MAP (@<ADVL) TARGET PostpIllPxSg2 IF (*-1 VFIN OR @SPRED BARRIER CLB OR BOS);
MAP (@ADVL>) TARGET PostpIllPxSg2 IF (*1 VFIN OR @SPRED BARRIER CLB OR BOS);

MAP (@<ADVL) TARGET PostpIllPxPl2 IF (*-1 VFIN OR @SPRED BARRIER CLB OR BOS);
MAP (@ADVL>) TARGET PostpIllPxPl2 IF (*1 VFIN OR @SPRED BARRIER CLB OR BOS);

MAP (@<ADVL) TARGET PostpIllPxSg3 IF (*-1 VFIN OR @SPRED BARRIER CLB OR BOS);
MAP (@ADVL>) TARGET PostpIllPxSg3 IF (*1 VFIN OR @SPRED BARRIER CLB OR BOS);

MAP (@<ADVL) TARGET PostpIllPxPl3 IF (*-1 VFIN OR @SPRED BARRIER CLB OR BOS);;
MAP (@ADVL>) TARGET PostpIllPxPl3 IF (*1 VFIN OR @SPRED BARRIER CLB OR BOS);

#
MAP (@<ADVL) TARGET PronPersSg1Dat IF (*-1 VFIN OR @SPRED BARRIER CLB OR BOS);;
MAP (@ADVL>) TARGET PronPersSg1Dat IF (*1 VFIN OR @SPRED BARRIER CLB OR BOS);

MAP (@<ADVL) TARGET PronPersSg2Dat IF (*-1 VFIN OR @SPRED BARRIER CLB OR BOS);;
MAP (@ADVL>) TARGET PronPersSg2Dat IF (*1 VFIN OR @SPRED BARRIER CLB OR BOS);

#
MAP (@<ADVL) TARGET NOUNSPInePX OR Ine IF (*-1 VFIN BARRIER CLB OR BOS);
MAP (@ADVL>) TARGET NOUNSPInePX OR Ine IF (*1 VFIN BARRIER CLB OR EOS);
#MAP (@ADVL) TARGET NAdjSgInePxSg3;
#MAP (@ADVL) TARGET NAdjPlInePxSg3;
#MAP (@ADVL) TARGET NAdjPlInePxPl3;

#
MAP (@<ADVL) TARGET NAdjIneNplUnclearRussPxSg3 IF (*-1 VFIN BARRIER CLB OR BOS);
MAP (@ADVL>) TARGET NAdjIneNplUnclearRussPxSg3 IF (*1 VFIN BARRIER CLB OR EOS);

MAP (@<ADVL) TARGET NOUNIneNplUnclearRussPxSg3 IF (*-1 VFIN BARRIER CLB OR BOS);
MAP (@ADVL>) TARGET NOUNIneNplUnclearRussPxSg3 IF (*1 VFIN BARRIER CLB OR EOS);

#
MAP (@<ADVL) TARGET Temp IF (*-1 VFIN BARRIER CLB OR BOS);
MAP (@ADVL>) TARGET Temp IF (*1 VFIN BARRIER CLB OR EOS);

#
MAP (@<ADVL) TARGET Ela OR NOUNSPElaPX IF (*-1 VFIN BARRIER CLB OR BOS OR ("ды"));
MAP (@ADVL>) TARGET Ela OR NOUNSPElaPX IF (*1 VFIN BARRIER CLB OR EOS OR ("ды"));

#
MAP (@<ADVL) TARGET NOUNSPIllPX IF (*-1 VFIN BARRIER CLB OR BOS);
MAP (@ADVL>) TARGET NOUNSPIllPX IF (*1 VFIN BARRIER CLB OR EOS);
MAP (@<ADVL) TARGET NAdjSgIllPxSg2 IF (*-1 VFIN BARRIER CLB OR BOS);
MAP (@ADVL>) TARGET NAdjSgIllPxSg2 IF (*1 VFIN BARRIER CLB OR EOS);

MAP (@<ADVL) TARGET NAdjPlIllPxSg2 IF (*-1 VFIN BARRIER CLB OR BOS);
MAP (@ADVL>) TARGET NAdjPlIllPxSg2 IF (*1 VFIN BARRIER CLB OR EOS);

#Inessive pred
MAP (@SPRED) TARGET PostpInePX OR NOUNSPInePX OR PostpPrlPX OR NOUNSPPrlPX IF (*0 SUBJECTCANDIDATESG3 OR NOUNSgNomIndef BARRIER CLB OR EOS OR BOS OR CConj) (NOT *0 VFIN BARRIER CLB OR EOS OR BOS OR CConj); # from @PRED 2023_02_23
    # , сиянь шапка [прясонзо], 
MAP (@SPRED) TARGET PostpInePX OR NOUNSPInePX OR PostpPrlPX OR NOUNSPPrlPX IF (*0 SUBJECTCANDIDATEPL3 OR NOUNPlNomIndef BARRIER CLB OR EOS OR BOS OR CConj) (NOT *0 VFIN BARRIER CLB OR EOS OR BOS OR CConj); # from @PRED 2023_02_23

MAP (@<ADVL) TARGET NAdjSgInePxSg2 IF (*-1 VFIN BARRIER CLB OR EOS);
MAP (@ADVL>) TARGET NAdjSgInePxSg2 IF (*1 VFIN BARRIER CLB OR EOS);
MAP (@<ADVL) TARGET NAdjPlInePxSg2 IF (*-1 VFIN BARRIER CLB OR EOS);
MAP (@ADVL>) TARGET NAdjPlInePxSg2 IF (*1 VFIN BARRIER CLB OR EOS);
MAP (@<ADVL) TARGET NOUNSPInePxSg2 OR NAdjSPInePxSg2 IF (*-1 VFIN BARRIER CLB OR EOS);
MAP (@ADVL>) TARGET NOUNSPInePxSg2 OR NAdjSPInePxSg2 IF (*1 VFIN BARRIER CLB OR EOS);

#
MAP (@<ADVL) TARGET PostpInePxSg2 IF (*-1 VFIN BARRIER CLB OR EOS);
MAP (@ADVL>) TARGET PostpInePxSg2 IF (*1 VFIN BARRIER CLB OR EOS);

MAP (@<ADVL) TARGET PostpInePxPl2 IF (*-1 VFIN BARRIER CLB OR EOS);
MAP (@ADVL>) TARGET PostpInePxPl2 IF (*1 VFIN BARRIER CLB OR EOS);

MAP (@<ADVL) TARGET PostpInePxSg3 IF (*-1 VFIN BARRIER CLB OR EOS);
MAP (@ADVL>) TARGET PostpInePxSg3 IF (*1 VFIN BARRIER CLB OR EOS);

MAP (@<ADVL) TARGET PostpInePxPl3 IF (*-1 VFIN BARRIER CLB OR EOS);
MAP (@ADVL>) TARGET PostpInePxPl3 IF (*1 VFIN BARRIER CLB OR EOS);

MAP:QntBecomeDetForNoun (@DET>) (adv:quantity) (1 @OBJ OR @SUBJ);
#
MAP (@<ADVL) TARGET PARJAK IF (-1* VFIN OR a-finpred BARRIER CLB OR BOS) (1 CLB OR EOS);
MAP (@<ADVL) TARGET PARJAK IF (-1* VFIN OR a-finpred BARRIER CLB OR BOS) (NOT 1 CLB OR EOS) (NOT 1* VFIN OR a-finpred BARRIER CLB OR EOS);
MAP (@ADVL>) TARGET PARJAK IF (1* VFIN OR a-finpred BARRIER CLB OR BOS) (1 CLB OR BOS);
MAP (@ADVL>) TARGET PARJAK IF (1* VFIN OR a-finpred BARRIER CLB OR BOS) (NOT 1 CLB OR BOS) (NOT -1* VFIN OR a-finpred BARRIER CLB OR BOS);

#MAP (@ADVL) TARGET Adv;

#
MAP (@<ADVL) TARGET PronIndefSgAbl IF (*-1 VFIN BARRIER CLB OR EOS);
MAP (@ADVL>) TARGET PronIndefSgAbl IF (*1 VFIN BARRIER CLB OR EOS);
MAP (@<ADVL) TARGET PronIndefPlAbl IF (*-1 VFIN BARRIER CLB OR EOS);
MAP (@ADVL>) TARGET PronIndefPlAbl IF (*1 VFIN BARRIER CLB OR EOS);

#
MAP (@<ADVL) TARGET PronPersSg1Abl IF (*-1 VFIN BARRIER CLB OR EOS);
MAP (@ADVL>) TARGET PronPersSg1Abl IF (*1 VFIN BARRIER CLB OR EOS);
MAP (@<ADVL) TARGET PronPersSg2Abl IF (*-1 VFIN BARRIER CLB OR EOS);
MAP (@ADVL>) TARGET PronPersSg2Abl IF (*1 VFIN BARRIER CLB OR EOS);

#
MAP (@<ADVL) TARGET PostpOtherLocal IF (*-1 VFIN BARRIER CLB OR EOS);
MAP (@ADVL>) TARGET PostpOtherLocal IF (*1 VFIN BARRIER CLB OR EOS);

#
MAP (@<SPRED) TARGET NumInstruktNPxSg1 IF (*-1 VfinVsg1 BARRIER CLB OR BOS);
MAP (@<SPRED) TARGET NumInstruktNPxSg2 IF (*-1 VfinVsg2 BARRIER CLB OR BOS);
MAP (@<SPRED) TARGET NumInstruktNPxSg3 IF (*-1 VfinVsg3 BARRIER CLB OR BOS);

MAP (@<SPRED) TARGET NumInstruktNPxPl1 IF (*-1 VfinVpl1 BARRIER CLB OR BOS);
MAP (@<SPRED) TARGET NumInstruktNPxPl2 IF (*-1 VfinVpl2 BARRIER CLB OR BOS);
MAP (@<SPRED) TARGET NumInstruktNPxPl3 IF (*-1 VfinVpl3 BARRIER CLB OR BOS);

MAP (@SPRED>) TARGET NumInstruktNPxSg1 IF (*1 VfinVsg1 BARRIER CLB OR EOS);
MAP (@SPRED>) TARGET NumInstruktNPxSg2 IF (*1 VfinVsg2 BARRIER CLB OR EOS);
MAP (@SPRED>) TARGET NumInstruktNPxSg3 IF (*1 VfinVsg3 BARRIER CLB OR EOS);

MAP (@SPRED>) TARGET NumInstruktNPxPl1 IF (*1 VfinVpl1 BARRIER CLB OR EOS);
MAP (@SPRED>) TARGET NumInstruktNPxPl2 IF (*1 VfinVpl2 BARRIER CLB OR EOS);
MAP (@SPRED>) TARGET NumInstruktNPxPl3 IF (*1 VfinVpl3 BARRIER CLB OR EOS);

#
MAP (@<ADVL) TARGET NAdjProlNplUnclearRussPxPl3 IF (*-1 VfinVpl3 BARRIER CLB OR EOS);
MAP (@ADVL>) TARGET NAdjProlNplUnclearRussPxPl3 IF (*1 VfinVpl3 BARRIER CLB OR EOS);
MAP (@<ADVL) TARGET NAdjSgDatPxSg3Akgroup IF (*-1 VfinVpl3 BARRIER CLB OR EOS);
MAP (@ADVL>) TARGET NAdjSgDatPxSg3Akgroup IF (*1 VfinVpl3 BARRIER CLB OR EOS);
MAP (@<ADVL) TARGET NOUNProlNplUnclearRussPxPl3 IF (*-1 VfinVpl3 BARRIER CLB OR EOS);
MAP (@ADVL>) TARGET NOUNProlNplUnclearRussPxPl3 IF (*1 VfinVpl3 BARRIER CLB OR EOS);
MAP (@<ADVL) TARGET NOUNSgDatPxSg3Akgroup IF (*-1 VfinVpl3 BARRIER CLB OR EOS);
MAP (@ADVL>) TARGET NOUNSgDatPxSg3Akgroup IF (*1 VfinVpl3 BARRIER CLB OR EOS);

#
MAP (@<ADVL) TARGET NAdjSgElaPxSg3 IF (*-1 VfinVpl3 BARRIER CLB OR EOS);
MAP (@ADVL>) TARGET NAdjSgElaPxSg3 IF (*1 VfinVpl3 BARRIER CLB OR EOS);
MAP (@<ADVL) TARGET NAdjPlElaPxSg3 IF (*-1 VfinVpl3 BARRIER CLB OR EOS);
MAP (@ADVL>) TARGET NAdjPlElaPxSg3 IF (*1 VfinVpl3 BARRIER CLB OR EOS);
MAP (@<ADVL) TARGET NOUNSPElaPxSg3 IF (*-1 VfinVpl3 BARRIER CLB OR EOS);
MAP (@ADVL>) TARGET NOUNSPElaPxSg3 IF (*1 VfinVpl3 BARRIER CLB OR EOS);
MAP (@<ADVL) TARGET NAdjPlElaPxPl3 IF (*-1 VfinVpl3 BARRIER CLB OR EOS);
MAP (@ADVL>) TARGET NAdjPlElaPxPl3 IF (*1 VfinVpl3 BARRIER CLB OR EOS);
MAP (@<ADVL) TARGET NOUNSPElaPxPl3 IF (*-1 VfinVpl3 BARRIER CLB OR EOS);
MAP (@ADVL>) TARGET NOUNSPElaPxPl3 IF (*1 VfinVpl3 BARRIER CLB OR EOS);

#
MAP (@<ADVL) TARGET NAdjSgPrlIndf IF (*-1 VfinVpl3 BARRIER CLB OR EOS);
MAP (@ADVL>) TARGET NAdjSgPrlIndf IF (*1 VfinVpl3 BARRIER CLB OR EOS);
MAP (@<ADVL) TARGET NAdjPlPrlIndf IF (*-1 VfinVpl3 BARRIER CLB OR EOS);
MAP (@ADVL>) TARGET NAdjPlPrlIndf IF (*1 VfinVpl3 BARRIER CLB OR EOS);
MAP (@<ADVL) TARGET NOUNSPPrlIndf IF (*-1 VfinVpl3 BARRIER CLB OR EOS);
MAP (@ADVL>) TARGET NOUNSPPrlIndf IF (*1 VfinVpl3 BARRIER CLB OR EOS);

#
MAP (@<ADVL) TARGET NAdjSgElaIndf IF (*-1 VfinVpl3 BARRIER CLB OR EOS);
MAP (@ADVL>) TARGET NAdjSgElaIndf IF (*1 VfinVpl3 BARRIER CLB OR EOS);
MAP (@<ADVL) TARGET NAdjPlElaIndf IF (*-1 VfinVpl3 BARRIER CLB OR EOS);
MAP (@ADVL>) TARGET NAdjPlElaIndf IF (*1 VfinVpl3 BARRIER CLB OR EOS);
MAP (@<ADVL) TARGET NOUNSPElaIndf IF (*-1 VfinVpl3 BARRIER CLB OR EOS);
MAP (@ADVL>) TARGET NOUNSPElaIndf IF (*1 VfinVpl3 BARRIER CLB OR EOS);

#
MAP (@<ADVL) TARGET NAdjSgAbeIndf IF (*-1 VfinVpl3 BARRIER CLB OR EOS);
MAP (@ADVL>) TARGET NAdjSgAbeIndf IF (*1 VfinVpl3 BARRIER CLB OR EOS);
MAP (@<ADVL) TARGET NAdjPlAbeIndf IF (*-1 VfinVpl3 BARRIER CLB OR EOS);
MAP (@ADVL>) TARGET NAdjPlAbeIndf IF (*1 VfinVpl3 BARRIER CLB OR EOS);
MAP (@<ADVL) TARGET NOUNSPAbeIndf IF (*-1 VfinVpl3 BARRIER CLB OR EOS);
MAP (@ADVL>) TARGET NOUNSPAbeIndf IF (*1 VfinVpl3 BARRIER CLB OR EOS);

#
MAP (@<ADVL) TARGET NAdjSgElaDef IF (*-1 VfinVpl3 BARRIER CLB OR EOS);
MAP (@ADVL>) TARGET NAdjSgElaDef IF (*1 VfinVpl3 BARRIER CLB OR EOS);
MAP (@<ADVL) TARGET NAdjPlElaDef IF (*-1 VfinVpl3 BARRIER CLB OR EOS);
MAP (@ADVL>) TARGET NAdjPlElaDef IF (*1 VfinVpl3 BARRIER CLB OR EOS);
MAP (@<ADVL) TARGET NOUNSgElaDef IF (*-1 VfinVpl3 BARRIER CLB OR EOS);
MAP (@ADVL>) TARGET NOUNSgElaDef IF (*1 VfinVpl3 BARRIER CLB OR EOS);
MAP (@<ADVL) TARGET NOUNPlElaDef IF (*-1 VfinVpl3 BARRIER CLB OR EOS);
MAP (@ADVL>) TARGET NOUNPlElaDef IF (*1 VfinVpl3 BARRIER CLB OR EOS);


## from @PRED 2023_02_23??FIXME
MAP (@PRED-ADVL) TARGET NAdjTranslIndfSg;
MAP (@PRED-ADVL) TARGET NAdjTranslIndfPl;
MAP (@PRED-ADVL) TARGET NOUNTranslIndfSP;

MAP (@PRED-ADVL) TARGET AgptcpMaIndfSgTransl;







# If postp/prep is still not marked, it is most probably and adverbial
MAP (@<ADVL) TARGET PostpPrep IF (*-1 VfinVpl3 BARRIER CLB OR EOS);
MAP (@ADVL>) TARGET PostpPrep IF (*1 VfinVpl3 BARRIER CLB OR EOS);





###############################################################################
#
# Addressing someone
#
###############################################################################

# 11->44782
# Oh ihr, Huhnerhirte, (ex tin, _sarazun pastuft_)
MAP (@ADDR) TARGET NAdjSgNom OR NOUNSgNom IF (-1 ("<$,>")) 
                                (-2 PronPersSgNom);
MAP (@SUBJ) TARGET PronPersSgNom IF (1 ("<$,>")) 
                                    (2 NAdjSgNom OR NOUNSgNom)
				    (NEGATE *0 @SUBJ BARRIER CLB);

MAP (@ADDR) TARGET NAdjSgNom OR NOUNSgNom IF (-2 ("<$,>")) 
                                (-3 PronPersSgNom);
MAP (@SUBJ) TARGET PronPersSgNom IF (1 ("<$,>")) 
                                    (3 NAdjSgNom OR NOUNSgNom)
				    (NEGATE *0 @SUBJ BARRIER CLB);

# subj with interum adv:modal followed by predicate
#txt="11206" snum="289" pnum="029"
# Тона кепединзе лавтовонзо: мон, келя, а чарькодян.
MAP (@SUBJ) TARGET PronPersSg1Nom IF (1 ("<$,>")) (2 (adv:modal)) (3 ("<$,>"))
                                    (*4 VfinVsg1 BARRIER CLB OR EOS) 
                                    (NEGATE *4 @SUBJ BARRIER CLB OR EOS) ;

# see vocatives, above
MAP (@SUBJ) TARGET PronPersSg2Nom IF (1 ("<$,>")) (2 Parenthetical OR NOUNNomIndef) (3 ("<$,>"))
                                    (*4 VfinVsg2 BARRIER CLB OR EOS) 
                                    (NEGATE *4 @SUBJ BARRIER CLB OR EOS) ;
# мекс тон, Павлуткин ялгай, кемат
MAP (@SUBJ) TARGET PronPersSg2Nom IF (1 ("<$,>")) (3 VOCATIVE OR NOUNNomIndef) (4 ("<$,>"))
                                    (*5 VfinVsg2 BARRIER CLB OR EOS) 
                                    (NEGATE *5 @SUBJ BARRIER CLB OR EOS) ;

#(1 COMMA LINK *1 COMMA BARRIER @CLAUSE LINK *1 N) ;
#SETPARENT:SetAppToLeftPron @APP-Pron< TO (*-1 COMMA BARRIER @CLAUSE LINK -1 Pron) ;
#MAP (@SUBJ) TARGET PronPersSg2Nom IF (1 Comma LINK *2 Comma BARRIER CLB OR EOS)
#    	    	   		     (NEGATE 1 Comma LINK *1 Comma @SUBJ BARRIER CLB OR EOS) ;




MAP (@ADDR) TARGET NAdjPlNom OR NOUNPlNom IF (-1 ("<$,>")) 
                                (-2 PronPersPlNom);
MAP (@SUBJ) TARGET PronPersPlNom IF (1 ("<$,>")) 
                                    (2 NAdjPlNom OR NOUNPlNom)
				    (NEGATE *0 @SUBJ BARRIER CLB);

MAP (@ADDR) TARGET NAdjPlNom OR NOUNPlNom IF (-2 ("<$,>")) 
                                (-3 PronPersPlNom);
MAP (@SUBJ) TARGET PronPersPlNom IF (1 ("<$,>")) 
                                    (3 NAdjPlNom OR NOUNPlNom)
				    (NEGATE *0 @SUBJ BARRIER CLB);

###############################################################################
#
# @SPRED # from @PRED 2023_02_23
#
###############################################################################

MAP (@<SPRED) TARGET NOUNSgNomDef IF (-1* NOUNSgNomDef BARRIER CLB OR BOS);
#войнась: Тесэ весе чумось войнась

MAP:ExistButNoLoc (@SUBJ) TARGET NOUNSgNomDef OR NOUNSgNomPx IF (NEGATE *0 @+FMAINV)
    	    	   		(1 EOS)
				(NEGATE 0* SUBJECTCANDIDATESG3);
   #Вана зыянось!
#
MAP (@SPRED) TARGET Nom IF (NEGATE *0 @+FMAINV) 
                          (1 EOS); # from @PRED 2023_02_23

#
MAP (@<OBJ) TARGET (Nom Indef) IF (-2 Dat) (-1 MEREMSDATWITHNOM);

MAP (@<OBJ) TARGET (Nom Indef) IF (*-1 VFIN) (NOT *0 VOCPERSON BARRIER CLB OR EOS OR BOS) (1 CLB);
#

## Before vocative we need a list of subjects, and objects
MAP (@<SUBJ) TARGET NOUNPlNomIndef IF (*-2 VFINPL3SUBJ BARRIER CLB OR BOS LINK NOT *-2 SUBJECTCANDIDATEPL3 BARRIER CLB OR BOS) (-1 (":")) (1 CLB OR EOS);
    #[: ошт,]: кода кармасть лисеме паргинестэнть: ошт, заводт, фабрикат,

MAP (@<SUBJ) TARGET NOUNPlNomIndef IF (-3 (",") OR (":")) (-2 @<SUBJ ) (-1 (",")) (1 (",") OR EOS);
MAP (@<SUBJ) TARGET NOUNPlNomIndef IF ((-3 (",") OR (":") LINK -2 @<SUBJ LINK -1 (",")) OR (-6 (",") OR (":") LINK -5 @<SUBJ LINK -4 (","))) (1 (",") OR EOS);
    #[, заводт,]: кода кармасть лисеме паргинестэнть: ошт, заводт, фабрикат,
MAP (@<SUBJ) TARGET NOUNPlNomIndef IF (-6 (",") OR (":")) (-5 @<SUBJ ) (-4 (",")) (1 (",") OR EOS);

#MAP (@VOC) TARGET NOUNSgNomPxSg1 OR NOUNSgNomIndef IF (1 CLB OR EOS) (NOT *0 VFIN OR NONVPERSON BARRIER CLB); Too strong
#MAP (@VOC) TARGET NOUNSgNomPxSg1 IF (1 (".") OR EOS) (NOT *0 VFIN OR NONVPERSON BARRIER CLB);

MAP (@VOC) TARGET NPropSgNomIndef IF (-1 CLB OR BOS) (1 CLB OR EOS);#
    #Пустачей: Кие истя тонь, Пустачей, тонавтынзеть?

MAP (@VOC) TARGET NOUNSPNomIndef IF (-1 CLB OR BOS) (1 CLB OR EOS);#
    #эх, дуракт, дуракт, неть самай сынь ульнесть

MAP (@VOC) TARGET NOUNPlNomIndef IF (-1 CLB OR BOS) (1 NOUNPlNomIndef) (2 CLB OR EOS); #first of adjacent Vocatives 
MAP (@VOC) TARGET NOUNPlNomIndef IF (-2 CLB OR BOS) (-1 NOUNPlNomIndef) (1 CLB OR EOS); #second of adjacent Vocatives
    # сюк тенк, барант-каткат.

#сисем иеть: монь тетям сюдымим сисем иеть кискакс якамо,
MAP (@HNOUN) TARGET NOUNSPNomIndef IF (1 (".") OR (")") OR EOS) (NOT *0 VFIN);#Should ) be dealt with here 2022-03-04


MAP (@SPRED) TARGET Nom IF (1 CLB);#2022-02-23 maybe too strong
# from @PRED 2023_02_23





###############################################################################
#
# If there is still no @SUBJ or @>N determined,
# then we assume a Pronoun or Noun in Nominative is a @SUBJ
#
###############################################################################


# 11->44631
# _son_, *eran, ...
MAP (@SUBJ) TARGET PronPersNom IF (NEGATE *0 @SUBJ)
                                  (*0 (*) - NNom - NNomExclude)
                                  (NOT 1 Infinitives)
                                  (NOT 1 PostpNoPX);

# 11->39578
# 11->39615
# Schoner Damai (maze _Damaj_)
# If the only "NNom" in a sentence!
MAP (@SUBJ) TARGET PronNNom IF (0 NOUNSgNom)
                               (*0 VFINSG3SUBJ)
                               (NEGATE *0 @SUBJ)
                               (*0 (*) - PronNNom - NNomExclude)
                               (NOT 1 Infinitives)
                               (NOT 1 PostpNoPX);
MAP (@SUBJ) TARGET PronNNom IF (0 NOUNPlNom)
                               (*0 VFINPL3SUBJ)
                               (NEGATE *0 @SUBJ)
                               (*0 (*) - PronNNom - NNomExclude)
                               (NOT 1 Infinitives)
                               (NOT 1 PostpNoPX);
#VFINSG3SUBJ this is to avoid a Sg3 nsubj with imperative
#NOUNSgNom
#vsg2 possible obj with imperative
#
#MAP (@OBJ) TARGET PronNNom IF (*0 VfinImperV2Sg OR VfinImperV2Pl)2022-04-13
MAP (@OBJ) TARGET NNomIndef OR  PronIndefNom IF (*0 VfinImperV2Sg OR VfinImperV2Pl)
                              (NEGATE *0 @OBJ)
                              (*0 (*) - PronNNom - NNomExclude)
                              (NOT 1 Infinitives)
                              (NOT 1 PostpNoPX);

# 11->41674
# Ging _er_ (sas _son_)
#MAP (@SUBJ) TARGET PronPersSgNom IF (NEGATE *0 @SUBJ)
#                           (*0 (*) - NNom - NNomExclude)
#                           (NOT 1 PostpNoPX);

MAP (@SUBJ>) TARGET NOUNSgNomDef IF (1* NOUNSgNomDef BARRIER CLB OR EOS); 

# n/adj def nsg cx:nom
# n/adj def npl cx:nom
MAP (@SUBJ) TARGET NAdjSgNomDef OR NOUNSgNomDef IF (NEGATE *0 @SUBJ BARRIER CLB)
                                   (NOT 1 Infinitives);
MAP (@SUBJ) TARGET NAdjPlNomDef OR NOUNPlNomDef IF (NEGATE *0 @SUBJ BARRIER CLB)
                                   (NOT 1 Infinitives);

#
MAP (@SUBJ) TARGET NAdjSgNomDef OR NOUNSgNomDef IF (NOT 1 Infinitives);
MAP (@SUBJ) TARGET NAdjPlNomDef OR NOUNPlNomDef IF (NOT 1 Infinitives);

 
MAP (@SUBJ) TARGET PronDefSgNom IF (NOT 1 Infinitives);
MAP (@SUBJ) TARGET PronDefPlNom IF (NOT 1 Infinitives);

#
MAP (@SUBJ) TARGET PronPersIndfSgNom IF (NOT 1 Infinitives);
MAP (@SUBJ) TARGET PronPersIndfPlNom IF (NOT 1 Infinitives);

#
MAP (@SUBJ) TARGET InfinitiveNom IF (NOT 1 Infinitives);


###############################################################################
#
# If there is @SUBJ, but still no @+FMAINV...
#
###############################################################################





###############################################################################
#
# If there is still no @+FMAINV,
# then we assume the last Noun is a Predicate
#
###############################################################################

MAP (@+FMAINV) TARGET VFIN IF (NEGATE *0 @+FMAINV);





###############################################################################
#
# TEMPORARY
#
###############################################################################

#remove (nm) if (not -1 ("yn" "fy"));
#select infinitive if (-1 ("yn" part));
#select ("yn" part) if ((1 infinitive) or (1 adjective));
#select ("yn" p) if (1 (t));
#select ("y" t) if (not 1 inflected);
#select ("o" :of:) if (-1 prequal)(1 adjective);





###############################################################################
#
# 1st component of compound words
#
###############################################################################

#
UNMAP (@CMPND);
MAP (@SUBJ) TARGET CpoundBeg IF (1 @SUBJ);
MAP (@SUBJ>) TARGET CpoundBeg IF (1 @SUBJ>);
MAP (@<SUBJ) TARGET CpoundBeg IF (1 @<SUBJ);
MAP (@OBJ) TARGET CpoundBeg IF (1 @OBJ);
MAP (@OBJ>) TARGET CpoundBeg IF (1 @OBJ>);
MAP (@<OBJ) TARGET CpoundBeg IF (1 @<OBJ);
MAP (@>N) TARGET CpoundBeg IF (1 @>N);
MAP (@>P) TARGET CpoundBeg IF (1 @>P);
MAP (@+FMAINV) TARGET CpoundBeg IF (1 @+FMAINV);
MAP (@<ADVL) TARGET CpoundBeg IF (1 @<ADVL);
MAP (@ADVL>) TARGET CpoundBeg IF (1 @ADVL>);
MAP (@VOC) TARGET CpoundBeg IF ((1 @VOC) OR (2 @VOC));

#
UNMAP (@CMPND-);
MAP (@SUBJ) TARGET ("<.*->"ri) IF (1 @SUBJ);
MAP (@OBJ) TARGET ("<.*->"ri) IF (1 @OBJ);
MAP (@>N) TARGET ("<.*->"ri) IF (1 @>N);
MAP (@>P) TARGET ("<.*->"ri) IF (1 @>P);
MAP (@+FMAINV) TARGET ("<.*->"ri) IF (1 @+FMAINV);
    #кассть-виензасть
MAP (@-FOBJ>) TARGET ("<.*->"ri) IF (1 @-FOBJ>);
MAP (@<ADVL) TARGET ("<.*->"ri) IF (1 @<ADVL);
MAP (@ADVL>) TARGET ("<.*->"ri) IF (1 @ADVL>);


#UNMAP (TAG) ;
#UNMAP UNSAFE (TAG) ;

#COPY (¤copy tags) TARGET (target) - (¤copy) ;
#COPY (¤copy tags) EXCEPT (not these tags) TARGET (target) - (¤copy) ;





###############################################################################
#
# No tag has been assigned (because omissions in the rule component)
#
###############################################################################

MAP (@X) TARGET (*);


SECTION
# THIS IS FOR WORK WITH GIELLA dependency.cg3
# (Mormula code) (Giella code) TARGET (Mormula code AND WHEN/WHERE)

#SUBSTITUTE (postp/prep) (Po) TARGET (postp/prep);
#SUBSTITUTE (inf/verbn/agptcpMA) (Der/NomAct N) TARGET (inf/verbn/agptcpMA);#moĺema DVN
#SUBSTITUTE (inf/verbnMO/ME/MU/M) (Der/NomAct N) TARGET (inf/verbnMO/ME/MU/M);#eŕamo DVN
#SUBSTITUTE (infMS/ME cx:ela) (V Ger Ela) TARGET (infMS/ME cx:ela);
#SUBSTITUTE (n) (N) TARGET (n);
#SUBSTITUTE (def nsg cx:all) (Sg Dat Def) TARGET (def nsg cx:all);

#SUBSTITUTE (num:card:2-) (Num) TARGET (num:card:2-);
#SUBSTITUTE (num:card:1) (Num) TARGET (num:card:1);
#SUBSTITUTE (num:ord) (Ord) TARGET (num:ord);#Check this
#SUBSTITUTE (adj) (A) TARGET (adj);
#SUBSTITUTE (ptcp4) (V Der/Ozj Ger) TARGET (ptcp4);
#SUBSTITUTE (vfin mod:ind) (V Ind) TARGET (vfin mod:ind);
#SUBSTITUTE (dsg3-osg3) (ScSg3 OcSg3) TARGET (dsg3-osg3);
#SUBSTITUTE (dsg3-opl3) (ScSg3 OcPl3) TARGET (dsg3-opl3);
#SUBSTITUTE (n:prop) (N Prop) TARGET (n:prop);
#SUBSTITUTE (def nsg cx:gen) (Sg Gen Def) TARGET (def nsg cx:gen);
#SUBSTITUTE (indf nsg cx:nom) (Sg Nom Indef) TARGET (indf nsg cx:nom);
#SUBSTITUTE (indf npl cx:nom) (Pl Nom Indef) TARGET (indf npl cx:nom);
#SUBSTITUTE (indf nsg cx:gen) (SP Gen Indef) TARGET (indf nsg cx:gen);

#2022-09-07#LIST @SPRED<OBJ = @SPRED<OBJ ;
#2022-09-07#LIST @-FADVL = @-FADVL ;

#2022-09-07#SET FOBJ = @-F<OBJ OR @-FOBJ> ; 
#2022-09-07#SET FMAINV = @-FMAINV OR @+FMAINV OR (V @<OBJ) OR (V @N<) OR (V @<SUBJ) OR (V @<ADVL) ;
#2022-09-07#SET FAUXV = @-FAUXV OR @+FAUXV ;


#2022-09-07#LIST <hab> = <hab> ;
#2022-09-07#LIST <ext> = <ext> ;

#2022-09-07# 
#2022-09-07#LIST HAB-V-TAGS = Pl3 Sg3 ConNeg PrfPrc Inf ;
#2022-09-07# 
#2022-09-07#LIST @>N = @>N ;

#2022-09-07#LIST @N< = @N< ;
#2022-09-07# 

#2022-09-07#LIST @>A = @>A ;

#2022-09-07#LIST @P< = @P< ;

#2022-09-07#LIST @>P = @>P ;

#2022-09-07#LIST @HNOUN = @HNOUN ;
#2022-09-07#LIST @INTERJ = @INTERJ ;
#2022-09-07# 
#2022-09-07#LIST @>Num = @>Num;

#2022-09-07#LIST @Pron< = @Pron< ;
#2022-09-07#LIST @>Pron = @>Pron ;

#2022-09-07#LIST @Num< = @Num< ;

#2022-09-07#LIST @OBJ = @OBJ ;  # Direct object
#2022-09-07#LIST @<OBJ = @<OBJ ; # Direct object to the right of the finite verb
#2022-09-07#LIST @OBJ> = @OBJ> ; # Direct object to the left of the finite verb
#2022-09-07### The problem with IOBJ is that it's usually marked with the same case as many local adverbials. I'm not sure if an IOBJ can be recognized without knowledge of the meaning of the verb and the animacy of the IOBJ word.
#2022-09-07##2022-02-06 indirect objects are marked with dative/allative, so they should be distinguished from direct objects.
#2022-09-07#LIST @<IOBJ = @<IOBJ; # Indirect Object. Head verb to the left...........................OLD...DO WE KEEP IT???
#2022-09-07##LIST @IOBJ> = @IOBJ>; # Indirect Object. Head verb to the right..........................OLD...DO WE KEEP IT???

#2022-09-07### It is realistic to only use @PRED. I'm not used to distinguishing subject predicative and object predicative. The use of arrows seems to be unrealistic because the copula verb is most often not used. To which word the arrow should point to in the absence of copula? THIS WAS JORMA, but it should be @SPRED with arrows both ways (see from @PRED 2023_02_23)
#2022-09-07### Here @SPRED then becomes the head 2023-02-23 head of copula equative and qualitative
#2022-09-07#LIST @OPRED = @OPRED ; # Object predicative, e.g. Cakes, she makes really good ones; You make yourself a Saami speaker
#2022-09-07#LIST @<OPRED = @<OPRED ; # Object predicative points to the finite verb on its left
#2022-09-07#     #урозокс: Войнась теизе урозокс Сашоконь.
#2022-09-07#LIST @OPRED> = @OPRED> ;  # Object predicative points to the finite verb on its right

#2022-09-07#LIST @ADVLPRED = @ADVLPRED; # Adverbial predicate

#2022-09-07#LIST @PCLE = @PCLE ;
#2022-09-07#LIST @COMP-CS< = @COMP-CS< ;
#2022-09-07# 


#2022-09-07#LIST @SUBJ = @SUBJ ;  # Subject (e.g. elliptical)
#2022-09-07#LIST @<SUBJ = @<SUBJ ; # Subject, main verb to the left
#2022-09-07#LIST @SUBJ> = @SUBJ> ; # Subject, main verb to the right
#2022-09-07####LIST @<SUBJ <ext> = @<SUBJ <ext>; # Subject to the righ of the finite verb, in habitive or existential construction
#2022-09-07#LIST @<SUBJ-ext = @<SUBJ-ext;

#2022-09-07#SET SUBJ = @<SUBJ OR @SUBJ> OR @SUBJ ;
#2022-09-07#SET SPRED = @<SPRED OR @SPRED> OR @SPRED ;
#2022-09-07#SET OPRED = @<OPRED OR @OPRED> OR @OPRED ;

#2022-09-07#LIST @PPRED = @PPRED ;
#2022-09-07# 
#2022-09-07#LIST @APP = @APP ;
#2022-09-07#LIST @APP-N< = @APP-N< ;
#2022-09-07#LIST @APP-Pron< = @APP-Pron< ;
#2022-09-07#LIST @APP>Pron = @APP>Pron ;
#2022-09-07#LIST @APP-Num< = @APP-Num< ;
#2022-09-07#LIST @APP-ADVL< = @APP-ADVL< ;
#2022-09-07#LIST @VOC = @VOC ;

#2022-09-07#SET OBJ = (@<OBJ) OR (@OBJ>) OR (@OBJ) OR (@-F<OBJ) OR (@-FOBJ>) ;
#2022-09-07#LIST <OBJ = @-F<OBJ @<OBJ ;
#2022-09-07#LIST OBJ> = @OBJ> @-FOBJ> ;

#2022-09-07#SET <OBJ-OTHERS = <OBJ OR (Gen) OR (Nom) OR (Ess) OR (Loc) OR (Adv) OR (Ine) OR (Ela) ;
#2022-09-07#SET OBJ>-OTHERS = OBJ> OR (Gen) OR (Nom) OR (Ess) OR (Loc) OR (Adv) OR (Ine) OR (Ela) ;

#2022-09-07#SET SYN-V = V + SUBJ OR OBJ + V OR @ADVL + V OR (V @N<) OR (V @A<) OR V + SPRED OR (V @COMP-CS<) ;


#2022-09-07#LIST @X = @X ;


#2022-09-07#LIST OKTA = "akta" "okta";
#2022-09-07#LIST go = "go" ;
#2022-09-07# 

#2022-09-07## Initials
#2022-09-07## --------

#2022-09-07#LIST INITIAL = "a" "b" "c" "d" "e" "f" "g" "h" "i" "j" "k" "l" "m"
#2022-09-07#        "n" "o" "p" "q" "r" "s" "t" "u" "v" "w" "x" "y" "z"
#2022-09-07#        "á" "æ" "ø" "å" "ö" "ä" ;

#2022-09-07#LIST CAP-INITIAL = "A" "B" "C" "D" "E" "F" "G" "H" "I" "J" "K" "L" "M"
#2022-09-07#        "N" "O" "P" "Q" "R" "S" "T" "U" "V" "W" "X" "Y" "Z"
#2022-09-07#        "Á" "Æ" "Ø" "Å" "Ö" "Ä" ;

#2022-09-07## Tag sets
#2022-09-07## ========
#2022-09-07#  SETS
#2022-09-07## ========


#2022-09-07## Word or not
#2022-09-07## -----------
#2022-09-07#LIST WORD = N A Adv V Pron CS CC Po Pr Interj Pcle Num ABBR ACR  \? ;
#2022-09-07# # any word

#2022-09-07#SET REALWORD = WORD - Num - Ord ;

#2022-09-07#SET REALWORD-NOTABBR = WORD - Num - Ord - ABBR ;

#2022-09-07#SET WORD-NOTDE = WORD - ("de") ; 

#2022-09-07## Verb sets
#2022-09-07## ---------

#2022-09-07## Verbs and their complements
#2022-09-07## - - - - - - - - - - - - - -

#2022-09-07#SET NOT-VERB = WORD - V ;

#2022-09-07## Finiteness and mood
#2022-09-07## - - - - - - - - - -

#2022-09-07#SET V-IND-FIN = Prs OR Prt ;
#2022-09-07# # Problem: "In boahtán" is an invisible indicative

#2022-09-07#SET V-MOOD = Ind OR Opt OR Imprt OR Conj OR Cond OR CondConj OR Des OR (Neg Sup) ;

#2022-09-07#LIST GC = ("gč") ;

#2022-09-07#SET VFIN = GC OR V-MOOD - ConNeg ;

#2022-09-07#SET VFIN-POS = V-MOOD - ConNeg - Neg ;

#2022-09-07#SET VFIN-NOT-IMP = VFIN - Imprt ;

#2022-09-07#SET VFIN-NOT-NEG = VFIN - Neg ;
#2022-09-07#  # this might be to strict, besides, "iige" can be written "ii ge"

#2022-09-07#SET NOT-PRFPRC = WORD - PrfPrc ;

#2022-09-07## Person
#2022-09-07## - - - - 

#2022-09-07#LIST V-SG1 = (V Ind Prs ScSg1)  (V Ind Prt1 ScSg1) (V Ind Prt2 ScSg1)
#2022-09-07#             (V Cond Prs ScSg1) (V Cond Prt1 ScSg1) (V Cond Prt2 ScSg1)
#2022-09-07#	     (V Conj ScSg1) (V CondConj ScSg1) (V Des ScSg1) (V Opt ScSg1)
#2022-09-07#	     (V Aux Neg Ind Prt1 ScSg1) (V Aux Neg Ind Prt2 ScSg1)
#2022-09-07#	     (V Aux Neg Conj ScSg1);
#2022-09-07# 
#2022-09-07#LIST V-SG2 =  (V Ind Prs ScSg2)  (V Ind Prt1 ScSg2) (V Ind Prt2 ScSg2)
#2022-09-07#             (V Cond Prs ScSg2) (V Cond Prt1 ScSg2) (V Cond Prt2 ScSg2)
#2022-09-07#	     (V Conj ScSg2) (V CondConj ScSg2) (V Des ScSg2) (V Opt ScSg2)
#2022-09-07#	     (V Aux Neg Ind Prt1 ScSg2) (V Aux Neg Ind Prt2 ScSg2)
#2022-09-07#	     (V Aux Neg Conj ScSg2);
#2022-09-07# 
#2022-09-07#LIST V-SG3 =  (V Ind Prs ScSg3)  (V Ind Prt1 ScSg3) (V Ind Prt2 ScSg3)
#2022-09-07#             (V Cond Prs ScSg3) (V Cond Prt1 ScSg3) (V Cond Prt2 ScSg3)
#2022-09-07#	     (V Conj ScSg3) (V CondConj ScSg3) (V Des ScSg3) (V Opt ScSg3)
#2022-09-07#	     (V Aux Neg Ind Prt1 ScSg3) (V Aux Neg Ind Prt2 ScSg3)
#2022-09-07#	     (V Aux Neg Conj ScSg3);
#2022-09-07# 
#2022-09-07#LIST V-PL1 = (V Ind Prs ScPl1)  (V Ind Prt1 ScPl1) (V Ind Prt2 ScPl1)
#2022-09-07#             (V Cond Prs ScPl1) (V Cond Prt1 ScPl1) (V Cond Prt2 ScPl1)
#2022-09-07#	     (V Conj ScPl1) (V CondConj ScPl1) (V Des ScPl1) (V Opt ScPl1)
#2022-09-07#	     (V Aux Neg Ind Prt1 ScPl1) (V Aux Neg Ind Prt2 ScPl1)
#2022-09-07#	     (V Aux Neg Conj ScPl1);
#2022-09-07# 
#2022-09-07#LIST V-PL2 =  (V Ind Prs ScPl2)  (V Ind Prt1 ScPl2) (V Ind Prt2 ScPl2)
#2022-09-07#             (V Cond Prs ScPl2) (V Cond Prt1 ScPl2) (V Cond Prt2 ScPl2)
#2022-09-07#	     (V Conj ScPl2) (V CondConj ScPl2) (V Des ScPl2) (V Opt ScPl2)
#2022-09-07#	     (V Aux Neg Ind Prt1 ScPl2) (V Aux Neg Ind Prt2 ScPl2)
#2022-09-07#	     (V Aux Neg Conj ScPl2);
#2022-09-07# 
#2022-09-07#LIST V-PL3 =  (V Ind Prs ScPl3)  (V Ind Prt1 ScPl3) (V Ind Prt2 ScPl3)
#2022-09-07#             (V Cond Prs ScPl3) (V Cond Prt1 ScPl3) (V Cond Prt2 ScPl3)
#2022-09-07#	     (V Conj ScPl3) (V CondConj ScPl3) (V Des ScPl3) (V Opt ScPl3)
#2022-09-07#	     (V Aux Neg Ind Prt1 ScPl3) (V Aux Neg Ind Prt2 ScPl3)
#2022-09-07#	     (V Aux Neg Conj ScPl3);
#2022-09-07# 

#2022-09-07# # Note that imperative verbs are not included in these sets!

#2022-09-07## Some subsets of the VFIN sets
#2022-09-07## - - - - - - - - - - - - - - -
#2022-09-07#SET V-SG = V-SG1 OR V-SG2 OR V-SG3 ;
#2022-09-07#SET V-PL = V-PL1 OR V-PL2 OR V-PL3 ;

#2022-09-07#SET V-NOT-SG1 = VFIN-NOT-IMP - V-SG1 ;
#2022-09-07#SET V-NOT-SG2 = VFIN-NOT-IMP - V-SG2 ;
#2022-09-07#SET V-NOT-SG3 = VFIN-NOT-IMP - V-SG3 ;
#2022-09-07#SET V-NOT-PL1 = VFIN-NOT-IMP - V-PL1 ;
#2022-09-07#SET V-NOT-PL2 = VFIN-NOT-IMP - V-PL2 ;
#2022-09-07#SET V-NOT-PL3 = VFIN-NOT-IMP - V-PL3 ;

#2022-09-07#SET V-1-2 = V-SG1 OR V-SG2 OR V-PL1 OR V-PL2 ;
#2022-09-07#SET V-3  = V-SG3 OR V-PL3 ;

#2022-09-07## Sets consisting of LEAT
#2022-09-07## - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
#2022-09-07#LIST LEAT = "leat" "liehket" "lea" ;

#2022-09-07#SET LEAT-FIN-NOT-IMP = LEAT - Imprt;
#2022-09-07# 
#2022-09-07#LIST VPRFPRC = (V PrfPrc) ;
#2022-09-07#LIST LEATPRFPRC = ("leat" PrfPrc) ("liehket" PrfPrc) ("lea" PrfPrc) ;
#2022-09-07#SET PRC-NOT-LEAT = VPRFPRC - LEATPRFPRC ;
#2022-09-07#    # In order to distinguish between real leat-constructions and participles of other verbs
#2022-09-07#LIST HABEO-SG3 = ("leat" Sg3) (V Neg Sg3) ("šaddat" Sg3) ("sjaddat" Sg3) ("liehket" Sg3) ("lea" Sg3) ;

#2022-09-07#LIST HABEO-PL3 = ("leat" Pl3) (V Neg Pl3) ("šaddat" Pl3)  ("sjaddat" Pl3) ("liehket" Pl3) ("lea" Pl3)  ;

#2022-09-07#SET HABEO-3 = HABEO-SG3 OR HABEO-PL3 ;

#2022-09-07## Pronoun sets
#2022-09-07## ------------

#2022-09-07#LIST MON = (Pron Pers Sg1 Nom);
#2022-09-07#LIST TON = (Pron Pers Sg2 Nom);
#2022-09-07#LIST SON = ("сон" Pron Pers Sg3 Nom);
#2022-09-07#LIST MINJ = (Pron Pers Pl1 Nom);
#2022-09-07#LIST TINJ = (Pron Pers Pl2 Nom);
#2022-09-07#LIST SINJ = ("сон" Pron Pers Pl3 Nom);

#2022-09-07#SET PPRON-NOM-NOT-DAT = MON OR TON OR SON OR MINJ OR TINJ OR SINJ ;

#2022-09-07#SET PPRON-NOT-DAT = (Pron Pers) - ("dat") ;

#2022-09-07#SET PPRON-PL = MINJ OR TINJ OR SINJ ;

#2022-09-07#SET PPRON-NOT-SINJ = MON OR TON OR SON OR MINJ OR TINJ ;

#2022-09-07#LIST PPRON-GEN = (Sg1 Gen) (Sg2 Gen) (Sg3 Gen)
#2022-09-07#	(Pl1 Gen) (Pl2 Gen) (Pl3 Gen);

#2022-09-07#SET PPRON-NOT-GEN = (Pron Pers) - PPRON-GEN ;

#2022-09-07#LIST DEM-SG = (Pron Dem Sg Nom);
#2022-09-07#LIST DEM-PL = (Pron Dem Pl Nom);
#2022-09-07#SET NOT-DEM = WORD - Dem ;

#2022-09-07#LIST SGPRON = (Pron Sg1) (Pron Sg2) (Pron Sg3) (Pron Sg) (Pron PxSg1) (Pron PxSg2) (Pron PxSg3);
#2022-09-07#LIST PLPRON = (Pron Pl1) (Pron Pl2) (Pron Pl3) (Pron Pl) (Pron PxPl1) (Pron PxPl2) (Pron PxPl3);

#2022-09-07#SET PRON-NOT-SG = PLPRON ;

#2022-09-07#LIST DAT-PRON = ("dat") ("dát") ("diet") ("duot") ("dot") ;

#2022-09-07#LIST QUANT-PRON = "ollu" "olu" "unnán" "váháš" "veaháš" "veháš" ;
#2022-09-07## This set is for choosing between Adv and Pron Indef.

#2022-09-07## Adjectival sets and their complements
#2022-09-07## -------------------------------------

#2022-09-07#SET NOT-A = WORD - A ;
#2022-09-07#SET NOT-A-COMMA = WORD - A - COMMA ;
#2022-09-07#SET NOT-Attr = WORD - Attr ;
#2022-09-07#SET NOT-A-PCLE = WORD - A - Pcle ;

#2022-09-07#SET NOT-A-ADV = WORD - A - Adv OR ("maid") ;

#2022-09-07#LIST NOMINAL-ADJ = "guoktilaš" "lámis" "oasálaš" ("suddu" Der/laš) "viissis";
#2022-09-07# 
#2022-09-07# # and many others
#2022-09-07# 
#2022-09-07## Adverbial sets and their complements
#2022-09-07## ------------------------------------
#2022-09-07#SET LEX-ADV = Adv - (A*) ;

#2022-09-07#SET NOT-ADV-DE            = WORD - Adv ;
#2022-09-07#SET NOT-ADV            = NOT-ADV-DE OR ("de" Adv) OR CLB ;
#2022-09-07#SET NOT-ADV-N          = NOT-ADV - N;
#2022-09-07#SET NOT-ADV-PCLE       = NOT-ADV - Pcle ;
#2022-09-07#SET NOT-ADV-INDEF      = NOT-ADV - Indef ;
#2022-09-07#SET NOT-ADV-PCLE-ILL   = WORD - Adv - Pcle - Ill ;
#2022-09-07#SET NOT-ADV-PCLE-Refl  = WORD - Adv - Pcle - Refl ;
#2022-09-07#SET NOT-ADV-PCLE-INDEF = WORD - Adv - Pcle - Indef ;
#2022-09-07#SET NOT-ADV-PCLE-NEG   = WORD - Adv - Pcle - Neg ;
#2022-09-07#SET NOT-ADVL-PCLE-NEG  = WORD - @ADVL - @P< - Pcle - Neg ;


#2022-09-07#LIST MO-MANge = "goas" "gokko" "gos" "gosa" "govt" "makkár" "man" "manne" "mo" "mot" "mov" "movt" ("nugo" @CVP) (V Qst);
#2022-09-07# 
#2022-09-07#SET MO = MO-MANge - ("man" Foc/ge) ; 
#2022-09-07# 
#2022-09-07# # Introduce finite clauses.
#2022-09-07# 
#2022-09-07#LIST PLACE-ADV =  "davá#bealde" "mátta#bealde" "nuortta#bealde" "oarje#bealde" "olggo#beale" ;
#2022-09-07## There will usually be a Gen in front. 

#2022-09-07#LIST TIME-ADVL = "исяк" "течи" "умок" "мелят" "маныть" "ванды" "улкоть" "валске" "икеле" "ней" ("шка" Temp) ("шка" Ela) ;

#2022-09-07#LIST TIME-ADV = (Adv Sem/Time) ;


#2022-09-07#LIST DOPPE = "badjin" "bajil" "dakko" "dá" "dákko" "dáppe" "diekko" "dieppe" "do" "dokko" "doppe" "duo" "duokko" "duoppe" "olgun" ;
#2022-09-07## Adverbs with a locativic form, but don´t get Loc as a tag. 

#2022-09-07#LIST DOHKO = "bajás" "deike" "diehke" "diehko" "dohko" "duohko" "lulás" "olggos" "ruoktot" "sisa" "vuovdimassii" ;
#2022-09-07## Adverbs with a illativic form, but they don´t get Ill as a tag.


#2022-09-07## Coordinators
#2022-09-07## ------------
#2022-09-07#SET Foc = Foc/ge  OR Foc/gen  OR Foc/ges  OR Foc/gis  OR Foc/naj OR Foc/ba  OR Foc/be  OR Foc/hal  OR Foc/han  OR Foc/bat OR Foc/son ;

#2022-09-07#LIST NEGFOC = (Neg Foc/ge) ;

#2022-09-07#LIST XGO = "dego" "dugo" "nugo" "seammaládjego" "seammaláhkaigo" ;
#2022-09-07#  # Compounds
#2022-09-07#LIST SEAMMAX = "seamma#ládje" "seamma#láhkai" "seamma#láhkái" ;
#2022-09-07#  # Those combine with go
#2022-09-07#  
#2022-09-07#LIST MADE = "mađe" "mađi" ;
#2022-09-07#LIST DADE = "dađe" "dađi" ; 
#2022-09-07#  
#2022-09-07# 
#2022-09-07#SET CRD = @CNP OR COMMA OR NEGFOC OR XGO OR ("/") OR ("-") OR DADE ;
#2022-09-07#    # AFTER LCRD vs. GCRD disambiguation
#2022-09-07#    

#2022-09-07#LIST ADV-AFTER-NUM = "geardde" ;

#2022-09-07#LIST DUSSE = "áibbas" "dušše" "erenoamážit" "goitge" "man" "measta" "meastui" "oalle" "oba" "oktiibuot" "oppa" "sullii" ;

#2022-09-07#LIST GRADE-ADV =  "áibbas" "beare" ("eanet" Adv) "erenoamán" "erenoamáš" "hirbmat" "hui" "ila" "issoras" ("man" Adv) ("mealgat" Adv) "measta" "menddo" "muđui" "muhtun_muddui" "nu" "oalle" "oba" ("oppa" Adv) "sakka" "seammá" ("veaháš" Adv) ("uhccán" Adv) ("unnán" Adv) "vehá" "veháš" "veahá" "veaháš" "viehka" ;

#2022-09-07#LIST BUOT = "buot" "gait" "gaitin" "gaitdivnnat" "visot" ;


#2022-09-07#LIST EASKKA = "easkka" ("easka" Adv) ; 

#2022-09-07#LIST ADV-NOT-ARG = "aiddo" "ain" "aivve" "albma" "aŋkke" "álggos" "bái#fáhkka" "beanta" "beare" ;



#2022-09-07#LIST ADV-NOT-VERB = "dušše" "viimmat" ;

#2022-09-07#LIST ADV-NOT-NOUN = "easka" "várra" ;

#2022-09-07#LIST ADV-NOT-NAMES = "Ain" "Anne" "Diego" "Dieppe" "Enge" "Galle" "Haga"
#2022-09-07#           "Joba" "Johan" "Liikka" "Mai" "Mannes" "Mo" "Mot" "Naba"
#2022-09-07#           "Nan" "Oktan" "Sierra" "Sokka" "Villa" ;

#2022-09-07#SET ADV-NOT-OTHER-POS = ADV-NOT-VERB OR ADV-NOT-NOUN OR ADV-NOT-NAMES ;

#2022-09-07#LIST HAB-CASE = Loc (<smj> Ine) (<sma> Gen) ;
#2022-09-07#LIST HAB-ACTOR-ALL = Sem/Hum Sem/Mal Sem/Sur Sem/Fem Sem/Ani  Pers ("gii") Indef Coll ;
#2022-09-07#SET HAB-ACTOR = HAB-ACTOR-ALL - ("cihca") ;
#2022-09-07#SET HAB-ACTOR-NOT-HUMAN = Sem/Org ;

#2022-09-07## Sets of elements with common syntactic behaviour
#2022-09-07## ================================================

#2022-09-07#SETS

#2022-09-07##!! * Sets for verbs
#2022-09-07## -----

#2022-09-07#LIST NOT-REAL-V = (Actio Nom) (Actio Gen) (Actio Loc) (Actio Com) PrsPrc ;

#2022-09-07#SET REAL-V = V - NOT-REAL-V  ;
#2022-09-07#  #!!     - V is all readings with a V tag in them, REAL-V should
#2022-09-07#  #!! be the ones without an N tag following the V.  
#2022-09-07#  #!! The REAL-V set thus awaits a fix to the preprocess V ... N bug.
#2022-09-07#            
#2022-09-07# 
#2022-09-07# # The set REAL is smaller than COPULAS, made for verbs with PrfPrc complements: Seammás REAL-COPULAS son dovdan iežas...
#2022-09-07#LIST REAL-COPULAS = "dáidit" "leat" "soaitit" "veadjit" "liehket" "lea";

#2022-09-07##!! * The set COPULAS is for predicative constructions
#2022-09-07#LIST COPULAS = "dáidit" "gártat" "leat" "soaitit" "šaddat" "orrut" "veadjit" "liehket" "sjaddat" "lea" "sjïdtedh" ;
#2022-09-07# #  "bissut" ? 
#2022-09-07# # 'Dáidit' can appear without 'leat'.

#2022-09-07#SET NOT-COP-V = V - COPULAS ;

#2022-09-07#SET MAIN-V = V - FAUXV ;
#2022-09-07# 
#2022-09-07## All active verbs with a TV tag, including AUX-OR-MAIN.

#2022-09-07#LIST V-TRANS = (V TV) (IV Der/ahtti) (IV Der/h) ;


#2022-09-07#SET TRANS-V = V-TRANS - Der/Pass + REAL-V ;

#2022-09-07##!! * NP sets defined according to their morphosyntactic features
#2022-09-07## - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 


#2022-09-07#LIST N-SG-NOM = (N Sg Nom);

#2022-09-07#SET HEAD-N = N - RCmpnd ;

#2022-09-07#SET HEAD-N-NOM = (N Nom) - RCmpnd ;

#2022-09-07#SET SUBJECTHEAD = N OR A OR Pron - Refl ; # These, can be subject heads

#2022-09-07#SET NP = N OR A ;                      # anything that can take except numerals
#2022-09-07#SET NP-HEAD        = Pron OR HEAD-N - ("buorre") ;
#2022-09-07#SET NP-HEAD-SG     = SGPRON OR (N Sg) OR (A Sg) - RCmpnd  - Dem - ("buorre");
#2022-09-07#SET NP-HEAD-PL     = PLPRON OR (N Pl) OR (A Pl) - RCmpnd  - Dem - ("buorre");
#2022-09-07#SET NP-HEAD-SG-NOM = SGPRON + Nom OR (N Sg Nom) OR (A Sg Nom) - ("buorre") - RCmpnd ;
#2022-09-07#SET NP-HEAD-PL-NOM = PLPRON + Nom OR (N Pl Nom) OR (A Pl Nom) - RCmpnd  - ("buorre");
#2022-09-07#SET NP-HEAD-NOM    = NP-HEAD-SG-NOM OR NP-HEAD-PL-NOM ;
#2022-09-07#SET NP-HEAD-ACC    = (Pron Acc) OR (N Acc) OR (A Acc) - RCmpnd - (Dem Attr) - ("buorre");
#2022-09-07#SET NP-HEAD-GEN    = (Pron Gen) OR (N Gen) OR (A Gen) - Der/NomAct - RCmpnd - (Dem Attr) - ("buorre")   ;

#2022-09-07##!! * The PRE-NP-HEAD family of sets

#2022-09-07##!! These sets model noun phrases (NPs). The idea is to first define whatever can
#2022-09-07##!! occur in front of the head of the NP, and thereafter negate that with the
#2022-09-07##!! expression **WORD - premodifiers**.


#2022-09-07#SET PRE-NP-HEAD = (Prop Attr) OR (Prop @>N) OR (A Attr) OR (ABBR Attr) OR ("buorre") 
#2022-09-07#         OR (Pron Pers Gen) OR (N Gen) OR (A Gen) OR ("buot") OR
#2022-09-07#         Num OR RCmpnd OR CC OR (Pron Dem) OR (Pron Refl Gen) OR (Indef Attr) OR 
#2022-09-07#         (PrfPrc @>N) OR PrsPrc OR (A Ord) OR (Num @>N) OR (A @>N) OR @>N OR @>A OR @>Pron OR @Num< OR (CC @CNP) OR (@>CC) OR (Action Gen) OR (@Pron<) ;
#2022-09-07#         # The strict version of items that can only be premodifiers, not parts of the predicate

#2022-09-07##LIST PRE-NP-HEAD = @>N @>A @>Pron @Num< @CNP ;
#2022-09-07#         
#2022-09-07#SET PRE-NP-V = PrfPrc OR PrsPrc OR Der/NomAg OR Actio OR Der/NomAct OR (V A) OR (Ind Prs Sg3) OR (Ind Prs Sg1) ;
#2022-09-07#    # to be used together with PRE-NP-HEAD before @>N is disambiguated
#2022-09-07#         
#2022-09-07#SET NP-MEMBER   = PRE-NP-HEAD OR N ;

#2022-09-07#SET PRE-A-N     = (Pron Pers Gen) OR (Pron Pers Acc) OR (Pron Indef) OR Num OR (A Ord) OR (Pron Dem) OR (Pron Refl Gen) OR (Pron Refl Acc) ; # Acc pga av manglende disambiguering tidlig i fila

#2022-09-07#SET NOT-PRE-A-N = WORD - PRE-A-N ;

#2022-09-07#LIST PUNCT-LEFT = (PUNCT LEFT) ;
#2022-09-07#LIST PUNCT-RIGHT = (PUNCT RIGHT) ;

#2022-09-07#SET PRE-APP   = COMMA OR PUNCT-LEFT OR PRE-NP-HEAD ;
#2022-09-07# # This set ist not only for what can
#2022-09-07#                            # stand in front of appositions but also
#2022-09-07#                            # postmodifiers.



#2022-09-07##!! The set **NOT-NPMOD** is used to find barriers between NPs.
#2022-09-07##!! Typical usage: ... (*1 N BARRIER NPT-NPMOD) ...
#2022-09-07##!! meaning: Scan to the first noun, ignoring anything that can be
#2022-09-07##!! part of the noun phrase of that noun (i.e., "scan to the next NP head")

#2022-09-07#SET NOT-NPMOD     = WORD - PRE-NP-HEAD OR ABBR ;                     
#2022-09-07## This is the previous NPNH (npnh) set.
#2022-09-07## NOT-NPMOD  = "NOT-PRE-NP-HEAD"
#2022-09-07# 
#2022-09-07#SET NOT-NPMOD-ACC     = NOT-NPMOD - Acc OR ABBR ; 
#2022-09-07#SET NOT-NPMOD-ACC-ADV     = NOT-NPMOD - Acc - Adv OR ABBR ; 
#2022-09-07## To be used in mappingrules, before the disambuation of Acc and Gen.                     

#2022-09-07#SET NOT-NPMODADV    = WORD - PRE-NP-HEAD - Adv ;                      
#2022-09-07## NOT-NPMODADV = "NOT-PRE-NP-HEAD-OR-ADV"
#2022-09-07#SET NOT-NPMODADV-INDEF   = WORD - PRE-NP-HEAD - Adv - Indef ;              
#2022-09-07### NOT-NPMODADVI = "     ...-OR-INDEF"
#2022-09-07#SET NOT-NPMODADVII  = WORD - PRE-NP-HEAD - Adv - Indef - Ill ;        
#2022-09-07## Illative indir.obj.
#2022-09-07#SET NOT-NPMODADVIIP = WORD - PRE-NP-HEAD - Adv - Indef - Ill - Pcle ; 
#2022-09-07## <== is this our NOT-NPMOD set?
#2022-09-07#SET NOT-NPMODCC   = WORD - PRE-NP-HEAD - COMMA - @CNP ;
#2022-09-07#SET NAPP     = WORD - PRE-APP ;



#2022-09-07##!! * Miscellaneous sets
#2022-09-07## ------------------
#2022-09-07#LIST Px = PxSg1 PxSg2 PxSg3 PxPl1 PxPl2 PxPl3 ;

#2022-09-07#LIST GASKAL = "gaskal" "gaskkal" "gaskii" "gaskka" "gaskkas" ;
#2022-09-07# 
#2022-09-07# # p-positions that like coordination
#2022-09-07# 
#2022-09-07#LIST TIME-PP = "badjel" "čađa" "earret" "gaskkal" "guovddáš" "maŋŋel" "maŋŋil" "maŋŋá" "miehtá" "ovdal" ;
#2022-09-07# 

#2022-09-07#SET NUM = Num - OKTA ;

#2022-09-07## this set does not contain ordinals, I am not sure if that is necessary.

#2022-09-07#SET NOT-NUM = WORD - Num ;

#2022-09-07#LIST MANGA = "máŋga" "galle" ;
#2022-09-07# # Not referred to by any rule.

#2022-09-07#SET CARDINALS = Num - Ord - MANGA ;

#2022-09-07#SET NOT-CC = WORD - CC ;

#2022-09-07#SET NOT-PCLE = WORD - Pcle ;

#2022-09-07#LIST COMPAR = ("dávji" A Comp) "eanet" "earalágan" "eará" "earret" "seammás" "seammalágan" "seamma_láhkái" ;
#2022-09-07# 
#2022-09-07# # These combine with "go" Pcle, but COMPAR stands for 'comparison' rather than
#2022-09-07# # 'comparative'.

#2022-09-07#LIST CONTRA = "muhto" ;
#2022-09-07# # In lean muitalan, muhto dál muitalan.

#2022-09-07#LIST PROSEANTA = "proseanta" "%" ;

#2022-09-07#SET REAL-CLB = CLB - COMMA ;


#2022-09-07#SET NOT-INITIAL-CC = WORD - INITIAL - CC ;



#2022-09-07##!! * Border sets and their complements
#2022-09-07## ---------------------------------

#2022-09-07#SET CP = (Pron Interr) OR (Pron Rel) OR MO ;

#2022-09-07#LIST BOUNDARYSYMBOLS =  "\;" ":" "-" "–" ;
#2022-09-07#	
#2022-09-07#SET S-BOUNDARY = CP OR BOUNDARYSYMBOLS OR ("muhto") OR ("de" Adv) OR (Neg Sup) OR @CVP OR ("vel" Adv Qst) ;
#2022-09-07#	# does not include CS, because of "go" in questions, before it is disambugated.
#2022-09-07#	# includes CP
#2022-09-07#	# this one includes @CVP, the conjunction which actually connects two sentences (each with a finite verb) to each other, 
#2022-09-07#	# and not @CNP, which coordinates internal NP-/AdvP-/AP ... coordination
#2022-09-07#	# To be used only AFTER the disambiguation of @CVP and @CNP taking place in the chapter right before "Disambiguating pronouns"


#2022-09-07#SET BOC = S-BOUNDARY OR BOS ;
#2022-09-07#SET BOC-PUNCT = BOC - ("-") - ("–") ; 
#2022-09-07#SET EOC = S-BOUNDARY OR EOS ;

#2022-09-07#SET NP-BOUNDARY = BOS OR EOS OR REAL-CLB OR VFIN OR Inf OR (Actio Ess) OR ConNeg OR VGen OR Sup OR PPRON-NOT-GEN OR Recipr OR Po OR Pr OR Pcle OR ("jed") OR Interj OR CS OR CP OR @CVP ;

#2022-09-07#SET APP-BOUNDARY = REAL-CLB OR VFIN OR Inf OR (Actio Ess) OR ConNeg OR VGen OR Sup OR Recipr OR Po OR Pr OR Pcle OR Interj OR CS OR CP OR PrfPrc - @>N ;
#2022-09-07## A special barrier used with mapping of appositions. 

#2022-09-07## This set contains FMAINV with @, which means that it functions for all kind of mainverbs after the verb-mapping rules 
#2022-09-07#SET SV-BOUNDARY = S-BOUNDARY OR Inf - FAUXV OR Sup OR FMAINV ;
#2022-09-07# # VFIN-NOT-AUX ;
#2022-09-07# # should be MAIN-V linked to VFIN-aux to the left. (cg-3)
#2022-09-07## This set is ment to use in rules for disambiguating due to verbs or verbsets. It contents @.

#2022-09-07#SET SVF-BOUNDARY = S-BOUNDARY OR VFIN ;

#2022-09-07## This set is ment to use in rules for disambiguating due to verbs or verbsets. 
#2022-09-07## Here we search for either an S-BOUNDARY or a finite verb, either aux or main.

#2022-09-07#LIST ADVLCASE = Ill Loc Com Ess Ine Ela ;
#2022-09-07#LIST CASE = Nom Acc Gen Ill Loc Com Ess Ine Ela ;


#2022-09-07##!! * Syntactic sets
#2022-09-07## --------------

#2022-09-07#LIST ALLSYNTAG = (@+FAUXV) (@+FMAINV) (@-FAUXV) (@-FMAINV) (@-FSUBJ>)(@-FOBJ)(@-F<ADVL)(@-FADVL>)(@>A) (@>ADVL) (@ADVL<) (@<ADVL) (@ADVL>) (@>N) (@APP) (@APP-N<) (@APP-Pron<) (@APP>Pron) (@APP-Num<) (@APP-ADVL<) (@VOC)(@CNP) (@CVP) (@P<) (@>P) (@HNOUN) (@INTERJ) (@Pron<) (@OBJ) (@OBJ>) (@<OBJ) (@OPRED) (@<OPRED) (@OPRED>) (@SPRED<OBJ) (@PCLE) (@COMP-CS<) (@N<) (@SPRED) (@<SPRED) (@SPRED>) (@PPRED) (@Num<) (@SUBJ) (@<SUBJ) (@SUBJ>) (@X);
#2022-09-07# 

#2022-09-07#SET NON-APP = ALLSYNTAG - (@APP);

#2022-09-07##!! These were the set types.


#2022-09-07#         SECTION         #

#2022-09-07##!! ## HABITIVE MAPPING

#2022-09-07#	# Habitives - HAB
#2022-09-07#	
#2022-09-07##!! * **hab1** 
#2022-09-07#MAP:hab1 (<hab> @ADVL>) TARGET HAB-ACTOR + HAB-CASE - Attr (NEGATE 0 HAB-ACTOR-NOT-HUMAN LINK *1 HUMAN BARRIER (N Nom))(1 FAUXV + HAB-V-TAGS LINK *1 LEAT BARRIER NP-HEAD OR MAIN-V);
#2022-09-07#	#$ Mus eai leat girjjit mielde.
#2022-09-07#	#% Dorskis sáhttet leat vuoivvas ja meađđemat.

#2022-09-07#MAP:hab_numo (<hab> @ADVL>) TARGET HAB-ACTOR + HAB-CASE - Attr (NEGATE 0 HAB-ACTOR-NOT-HUMAN LINK *1 HUMAN BARRIER (N Nom))(1 COPULAS + HAB-V-TAGS LINK 1 COMMA LINK *1 COMMA LINK 1 (N Nom)) ;
#2022-09-07#	#%Dus lea, nu mo buot eará bargiin, vuoigatvuohta oahppasoahpamuša lassin maiddái čálalaš bargosoahpamuššii oahppafitnodagain.

#2022-09-07##!! * **hab2** 
#2022-09-07#MAP:hab2 (<hab> @ADVL>) TARGET HAB-ACTOR + HAB-CASE - Attr (NEGATE 0 HAB-ACTOR-NOT-HUMAN LINK *1 HUMAN BARRIER (N Nom))(1 FAUXV + HAB-V-TAGS LINK 1 Adv LINK *1 LEAT BARRIER NOT-ADV-PCLE);

#2022-09-07##!! * **hab3** (<hab> @ADVL>) for hab-actor and hab-case; if leat to the right, and Nom to the right of leat. Lots of restrictions.
#2022-09-07#MAP:hab3 (<hab> @ADVL>) TARGET HAB-ACTOR + HAB-CASE - Attr (NEGATE 0 Sem/Group OR Pl - Rel LINK *-1 Indef - BUOT + Nom OR HUMAN + Nom BARRIER NOT-NPMOD-ACC)(NEGATE 0 HAB-ACTOR-NOT-HUMAN LINK *1 HUMAN BARRIER (N Nom))(NEGATE 0 (Sem/Ani Sem/Group) LINK *1 Sem/Ani BARRIER (N Nom))(NEGATE 0 (Sem/Hum Sem/Group) LINK *1 Sem/Hum BARRIER (N Nom))(NEGATE 0 N OR Pers OR Indef LINK *-1 HAB-ACTOR + HAB-CASE BARRIER NOT-NPMOD-ACC OR CC)(NEGATE -1 Num LINK -1 Num)(*1 LEAT + HAB-V-TAGS BARRIER NOT-ADV-PCLE LINK *1 Nom BARRIER S-BOUNDARY);
#2022-09-07#	#$ Máhtes lea beana.
#2022-09-07#	#% Juos gorreválggain Sámedikkis lea dárbbašlaš deavdit gáibádusa, ahte okta stivrralahtuin ja su sadjásašlahttu galgaba leat boazodoalu ovddasteaddjit, de galgá boazodoalu ovddasteddjiid loktet badjeliidda dan listtas, mii lea ožžon uhcimus jienaid daid listtaid gaskkas, mat galget ovddastuvvot ja main leat dakkár evttohasat. 
#2022-09-07#	#% Ealus leat eanaš álddut.


#2022-09-07#MAP:habInf (<hab> @ADVL>) TARGET HAB-ACTOR + HAB-CASE OR ("dat" Dem) +  HAB-CASE - Attr (1 LEAT + Sg3 LINK 1 Inf) ;
#2022-09-07#	#$ Mis lea cahkkehit dola.

#2022-09-07##!! * **habNomLeft** 
#2022-09-07#MAP:habNomLeft (<hab> @ADVL>) TARGET HAB-ACTOR + HAB-CASE - Attr ((-1 Nom LINK NEGATE *-1 (Pers Gen) BARRIER NOT-NPMOD) OR (-1 (Sg Gen) LINK -1 (Sg Num Nom) LINK NEGATE *-1 (Pers Gen) BARRIER NOT-NPMOD))(NEGATE -1 Num LINK -1 Num)(*1 LEAT + HAB-V-TAGS BARRIER NOT-ADV-PCLE);
#2022-09-07#	#$ Mii dus lea?

#2022-09-07#MAP:habAdvl (<hab> @ADVL>) TARGET HAB-ACTOR + HAB-CASE - Attr  (NEGATE 0 HAB-ACTOR-NOT-HUMAN LINK *1 HUMAN BARRIER (N Nom))(NEGATE 0 (Sem/Ani Sem/Group) LINK *1 Sem/Ani BARRIER (N Nom))(NEGATE 0 (Sem/Hum Sem/Group) LINK *1 Sem/Hum BARRIER (N Nom))((*1 HAB-CASE BARRIER NOT-NPMOD-ACC LINK *1 LEAT + HAB-V-TAGS BARRIER NOT-ADV-PCLE) OR (*1 HAB-CASE BARRIER NOT-NPMODADV LINK *1 FAUXV LINK *1 LEAT + HAB-V-TAGS BARRIER NOT-ADV-PCLE));
#2022-09-07#	#$ Ii han ovttasge du sogas leat dat namma.

#2022-09-07##!! * **hab4** 	
#2022-09-07#MAP:hab4 (<hab> @ADVL>) TARGET HAB-ACTOR + HAB-CASE - Attr (NEGATE 0 HAB-ACTOR-NOT-HUMAN LINK *1 HUMAN BARRIER (N Nom))(1 CC LINK *1 HAB-ACTOR BARRIER NOT-NPMOD LINK *1 LEAT + HAB-V-TAGS BARRIER NOT-ADV-PCLE);



#2022-09-07##!! * **hab6** 
#2022-09-07#MAP:hab6 (<hab> @<ADVL) TARGET HAB-ACTOR + HAB-CASE - Attr ((*-1 go BARRIER NOT-NPMOD LINK -1 LEAT + HAB-V-TAGS LINK -1 BOC) OR (*-1 LEAT + Qst BARRIER NOT-NPMOD LINK -1 BOC));
#2022-09-07#	#$ Lea go dis ruhta?
#2022-09-07#	#$ Leago sámeálbmogis vuoigatvuođat vai eai?

#2022-09-07##!! * **hab7** 
#2022-09-07#MAP:hab7 (<hab> @<ADVL) TARGET HAB-ACTOR + HAB-CASE - Attr (*-1 go BARRIER NOT-NPMOD LINK -1 LEAT + HAB-V-TAGS LINK -1 MAIN-V);
#2022-09-07#	#$ Dalle mun ferten iskat lea go dus feber.

#2022-09-07##!! * **hab8** This is not HAB
#2022-09-07##MAP:hab8 (<hab> @ADVL>) TARGET HAB-ACTOR + Ill IF (*-1 BOS BARRIER NOT-NPMODADV)(*1 COPULAS BARRIER NOT-ADV-PCLE LINK *1 A OR N BARRIER NOT-ADV-PCLE);
#2022-09-07#	#$ Ellii šattai hoahppu.
#2022-09-07##!! * **hab5**  This is not HAB
#2022-09-07##MAP:hab5 (<hab> @ADVL>) TARGET HAB-ACTOR + HAB-CASE (NEGATE 0 HAB-ACTOR-NOT-HUMAN LINK *1 HUMAN BARRIER (N Nom))(*1 HAB-V BARRIER NOT-ADV-PCLE LINK *1 Nom BARRIER VFIN);
#2022-09-07#	#$ Mánás gollot gieđat. 

#2022-09-07#MAP:hab9 (<hab> @ADVL>) TARGET HAB-CASE IF (-1 FIRSTNAME)(0 Ord)(NEGATE 0 HAB-ACTOR-NOT-HUMAN LINK *1 HUMAN BARRIER (N Nom))(*1 LEAT + HAB-V-TAGS BARRIER NOT-ADV-PCLE);
#2022-09-07#	#$ Heinrich njealjádis lea rikkis eamit.
#2022-09-07#	
#2022-09-07#MAP:hab10 (<hab> @<ADVL) TARGET HAB-ACTOR + HAB-CASE (NEGATE 0 HAB-ACTOR-NOT-HUMAN OR Sem/Group LINK *1 HUMAN + Nom BARRIER S-BOUNDARY) (NEGATE 0 HAB-ACTOR-NOT-HUMAN LINK *1 Num BARRIER S-BOUNDARY LINK 1 HUMAN + Gen)(*-1 LEAT + HAB-V-TAGS BARRIER Nom OR S-BOUNDARY OR MAIN-V LINK -1 ADVLCASE OR Adv OR Po)((*1 Nom BARRIER NOT-NPMOD-ACC) OR (1 CC LINK *1 HAB-CASE BARRIER NOT-NPMOD-ACC LINK *1 Nom BARRIER NOT-NPMOD-ACC));
#2022-09-07#	#$ Dál leat sus 137 gáicca.
#2022-09-07#	#$ De lea sihke divššohasas ja su lagamus oapmahaččas vuoigatvuohta oažžut dieđuid.
#2022-09-07#	#$ Doppe leamaš sámiin stuora deaddu.

#2022-09-07##!! * **habDain** (<hab> @ADVL>) for (Pron Dem Pl Loc) if leat followed by Nom to the right
#2022-09-07#MAP:habDain (<hab> @ADVL>) TARGET (Pron Dem Pl Loc)(*1 LEAT + HAB-V-TAGS BARRIER NOT-ADV-PCLE - FAUXV LINK 1 Nom) ;
#2022-09-07#MAP:habDain2 (<hab> @ADVL>) TARGET (Pron Dem Pl Loc)(-1 Nom LINK -1 (Pron Interr))(*1 LEAT + HAB-V-TAGS BARRIER NOT-ADV-PCLE - FAUXV LINK *1 Ess) ;
#2022-09-07#	#$ Hui dávjá lea nu ahte dain leat olbmot, geat eai doarvái bures dovdda sámi kultuvrra eaige sin jurddašanvuogi.
#2022-09-07#	#$ Makkár vuoigatvuođat dain leat Norgga riikavuložin?
#2022-09-07#	#% Dat bulle ja goldne go dain ii leat ruohtas. 
#2022-09-07#	#Comment: hard to determin whether 'dain' is HAB or ADVL.
#2022-09-07#	
#2022-09-07#	
#2022-09-07## before relative clause
#2022-09-07#MAP:habRel (<hab> @ADVL>) TARGET HAB-ACTOR + HAB-CASE (NEGATE 0 HAB-ACTOR-NOT-HUMAN LINK *1 HUMAN BARRIER (N Nom))(*1 Rel BARRIER WORD LINK *1 FMAINV BARRIER S-BOUNDARY LINK *1 LEAT + HAB-V-TAGS BARRIER S-BOUNDARY OR MAIN-V);
#2022-09-07#	#$ Divššohasas, gii dárbbaša guhkit áiggi ja oktiiheivehuvvon dearvvašvuođabálvalusaid, lea vuoigatvuohta oažžut ráhkaduvvot oktagaslaš plána.

#2022-09-07#MAP:habEllipse (<hab> @<ADVL) TARGET HAB-ACTOR + HAB-CASE (1 Adv LINK 1 (N Nom))(-1 COMMA LINK -1 (N Nom) LINK *-1 LEAT + HAB-V-TAGS BARRIER NOT-NPMOD LINK -1 HAB-ACTOR + HAB-CASE);
#2022-09-07#	#$ Buot gánddain lea dreassa, nieiddain fas gákti.

#2022-09-07##!! * **habGen** (<hab> @<ADVL) hab for Gen; if Gen is located in the end of the sentence and Nom is sentence initial
#2022-09-07#MAP:habGen (<hab> @<ADVL) TARGET HAB-ACTOR + Gen (*-1 LEAT + HAB-V-TAGS BARRIER NOT-NPMODADV LINK -1 (N Nom) OR (Dem Nom))(1 EOC) ;
#2022-09-07#	#$ Dát lea áhči.

#2022-09-07#	#$ Riššat dat gal leat musge, jus eai leačča njuoskan.
#2022-09-07#	#$ Dán čieža oassálasti searvvis ii lean oktage boazodoalli, muhto kurssa oahpaheaddjis, Kjell Smestadas, lea doaivva ahte boazodolliide maid galgá gávdnot sierra heivehuvvon fálaldat.
#2022-09-07#	#$ Dás ii gávdno eará ágga go ahte njunuš olbmuin gielddas lea vuosteháhku sámegillii, go jo ákkat dán mearrádussii maid váilot, čujuha son das mii dáhpáhuvvá gieldda siste politihkalaččat.
#2022-09-07#	#$ Mu mielas goit galggaše sáhttit ovttasbargat, sis dat han leat ollu seamma beroštumit, galggaše goit sin áigumušaid ektui, luonddu gáhttet.
#2022-09-07#	#$ Ja son ii dahkan maidege dan jagi, muhto bođii fas nuppi jagi, ja de ledje sus guoimmit mielde, ja sii dahke darfegoađi vuohččan ja vuojehedje sámiid eret dasnai.
#2022-09-07#	#$ Sámediggi berošta erenoamážit das ahte ođđa boazodoalloláhka galgá sihkkarastit ja ovddidit boazodoalu vai mis maiddái boahtteáiggis sáhttá leat ceavzilis boazodoallu.
#2022-09-07#	#$ Dás lei buohkain vejolašvuohta vuoitit jus beare ledje doarvái áirruid oastán ja dan gal maiddái ollusat dahkege.
#2022-09-07#	#$ Juohke darfegoađášlágan goahti muohtaduoddaris ferte dohkket skuvlan; dás galget nuorat, čohkut dahje veallut duorggaid alde buolli árrandola ovddas vuostáiváldit oahpahusa olbmáin, geain alddiset lei unnán máhttu.
#2022-09-07#	#$ Buot gánddain lea dreassa, nieiddain fas gákti.
#2022-09-07#	#$ Doppe leamaš sámiin stuora deaddu.
#2022-09-07#	#$ Giellakantuvrras ii leat formála váldi álggahit gielladoaimmaid etáhtain, muhto veahkehit.
#2022-09-07#	#$ Duođalaš nana jáhku geažil lea divššohasas vuoigatvuohta biehttalit vuostáváldimis vara dahje varabuktagiid dahje biehttalit botkemis nealgudeami mii lea jođus.
#2022-09-07#	#$ Sin mearridanorgánain berre mearridanváldi leat nu viiddis go vejolaš ja nu čadni go vejolaš.
#2022-09-07#	#$ Sámedikkiin lea ráđđeaddi váldi buot sámi beroštumiide guoskevaš áššiin.
#2022-09-07#	#$ Sápmelaččat oasálaste maid dasa, muhto lassin ledje sis vel eará resursat.
#2022-09-07#	
#2022-09-07#	#% Olbmot jáhkke ahte stáhtainternáhtain lei buoret dássi, muhto dat guhkin eret duhtadedje dáláš gáibádusaid.
#2022-09-07#	#% Dan ulbmil das lea nannet oktavuođa ja mearridit vejolaš ovttasbargosurggiid mat leat ealáhusa oasálaččaide ávkin.
#2022-09-07#	#% Earát su luohkás ledje juo vissa njeallje siiddu su ovdalis matematihkka-girjjis.
#2022-09-07#	#% Mánáid-skuvllas gal lei mannan bures, muhto go álggii nuoraid-skuvlii, de ii gillen šat oba bargat ge rehkenastimiin.
#2022-09-07#	#% Dávjá muhtun sin fulkkiin lei várjaleaddji, doarjjan sidjiide.
#2022-09-07#	#% Das leat buorit lanjat čáppa guovllus.
#2022-09-07#	#% Das leat mielde olbmot geain lea sihke suoma ja sámi gullevašvuohta.
#2022-09-07#	#% Dat bulle ja goldne go dain ii lean ruohtas.
#2022-09-07#	#% Joavkkus leat guokte Riikaoasselávdegotti ovddasteaddji ja 2 Sámedikkis.
#2022-09-07#	#% Jus lea sáhka 12 jagi deavdán mánás, gii ii leat ovtta oaivilis mearrádusain, gozihanlávdegoddi galgá gieđahallat mearrádusa.
#2022-09-07#	#% Muhtin biirres leat gávcci 12 áirasis leamaš nissonolbmot, ja eará biirres leat buohkat geat leat válljejuvvon leamaš dievddut.
#2022-09-07#	#% Politihkas lei 1866 rájes sáhka ahte galggai go stivrregoahtit gii oažžu eatnama láigohit stáhtas.
#2022-09-07#	#% Searvegottiin lei dál ráfi miehtá Judea ja Galilea ja Samaria.
#2022-09-07#	#% Soabadanráđis galget leat golbma miellahtu ja seamma ollu várrelahtut.
#2022-09-07#	#% Sámedikkis lea leamaš čoahkkin 14.03.01.



#2022-09-07#MAP:pcle (@PCLE) TARGET Pcle ;
#2022-09-07#MAP:interj (@INTERJ) TARGET Interj ;
#2022-09-07#MAP:>P (@>P) Gen (1 Po) ;
#2022-09-07#MAP:>Pcoor (@>P) Gen (1 CC LINK *1 @>P BARRIER NOT-NPMOD) ;
#2022-09-07#MAP:>P (@>P) Gen - TIME-N (NEGATE -1 Pr)(1 Pr LINK 1 Gen) ;
#2022-09-07#	#$ Sápmelaččat guđet orrot Norgga bealde Deanu, geavahit seammá gávtti go sápmelaččat Suoma bealde Deanu.

#2022-09-07#MAP:p< (@P<) Gen (*-1 Pr BARRIER NOT-NPMOD)(NEGATE 1 Gen) ;
#2022-09-07#MAP:p<coor (@P<) Gen (-1 CRD OR COMMA LINK -1 @P<) ;
#2022-09-07#	#$ Maŋŋegiđa ja árrageasi guohtu boazu lulábeali rámaid, čohkaid ja jekkiid.

#2022-09-07#LIST JAHKI = "jahke" "jahki" ;

#2022-09-07#MAP:num< (@Num<) TARGET (N Sg Gen)(*-1 NUM + (Sg Nom) OR NUM + (Sg Acc) BARRIER NOT-A LINK NOT -1 JAHKI) ;

#2022-09-07#MAP:n<titel (@N<) TARGET ("jr") OR ("sr") (-1 Prop) ;
#2022-09-07#	#$ Loahpas jearai Johttisámelisttu Anders Somby jr. sudnos njuolga háliida go čearru gulahallat, juo dahje ii.

#2022-09-07#MAP:n<titel (@N<) TARGET INITIAL ((-1 N) OR (-1 CC LINK -1 INITIAL LINK -1 N))(NEGATE 1 Prop OR Num OR INITIAL) ;
#2022-09-07#	#$ Mearrádusaide nugo namahuvvo nuppi lađđasis bustávas e ja f gáibiduvvo ovttamielalašvuohta.


#2022-09-07#MAP:n< (@N<) TARGET (Sg Com)(-1 Coll) ;
#2022-09-07#	#$ Mun oidnen Ándde-guovtto Ristiinnáin.

#2022-09-07#MAP:n< (@N<) TARGET (Num Nom) ((-1 JAHKI OR ("diibmu")) OR (-1 Sem/Sur LINK 2 (":"))) ;
#2022-09-07#MAP:>nRCmpnd (@>N) TARGET RCmpnd ;

#2022-09-07#MAP:>num (@>Num) TARGET DUSSE (1 Num) ;
#2022-09-07#MAP:>n (@>N) TARGET DUSSE (1 N) ;
#2022-09-07#MAP:>a (@>A) TARGET DUSSE (1 A) ;

#2022-09-07#MAP:>nAttr (@>Num) TARGET Num - (Sg Nom) - (Sg Acc) (1 Num)  ;
#2022-09-07#MAP:>nAttr (@>Num) TARGET Attr (1 Num)  ;
#2022-09-07#MAP:>nAttr (@>A) TARGET Attr - Dem - Pron (*1 A - Gen OR Ord - Gen BARRIER NOT-NPMOD OR CC OR (N Gen) OR COMMA OR PUNCT)  ;

#2022-09-07#MAP:>nAttr (@>A) TARGET (Indef Attr) (*1 A - Gen OR Ord - Gen BARRIER NOT-NPMOD OR CC OR (N Gen) OR COMMA OR PUNCT)  ;
#2022-09-07#	#$ Dattetge ii leat muitaluvvon makkárge namahan veara geavahanriiddu birra dálolaččaid ja boazodoalu gaskkas.
#2022-09-07#MAP:>nAttr (@>N) TARGET Attr (*1 N BARRIER Num OR A - Attr OR Pr OR Ord)  ;
#2022-09-07#	#$
#2022-09-07#	#% Ledjego hilbadat mánát?
#2022-09-07#MAP:>nNum (@>N) TARGET Num - (Sg Nom) - (Sg Acc) - Sem/Date (*1 N BARRIER NOT-A OR Num)  ;

#2022-09-07#MAP:>n (@>Num) TARGET Gen - JAHKI (1 Num)(NEGATE 0 OKTA + Nom LINK *1 (N Pl Loc) BARRIER NOT-NPMOD)(NEGATE 0 Gen LINK 1 CC LINK 1 Gen LINK 1 Po) ;
#2022-09-07#MAP:>n (@>Num) TARGET $$CASE (0 Dem OR OKTA OR ("buorre" A) LINK 1 $$CASE + Num) ;
#2022-09-07#MAP:>a (@>A) TARGET Gen - TIME-N (1 A)(NEGATE 0 OKTA + Nom LINK *1 (N Pl Loc) BARRIER NOT-NPMOD)(NEGATE 0 Gen LINK 1 CC LINK 1 Gen LINK 1 Po) ;
#2022-09-07#MAP:>n (@>N) TARGET Gen - TIME-N - Sem/Date (*1 N BARRIER NOT-NPMOD OR A)(NEGATE 0 OKTA + Nom LINK *1 (N Pl Loc) BARRIER NOT-NPMOD)(NEGATE 0 Gen LINK 1 CC LINK 1 Gen LINK 1 Po)(NEGATE 0 HUMAN LINK 1 (Actio Nom) LINK 1 N) ;
#2022-09-07#MAP:>n (@>N) TARGET TIME-N + Gen (*1 TIME-N BARRIER NOT-NPMOD OR A)(NEGATE 0 OKTA + Nom LINK *1 (N Pl Loc) BARRIER NOT-NPMOD)(NEGATE 0 Gen LINK 1 CC LINK *1 Gen BARRIER NOT-NPMOD LINK 1 Po OR NP-BOUNDARY)(NEGATE 0 Gen LINK 1 COMMA LINK NEGATE *1 CC LINK 1 Gen) ;
#2022-09-07#MAP:>n (@>A) TARGET TIME-N + Gen (1 Ord LINK 1 TIME-N)(NEGATE 0 OKTA + Nom LINK *1 (N Pl Loc) BARRIER NOT-NPMOD)(NEGATE 0 Gen LINK 1 CC LINK 1 Gen LINK 1 Po) ;
#2022-09-07#MAP:>n (@>N) TARGET $$CASE (0 Dem OR OKTA OR ("buorre" A) LINK *1 $$CASE + N BARRIER NOT-NPMOD) ;
#2022-09-07#MAP:>ntittel (@>N) TARGET TIME-N + (Sg Nom) - Coll OR (Sem/Hum Sg Nom) - Coll OR Der/NomAg (1 Sem/Mal OR Sem/Fem OR Sem/Sur);
#2022-09-07#MAP:>veara (@>A) TARGET Gen  (1 ("veara" Nom))  ;
#2022-09-07#MAP:>nAttrCoor (@>N) TARGET Attr (1 CC LINK 1 @>N)  ;

#2022-09-07#LIST PREGEN = "álggogeahčen" "beallemuttus" "beallemuddu" ("bealli" N Sg Loc) "gaskamuddu"  "gaskkamuddu" ("gaskavuohta" N Sg Loc) "loahpageahčen" ("miella" N Sg Loc) "oktavuohta" "ovttasbargu" ;


#2022-09-07#MAP:>NTime (@>N) TARGET Gen IF (*-1 BOC BARRIER Pr)(NEGATE -1 Num)(0 TIME-N)(1 PREGEN);
#2022-09-07#	#$ Gursa bistá miessemánu beallemuddui.	

#2022-09-07#LIST MII = "mii" "mij" ;
#2022-09-07#LIST GII = "guhti" "gii" ;

#2022-09-07#MAP:pron< (@Pron<) (Pl Acc) (-1 MII + Pron OR GII + Pron)(*1 ("?")) ;
#2022-09-07#MAP:pron< (@Pron<) (Pl Acc) (-1 ("mihkkege" Pron) OR ("miige" Pron)) ;
#2022-09-07#MAP:pron< (@Pron<) (Sg Com) (0 HUMAN LINK -1 (Pers Pl1) OR (Pers Pl2) OR (Pers Pl1)) ;
#2022-09-07#	#Минь Бирет марто важодинек эйдень кужосо. > $ Moai Birehiin barggašeimme mánáidgárddis.
#2022-09-07#MAP:pron< (@Pron<) TARGET (Pl Loc) (*-1 Indef - Attr BARRIER NOT-NPMOD) ;
#2022-09-07#MAP:pron< (@Pron<) TARGET (Indef Nom) OR (Refl Nom) (-1 COPULAS + FMAINV LINK -1 (Pron Nom))(*1 Nom BARRIER NOT-A-ADV) ;
#2022-09-07#	#$ Soai leaba goappašagat nu jallat.
#2022-09-07#MAP:n< (@N<) TARGET (Refl Nom) ((*-1 (N Nom) BARRIER NOT-ADV-PCLE) OR (-1 FMAINV LINK *-1 (N Nom) BARRIER SV-BOUNDARY OR Nom))(NEGATE 1 Refl) ;
#2022-09-07#	#$ Eadni dal ieš čohkká ommangáttis ja boraha uhca nieiddažis gean son doallá askkistis.

#2022-09-07#MAP:>pron (@>Pron) GRADE-ADV OR DUSSE OR BUOT (1 Pron) ;
#2022-09-07#MAP:>pron (@>Pron) (Refl Nom) (1 Refl) ;
#2022-09-07#MAP:vaikko (@>Pron) ("vaikko") (1 Indef) ;
#2022-09-07#MAP:vaikko (@>ADVL) ("vaikko") (1 ("man" Adv)) ;

#2022-09-07#MAP:>a (@>A) TARGET GRADE-ADV (*1 A BARRIER NOT-NPMOD) ;
#2022-09-07#MAP:>aSup (@>A) TARGET ("buot") (*1 Superl BARRIER NOT-NPMOD) ;
#2022-09-07#	#$ Mun ja mu ustibat manaimet kinoi geahččat buot ođđaseamos Harry Potter-filmma.
#2022-09-07#MAP:>adv (@>ADVL) TARGET GRADE-ADV OR Attr (1 Adv) ;
#2022-09-07#MAP:>adv (@>ADVL) TARGET Loc (1 ("eret" Adv)) ;
#2022-09-07#MAP:>adv (@>N) TARGET GRADE-ADV (1 N) ;


#2022-09-07#MAP:pron< (@Pron<) TARGET $$CASE (0 Refl LINK *-1 $$CASE + Pers BARRIER S-BOUNDARY OR CC) ;
#2022-09-07#MAP:pron< (@N<) TARGET $$CASE (0 Refl LINK *-1 $$CASE + TIME-N BARRIER S-BOUNDARY OR CC) ;
#2022-09-07#	#$ Sis lea alddiset ruhta.


#2022-09-07#MAP (@VOC) TARGET HUMAN + Nom IF (-1 BOS OR REAL-CLB)(1 COMMA LINK NEGATE *1 HUMAN + Nom BARRIER NOT-NPMOD LINK 1 COMMA OR CC)(NEGATE 2 Rel) ;
#2022-09-07#	#$ Ustiban, in mun daga dutnje vearrut.


#2022-09-07#MAP:app<n (@APP-N<) TARGET (Num Nom) IF (-1 (Prop Sem/Sur Nom) LINK -1 ("\("))(1 COMMA LINK 1 ("s") LINK 1 CARDINALS LINK 1 ("\)"));
#2022-09-07#	#$ (Simonsen 1959, s. 45)

#2022-09-07#	
#2022-09-07#MAP:r286 (@APP-N<) TARGET (N Nom) IF (*-1 COMMA BARRIER APP-BOUNDARY OR CC LINK -1 (N Nom))(1 EOS) ;
#2022-09-07#MAP:r287 (@APP-N<) TARGET (N Nom) IF (*-1 COMMA BARRIER APP-BOUNDARY OR CC LINK -1 (N Nom))(1 COMMA LINK 1 APP-BOUNDARY)  ;
#2022-09-07#	## Gulan go Bienne Káre-Ánne, skuvlla bassi, bohtá. 
#2022-09-07#MAP:r288 (@APP-Pron<) TARGET (N Nom) IF (*-1 COMMA BARRIER APP-BOUNDARY OR CC LINK -1 (Pron Nom))(1 EOS) ;
#2022-09-07#MAP:r289 (@APP-Pron<) TARGET (N Nom) IF (*-1 COMMA BARRIER APP-BOUNDARY OR CC LINK -1 (Pron Nom))(1 COMMA LINK 1 S-BOUNDARY) ;
#2022-09-07#	#$ Mon lean Will Turner, Sáppatbátti Turnera bárdni!
#2022-09-07#MAP:app-pron< (@APP-Pron<) TARGET $$CASE - Gen (0 N LINK -1 $$CASE + Pers)(1 VFIN) ;
#2022-09-07#	#$ Ja moai boazodoalloáirasat áigguime vaikko guovttá joatkit barggu.
#2022-09-07#		
#2022-09-07#MAP:r290 (@APP-N<) TARGET (N Acc) - TIME-N IF (*-1 (N Acc) BARRIER APP-BOUNDARY OR CC OR (N Nom) LINK NOT *-1 COMMA BARRIER APP-BOUNDARY OR CC)(1 EOS) ;
#2022-09-07#	## Dovddatgo Bienne Káre-Ánne, skuvlla bassi? 	
#2022-09-07#MAP:r291 (@APP-N<) TARGET (N Acc) - TIME-N IF (*-1 (N Acc) BARRIER APP-BOUNDARY OR CC OR (N Nom) LINK NOT *-1 COMMA BARRIER APP-BOUNDARY OR CC)(1 COMMA LINK 1 S-BOUNDARY) ;	
#2022-09-07# 
#2022-09-07#MAP:nugoAppn< (@APP-N<) TARGET (N Acc) IF (*-1 ("nugo") OR ("sihke") BARRIER APP-BOUNDARY LINK -1 COMMA LINK -1 (N Acc) LINK *-1 BOS BARRIER NOT-NPMOD)(*1 COMMA BARRIER APP-BOUNDARY) ;
#2022-09-07#MAP:nugoAppn< (@APP-Pron<) TARGET (N Acc) IF (*-1 ("nugo") OR ("sihke") BARRIER APP-BOUNDARY LINK -1 COMMA LINK -1 (Pron Acc) LINK *-1 BOS BARRIER NOT-NPMOD)(*1 COMMA BARRIER APP-BOUNDARY) ;
#2022-09-07#	#$ Muhtun sámi biktasiid, nugo gápmagiid ja vuoddagiid, sii geavahedje guhkit, gitta 1960-logu rádjai.

#2022-09-07#MAP:r292 (@APP-Pron<) TARGET (N Acc) IF (*-1 COMMA BARRIER APP-BOUNDARY OR CC OR (N Nom) LINK -1 (Pron Acc) LINK NOT *-1 COMMA BARRIER APP-BOUNDARY OR CC)(1 EOS) ;
#2022-09-07#MAP:r293 (@APP-Pron<) TARGET (N Acc) IF (*-1 COMMA BARRIER APP-BOUNDARY OR CC OR (N Nom) LINK -1 (Pron Acc) LINK NOT *-1 COMMA BARRIER APP-BOUNDARY OR CC)(1 COMMA LINK 1 S-BOUNDARY) ;	
#2022-09-07#	#$ Oidnet go Mihkkala, min nuoramus bártni?
#2022-09-07#	#$ Mon oainnán fierpmi, su mearkka, ja dieđán ahte Spider-Man lea leamaš das.	

#2022-09-07#		
#2022-09-07#MAP:r244 (@APP-ADVL<) TARGET N + LOC IF (*-1 COMMA BARRIER APP-BOUNDARY OR CC OR ADVLCASE LINK -1 DOPPE)(1 EOS) ;	
#2022-09-07#MAP:r245 (@APP-ADVL<) TARGET (N Ill) IF (*-1 COMMA BARRIER APP-BOUNDARY OR CC LINK -1 DOHKO  LINK *-1 BOS BARRIER APP-BOUNDARY)(1 COMMA) ;
#2022-09-07#MAP:r246 (@APP-Pron<) TARGET (N Ill) IF (*-1 COMMA BARRIER APP-BOUNDARY OR CC LINK -1 DOHKO)(1 EOS) ;
#2022-09-07#MAP:r247 (@APP-Pron<) TARGET (N Ill) IF (*-1 COMMA BARRIER APP-BOUNDARY OR CC LINK -1 DOHKO)(1 COMMA LINK 1 S-BOUNDARY OR CC) ;

#2022-09-07#MAP:r248 (@APP-ADVL<) TARGET (N Gen) IF (*-1 COMMA BARRIER APP-BOUNDARY OR CC LINK -1 TIME-N OR TIME-ADV)(0 TIME-N + Gen)(1 EOS); 	
#2022-09-07#	#$ Mun vuolggán ihttin, bearjadaga.

#2022-09-07#MAP:appAdvlAcc (@APP-ADVL<) TARGET (Num Acc) IF (*-1 COMMA BARRIER APP-BOUNDARY OR CC LINK -1 TIME-N OR TIME-ADV)(1 TIME-N + Gen LINK 1 EOS); 	
#2022-09-07#	#$ Doppe son orui guhká, vihtta jagi.
#2022-09-07#	
#2022-09-07#MAP:r249 (@APP-ADVL<) TARGET Pr IF (*-1 COMMA BARRIER NOT-ADV LINK -1 TIME-ADV OR TIME-N)(*1 (N Gen) OR (Pers Gen) BARRIER NOT-NPMOD LINK 1 EOS);	
#2022-09-07#MAP:r250 (@APP-ADVL<) TARGET Pr IF (*-1 COMMA BARRIER NOT-ADV LINK -1 TIME-ADV OR TIME-N LINK -1 BOS)(*1 (N Gen) OR (Pers Gen) BARRIER APP-BOUNDARY OR CC LINK 1 COMMA);	
#2022-09-07#	#$ Dolin, ovdal soađi, olbmot lávejedje vuovdit joŋaid. 
#2022-09-07#	
#2022-09-07#MAP:r251 (@APP-ADVL<) TARGET (Po) IF (-1 Gen LINK *-1 COMMA BARRIER NOT-ADV LINK -1 TIME-ADV OR TIME-N LINK -1 BOS)(1 COMMA);	
#2022-09-07#MAP:r252 (@APP-ADVL<) TARGET (Po) IF (-1 Gen LINK *-1 COMMA BARRIER NOT-ADV LINK -1 TIME-ADV OR TIME-N)(1 EOS);	
#2022-09-07#	#$ Daid sii geavahedje guhkit, gitta 1960-logu rádjai.		

#2022-09-07#SET NOT-NP = VFIN-NOT-NEG OR ConNeg OR Inf OR Pcle OR Interj OR CS ;

#2022-09-07#MAP:voc (@VOC) TARGET Nom IF (*-1 COMMA BARRIER NOT-NP OR CC LINK *-1 (V Sg2) OR (V Pl2) OR (Pron Sg2) OR (Pron Pl2) LINK NOT 0 LEAT)(1 EOS)(0 HUMAN)(NEGATE 0 Sg LINK *-1 V-SG3 BARRIER REAL-V);
#2022-09-07#	## Vuoi du, Betsaida!
#2022-09-07#	
#2022-09-07#MAP:voc (@VOC) TARGET Nom IF (-1 Attr LINK *-1 COMMA BARRIER NOT-NP OR CC LINK *-1 (V Sg2) OR (V Pl2) OR (Pron Sg2) OR (Pron Pl2) LINK NOT 0 LEAT)(1 EOS)(0 HUMAN)(NEGATE 0 Sg LINK *-1 V-SG3 BARRIER REAL-V);
#2022-09-07#	
#2022-09-07#	
#2022-09-07#MAP:voc (@VOC) TARGET (N Nom) IF (*-1 COMMA BARRIER NP-BOUNDARY LINK *-1 ("boahtin" Nom) BARRIER REAL-V OR S-BOUNDARY LINK -1 ("bures"))(1 EOC);
#2022-09-07#	## Bures boahtin Čáhppes Bearralii, Miss Turner!	

#2022-09-07#MAP:voc (@VOC) TARGET Nom IF (-1 COMMA)(0 Pers)(0 Sg2 OR Pl2) (*1 Nom BARRIER NOT-NPMOD LINK 1 EOS);
#2022-09-07#	## Gáidet eret mu luhtte, dii verrošeaddjit! 

#2022-09-07#MAP:voc (@VOC) TARGET (N Nom) IF (-2 BOS)(-1 (Imprt Sg2))(NEGATE -1 Adv OR Qst)(1 EOS);
#2022-09-07#	## Gula eadni!

#2022-09-07#MAP:voc (@VOC) TARGET (N Nom) IF (-3 BOS)(-2 (Imprt Sg2) OR (Sg2 Qst))(NEGATE -2 Nom) (-1 COMMA)(1 COMMA);
#2022-09-07#	## Buvttes, Máhtte, goikemuoraid!

#2022-09-07#MAP:voc (@VOC) TARGET (N Nom) IF (-4 BOS)(-3 (V Sg2))(-2 go)(-1 COMMA)(1 COMMA);
#2022-09-07#	## It go, bártnážan, boađáše fargga ruoktot?

#2022-09-07#MAP:voc (@VOC) TARGET (N Nom) IF (*-1 BOS BARRIER NOT-ADV-PCLE)(0 HUMAN LINK 1 EOS);
#2022-09-07#	#$ Ustibažžan!


#2022-09-07#MAP:r294 (@APP-N<) TARGET (N Loc) IF (*-1 COMMA BARRIER APP-BOUNDARY OR CC OR ADVLCASE LINK -1 (N Loc))(1 EOS) ;	
#2022-09-07#MAP:r295 (@APP-N<) TARGET (N Loc) IF (*-1 COMMA BARRIER APP-BOUNDARY OR CC OR ADVLCASE LINK -1 (N Loc))(1 COMMA LINK 1 S-BOUNDARY OR Adv) ;	

#2022-09-07#MAP:r296 (@APP-Pron<) TARGET (N Loc) IF (*-1 COMMA BARRIER APP-BOUNDARY OR CC OR ADVLCASE LINK -1 (Pron Loc))(1 EOS) ;	
#2022-09-07#MAP:r297 (@APP-Pron<) TARGET (N Loc) IF (*-1 COMMA BARRIER APP-BOUNDARY OR CC OR ADVLCASE LINK -1 (Pron Loc))(1 COMMA LINK 1 S-BOUNDARY OR Adv) ;	
#2022-09-07#	#$ Ánde orru Oslos, Norgga oaivegávpogis.	

#2022-09-07#MAP:r298 (@APP-N<) TARGET (N Ill) IF (*-1 COMMA BARRIER APP-BOUNDARY OR CC LINK -1 (N Ill))(1 EOS) ;
#2022-09-07#MAP:App-N<Punct (@APP-N<) TARGET (N Ill) IF (*-1 ("–") BARRIER APP-BOUNDARY LINK -1 (N Ill)) ;
#2022-09-07#	#$ Min jurdagat mannet lagamuččaide – bearrašii, sohkii ja ustibiidda.

#2022-09-07#MAP:r299 (@APP-N<) TARGET (N Ill) IF (*-1 COMMA BARRIER APP-BOUNDARY OR CC LINK -1 (N Ill))(1 COMMA LINK 1 S-BOUNDARY) ;	
#2022-09-07#	
#2022-09-07#MAP:r300 (@APP-Pron<) TARGET (N Ill) IF (*-1 COMMA BARRIER APP-BOUNDARY OR CC LINK -1 (Pers Ill))(1 EOC OR COMMA) ;		
#2022-09-07##MAP:r301 (@APP-Pron<) TARGET (N Ill) IF (*-1 COMMA BARRIER APP-BOUNDARY OR CC LINK -1 (Pers Ill))(1 COMMA LINK 1 S-BOUNDARY) ;			
#2022-09-07#	#$ Dan mun muitalan dušše dutnje, mu buoremus olbmái.

#2022-09-07#MAP:r302 (@APP-N<) TARGET (N Ill) IF (*-1 COMMA BARRIER APP-BOUNDARY OR CC LINK -1 (N Ill) LINK *-1 BOS BARRIER APP-BOUNDARY)(1 COMMA) ;	
#2022-09-07#MAP:r303 (@APP-Pron<) TARGET (N Ill) IF (*-1 COMMA BARRIER APP-BOUNDARY OR CC LINK -1 (Pron Ill) LINK *-1 BOS BARRIER APP-BOUNDARY)(1 COMMA) ;	
#2022-09-07#	# Тонеть, паро ялгай, ёвтнеса весе. >$ Dutnje, mu buori ustibii, mun muitalan buot.
#2022-09-07#	
#2022-09-07#MAP:r304 (@APP-N<) TARGET (N Com) IF (*-1 COMMA BARRIER APP-BOUNDARY OR CC LINK -1 (N Com))(1 EOS) ;	
#2022-09-07#MAP:r305 (@APP-N<) TARGET (N Com) IF (*-1 COMMA BARRIER APP-BOUNDARY OR CC LINK -1 (N Com))(1 COMMA LINK 1 S-BOUNDARY OR Adv) ;	
#2022-09-07#	#$ Mun hupmen Máhte-Iŋggáin, Niillas-Máhte eamidiin.

#2022-09-07#MAP:r306 (@APP-Pron<) TARGET (N Com) IF (*-1 COMMA BARRIER APP-BOUNDARY OR CC LINK -1 (Pron Com))(1 EOS) ;				
#2022-09-07#MAP:r307 (@APP-Pron<) TARGET (N Com) IF (*-1 COMMA BARRIER APP-BOUNDARY OR CC LINK -1 (Pron Com))(1 COMMA LINK 1 S-BOUNDARY OR Adv) ;									

#2022-09-07#MAP:r308 (@APP-N<) TARGET (N Nom) IF (*-1 COMMA BARRIER APP-BOUNDARY OR CC LINK -1 (N Nom) LINK *-1 BOS BARRIER APP-BOUNDARY)(1 COMMA LINK 1 VFIN) ;
#2022-09-07#MAP:r309 (@APP-Pron<) TARGET (N Nom) IF (*-1 COMMA BARRIER APP-BOUNDARY OR CC LINK -1 (Pron Nom) LINK *-1 BOS BARRIER APP-BOUNDARY)(1 COMMA LINK 1 VFIN) ;
#2022-09-07#	#$ Will Turner, Sáppatbátti Turnera bárdni, lea boahtán.
#2022-09-07#	
#2022-09-07#MAP:r310 (@APP-N<) TARGET (N Loc) IF (*-1 COMMA BARRIER APP-BOUNDARY OR CC LINK -1 (N Loc) LINK *-1 BOS BARRIER APP-BOUNDARY)(1 COMMA LINK 1 VFIN) ;		
#2022-09-07#MAP:r311 (@APP-Pron<) TARGET (N Loc) IF (*-1 COMMA BARRIER APP-BOUNDARY OR CC LINK -1 (Pron Loc) LINK *-1 BOS BARRIER APP-BOUNDARY)(1 COMMA LINK 1 VFIN) ;		
#2022-09-07#	#$ Romssas, Davvi-Norgga stuorimus gávpogis, leat vaikko man ollu studeanttat.

#2022-09-07#MAP:r312 (@APP-N<) TARGET (N Nom) IF (-1 (N Gen) OR (Pers Gen) LINK *-1 CC BARRIER APP-BOUNDARY LINK -1 (N Gen) OR (Pers Gen) LINK *-1 COMMA BARRIER APP-BOUNDARY OR CC LINK -1 (N Nom))(1 EOS) ;
#2022-09-07#MAP:r313 (@APP-N<) TARGET (N Nom) IF (-1 (N Gen) OR (Pers Gen) LINK *-1 CC BARRIER APP-BOUNDARY LINK -1 (N Gen) OR (Pers Gen) LINK *-1 COMMA BARRIER APP-BOUNDARY OR CC LINK -1 (N Nom))(1 COMMA LINK 1 S-BOUNDARY) ;

#2022-09-07#MAP:r314 (@APP-Pron<) TARGET (N Nom) IF (-1 (N Gen) OR (Pers Gen) LINK *-1 CC BARRIER APP-BOUNDARY LINK -1 (N Gen) OR (Pers Gen) LINK *-1 COMMA BARRIER APP-BOUNDARY OR CC LINK -1 (Pron Nom))(1 EOS) ;
#2022-09-07#MAP:r315 (@APP-Pron<) TARGET (N Nom) IF (-1 (N Gen) OR (Pers Gen) LINK *-1 CC BARRIER APP-BOUNDARY LINK -1 (N Gen) OR (Pers Gen) LINK *-1 COMMA BARRIER APP-BOUNDARY OR CC LINK -1 (Pron Nom))(1 COMMA LINK 1 S-BOUNDARY) ;


#2022-09-07#MAP:r316 (@APP-N<) TARGET (N Nom) IF (*-1 ("nugo") OR ("sihke") BARRIER APP-BOUNDARY LINK -1 COMMA LINK -1 (N Nom))(*1 EOS BARRIER APP-BOUNDARY) ;
#2022-09-07#MAP:r317 (@APP-Pron<) TARGET (N Nom) IF (*-1 ("nugo") OR ("sihke") BARRIER APP-BOUNDARY LINK -1 COMMA LINK -1 (Pron Nom))(*1 EOS BARRIER APP-BOUNDARY) ;	
#2022-09-07#	#$ Návetgoađis ledje ealut, nugo sávzzat, gáiccat ja gusat. 
#2022-09-07#	
#2022-09-07#MAP:r318 (@APP-N<) TARGET (N Nom) IF (*-1 ("nugo") OR ("sihke") BARRIER APP-BOUNDARY LINK -1 COMMA LINK -1 (N Nom) LINK *-1 BOS BARRIER APP-BOUNDARY)(*1 COMMA BARRIER APP-BOUNDARY LINK 1 VFIN) ;
#2022-09-07#MAP:r319 (@APP-Pron<) TARGET (N Nom) IF (*-1 ("nugo") OR ("sihke") BARRIER APP-BOUNDARY LINK -1 COMMA LINK -1 (Pron Nom) LINK *-1 BOS BARRIER APP-BOUNDARY)(*1 COMMA BARRIER APP-BOUNDARY LINK 1 VFIN) ;
#2022-09-07#	#$ Mu vánhemat, sihke áhčči ja eadni, leaba jápmán. 
#2022-09-07# 
#2022-09-07#MAP:r320 (@APP-N<) TARGET (N Acc) IF (*-1 ("nugo") OR ("sihke") BARRIER APP-BOUNDARY LINK -1 COMMA LINK -1 (N Acc) LINK *-1 BOS BARRIER APP-BOUNDARY)(*1 COMMA BARRIER APP-BOUNDARY) ;
#2022-09-07#MAP:r321 (@APP-Pron<) TARGET (N Acc) IF (*-1 ("nugo") OR ("sihke") BARRIER APP-BOUNDARY LINK -1 COMMA LINK -1 (Pron Acc) LINK *-1 BOS BARRIER APP-BOUNDARY)(*1 COMMA BARRIER APP-BOUNDARY) ;
#2022-09-07#	#$ Muhtun sámi biktasiid, nugo gápmagiid ja vuoddagiid, sii geavahedje guhkit, gitta 1960-logu rádjai.

#2022-09-07##MAP (@SUBJ>) TARGET Nom (*-1 BOS BARRIER WORD)(1 (":")) ;
#2022-09-07##MAP (@<SPRED) TARGET Nom (*-1 (":") BARRIER WORD)(*1 EOS BARRIER Nom) ;
#2022-09-07#	#$ Fáksa: 22242786

#2022-09-07##MAP:>FMAINV (@SUBJ>) SON (*1 CC LINK *1 @>P BARRIER NOT-NPMOD) ;
#2022-09-07# #сон ... ярсы

#2022-09-07#MAP:Relsubj> (@SUBJ>) TARGET (Rel Nom) IF (*1 FMAINV) ;
#2022-09-07#	#$ Go dat geažit mat geaigut leaba bajás, gohčoduvvoba spahká-oaivin.
#2022-09-07# 
#2022-09-07# 
#2022-09-07#	# Subject predicatives - SPRED 
#2022-09-07# 
#2022-09-07##!! * **spred<obj** (@SPRED<OBJ) for Acc; the object of an SPRPED. Not to be mistaken with OPRED. If SPRED is to the left, and copulas is to the left of it. Nom or Hab are found sentence initially.
#2022-09-07#MAP:spred<obj (@SPRED<OBJ) TARGET Acc (*-1 Nom BARRIER NOT-NPMODADV LINK *-1 COPULAS + FMAINV BARRIER NOT-ADV-PCLE LINK *-1 Nom OR <hab> BARRIER WORD - Neg)(NEGATE *1 TRANS-V + FMAINV BARRIER SV-BOUNDARY OR COMMA) ;
#2022-09-07#	#$ Mánát leat oažžulat guliid.
#2022-09-07#	#$ Dain lea fáktemuš juohke balvva.
#2022-09-07#	#% Divššohasas lea vuoigatvuohta iežas journála geahččat
#2022-09-07# 
#2022-09-07# 
#2022-09-07##!! * **Hab<spred** (@<SPRED) for Nom; if copulas, goallut or jápmit is FMAINV and habitive or human Loc is found to the left. OR: if Ill or @Pron< followed by HAB are found to the left.
#2022-09-07#MAP:Hab<spred (<ext> @<SUBJ) TARGET Nom - OKTA ((*-1 COPULAS + FMAINV OR ("jápmit") OR ("goallut") + Der/Pass BARRIER NOT-NPMODADV LINK *-1 <hab> OR HUMAN + HAB-CASE BARRIER SV-BOUNDARY) OR (*-1 Ill OR @Pron< OR Po BARRIER NOT-NPMOD OR COMMA LINK *-1 COPULAS + FMAINV BARRIER NOT-NPMODADV LINK *-1 <hab> BARRIER SV-BOUNDARY)) ;
#2022-09-07#	#$ Sus lea alddis buorit attáldagat.

#2022-09-07##!! * **Hab>Advlcase<spred** (<ext> @<SUBJ) for Nom; it allows adverbials with Ill/Loc/Com/Ess to be found inbetween HAB and <ext>.
#2022-09-07#MAP:Hab>Advlcase<spred (<ext> @<SUBJ) TARGET Nom - OKTA (*-1 ADVLCASE BARRIER NOT-ADV-PCLE LINK -1 COPULAS + FMAINV LINK *-1 <hab> BARRIER WORD - Neg) ;
#2022-09-07#	#$ Sus lea álgovuorus dušše guohtunvuoigatvuohta dáidda.
#2022-09-07#	#$ Boazosápmelaččain ii leat bassin vejolaš fievrridit gálvvu gerresiiguin.
#2022-09-07# 
#2022-09-07##!! * **Nom>Advlcase<spred** (<ext> @<SUBJ) for Nom; it allows adverbials with Ill/Loc/Com/Ess to be found inbetween Nom and <ext> @<SUBJ.
#2022-09-07#MAP:Nom>Advlcase<spred (<ext> @<SUBJ) TARGET Nom - OKTA (*-1 ADVLCASE - Ess BARRIER NOT-ADV-PCLE LINK -1 COPULAS + FMAINV LINK *-1 Nom BARRIER WORD - Neg) ;
#2022-09-07#	#$ Oppalaš hábmema strategiija mii galgá váikkuhit dasa ahte servodat šaddá buohkaide olahahttin, ja dasa ahte vealaheapmi eastaduvvo, lea maid deattuhuvvon.
#2022-09-07#	#% Son lea oahpaheaddjin hui čeahppi.
#2022-09-07# 
#2022-09-07##!! * **<spred** (<ext> @<SUBJ) for Nom; if copulas to the left, and some kind of adverb, N Loc, time related word or Po to the left of it. OR: if Ill or @Pron< to the left, followed by copulas and the before mentioned to the left of copulas. 
#2022-09-07#MAP:<spred (<ext> @<SUBJ) TARGET Nom - OKTA ((*-1 COPULAS + FMAINV BARRIER NOT-NPMODADV OR ("mielde") LINK *-1 DOPPE OR (N Loc) OR Ill OR (Sem/Time Adv) OR TIME-N + Gen OR TIME-ADVL OR Po OR Adv BARRIER SV-BOUNDARY) OR (*-1 Ill OR @Pron< BARRIER NOT-NPMOD  LINK *-1 COPULAS + FMAINV BARRIER NOT-NPMODADV LINK *-1 DOPPE OR (Sem/Plc Loc) OR Ill OR Sem/Time OR TIME-ADVL OR Po BARRIER SV-BOUNDARY))(NEGATE *1 Nom OR Ess BARRIER NOT-NPMOD) ;
#2022-09-07#	#$ Dá lea dutnje biebmu.
#2022-09-07#	#$ Juohke guovllu gávttis lea sierralágan holbi.

#2022-09-07##!! * **<spred** (<ext> @<SUBJ) for Nom, but not for Pers. To the left boahtit or heaŋgát as MAINV, and futher to the left is some kind of place related word, or time related word
#2022-09-07#MAP:<spred (<ext> @<SUBJ) TARGET Nom - OKTA - Pers (*-1 ("boahtit") + FMAINV OR ("heaŋgát") BARRIER NOT-NPMODADV LINK *-1 DOPPE OR (N Loc) OR (Rel Loc) OR (Sem/Time Adv) OR TIME-N + Gen OR TIME-ADVL BARRIER SV-BOUNDARY)(NEGATE *1 Nom OR Ess BARRIER NOT-NPMOD) ;
#2022-09-07#	#$ Doppe boahtá áhčči.

#2022-09-07#MAP:<spred (@<SPRED) TARGET Nom - OKTA (*-1 (N Nom) BARRIER NOT-NPMODADV OR COMMA LINK -1 COPULAS + FMAINV LINK -1 TIME-N OR TIME-ADVL OR Sem/Time) ;
#2022-09-07#	#$ Ovdal lei gákti árgabivttas ja bargobivttas, muhto dál dat lea čikŋabivttas.

#2022-09-07##!! * **<spredQst1** (<ext> @<SUBJ) for Nom in a typically question sentence; if A) Hab, some kind of place word, Po or Nom to the left, and Qst followed by copulas to the left. B) same as a, only the Qst-pcle is attached to copulas. C) Qst to the left, with copulas to its left, but not if two Nom:s are found somewhere to the right. D) copulas to the left, and BOS to the left. E) Loc or Ill to the left, and Loc or Hab to the left of this, Qst and copulas to the left. F) Num @>N to the left, Hab, some kind of place word, Po or Nom to the left, and Qst followed by copulas to the left. NOTE) for all these rules; human, Loc or Sem/Plc not allowed to the right.
#2022-09-07#MAP:<spredQst1 (<ext> @<SUBJ) TARGET Nom - Pers (
#2022-09-07#(*-1 <hab> OR DOPPE OR (Sem/Plc Loc) OR (Sem/Time Adv) OR TIME-N + Gen OR TIME-ADVL OR Po OR Nom BARRIER NOT-NPMODADV LINK *-1 Qst BARRIER NOT-NPMOD LINK -1 COPULAS) OR 
#2022-09-07#(*-1 <hab> OR DOPPE OR (Sem/Plc Loc) OR (Sem/Time Adv) OR TIME-N + Gen OR TIME-ADVL OR Po OR Nom BARRIER NOT-NPMODADV LINK *-1 Qst + COPULAS) OR 
#2022-09-07#(*-1 Qst BARRIER NOT-NPMOD LINK -1 COPULAS LINK NEGATE *1 Nom LINK *1 Nom BARRIER NOT-A-ADV) OR 
#2022-09-07#(*-1 COPULAS BARRIER NOT-NPMOD LINK -1 BOS) OR 
#2022-09-07#(-1 Loc OR Ill LINK -1 Loc OR <hab> LINK *-1 Qst BARRIER NOT-NPMOD LINK -1 COPULAS + FMAINV) OR 
#2022-09-07#(-1 (Num @>N) LINK *-1 <hab> OR DOPPE OR (Sem/Plc Loc) OR (Sem/Time Adv) OR TIME-N + Gen OR TIME-ADVL OR Po OR Nom BARRIER NOT-NPMODADV LINK -1 Qst LINK -1 COPULAS))
#2022-09-07#(NEGATE *1 HUMAN OR Loc OR Sem/Plc BARRIER NOT-NPMOD OR CC OR COMMA) ;
#2022-09-07#	#$ Lea go dis ruhta?
#2022-09-07#	#$ Leat go dudnos alddáde bohccot?
#2022-09-07#	#$ Lea go dus dušše okta mánná?
#2022-09-07#	#$ Leat go min dihtorat ođđaáigásaččat?
#2022-09-07##Comment: It might be easier to read this, if it hadn't been clinched all together as one spredQst-rule.. Concider dividing it into at least two rules: one for Hab/DOPPE and the other one for the rest. A,B and F make one pair. 2

#2022-09-07##!! * **<spredQst2** (@<SPRED) for Nom; in a typically question sentence; differs from <spredQst1 by not beeing as restricted to the right. Though you are not allowed to be Pers or human.
#2022-09-07#MAP:<spredQst2 (@<SPRED) TARGET Nom - Pers (*-1 Qst BARRIER NOT-NPMOD LINK -1 COPULAS + FMAINV LINK -1 BOS)(NEGATE 0 HUMAN)(NEGATE *1 Nom BARRIER NOT-NPMOD) ;
#2022-09-07#	#$ Lea go duohtavuohta sukcasiin Jack Sparrow birra?
#2022-09-07#	#$ Leat go árgi bajándálkkis? 

#2022-09-07##!! * **Nom<spredQst** (@<SPRED) for Nom; in a typically question sentence. Differs from <spredQst2 by letting Nom be found between SPRED and copulas
#2022-09-07##MAP:Nom<spredQst (@<SPRED) TARGET Nom - Pers ((*-1 Nom BARRIER NOT-ADV-PCLE LINK *-1 COPULAS + FMAINV BARRIER NOT-NPMODADV) OR (*-1 Nom BARRIER NOT-ADV-PCLE LINK *-1 Qst BARRIER NOT-NPMOD LINK -1 COPULAS + FMAINV BARRIER NOT-NPMODADV))(NEGATE *-1 COPULAS + FMAINV BARRIER SV-BOUNDARY LINK *-1 Nom OR <hab> BARRIER BOC OR NOT-NPMODADV - Neg)  ;
#2022-09-07#	#$ Leago Čáhppes Bearral oahpis dutnje?
#2022-09-07#	#% Muhto ii dalle leat velá guhkki idja.
#2022-09-07#	

#2022-09-07#MAP:<spredBeforeSubj (@<SPRED) TARGET (A Nom) (*-1 Qst BARRIER NOT-NPMOD LINK -1 COPULAS + FMAINV LINK -1 BOS)(1 (N Nom));# OR (*-1 COPULAS BARRIER NOT-NPMOD LINK -1 BOS))(1 (N Nom)) ;
#2022-09-07#	#$ Ledje go hilbadat mánát?
#2022-09-07#  
#2022-09-07##!! * **<spred** (@<SPRED) for A Nom or N Nom if; the subject Nom is on the same side of copulas as you: on the right side of copulas
#2022-09-07#MAP:<spred (@<SPRED) TARGET (A Nom) OR (N Nom)(*-1 (N Nom) BARRIER NOT-A LINK -1 COPULAS + FMAINV)(NEGATE -1 @<SPRED) ;
#2022-09-07#	#$ Girjji namma čujuha dasa ahte dološ myhtain leat sámit mánát.

#2022-09-07##!! * **<spredVeara** (@<SPRED) for veara + Nom; if genitive immediately to the right, and intransitive mainverb to the right of genitive
#2022-09-07#MAP:<spredVeara (@<SPRED) TARGET ("veara" Nom) (-1 Gen LINK *-1 IV + FMAINV BARRIER SV-BOUNDARY) ; 
#2022-09-07#	#$ Son oinnii buot dan mii lea ráhkistan ja gudnejahttin veara.

#2022-09-07##!! * **leftCop<spred** (@<SPRED) for Nom; if copulas is the main verb to the left, and there is no Ess found to the left of cop (note that Loc is allowed between target and cop). OR: if you are Coll or Sem/Group with copulas to your left. 
#2022-09-07#MAP:leftCop<spred (@<SPRED) TARGET Nom ((*-1 COPULAS + FMAINV BARRIER NOT-NPMODADV OR S-BOUNDARY LINK NEGATE -1 Ess LINK NOT -1 Nom) OR 
#2022-09-07#(-1 Loc LINK *-1 COPULAS + FMAINV BARRIER NOT-NPMODADV OR S-BOUNDARY LINK NEGATE -1 Ess LINK NOT -1 Nom) OR 
#2022-09-07#(0 Coll OR Sem/Group LINK *-1 COPULAS + FMAINV BARRIER NOT-NPMODADV))
#2022-09-07#(NEGATE 1 Nom - Rel)(NEGATE *1 Nom - Rel BARRIER NOT-A OR COMMA)(NEGATE 0 Gen OR Attr OR ("buorre") LINK 1 N)(NEGATE 1 Ess LINK NOT *-2 SUBJ BARRIER S-BOUNDARY) ;
#2022-09-07#	#$ Čállit lea buoret go lohkat.
#2022-09-07#	#$ Soai leat goappašagat nu jallat.

#2022-09-07##!! * **<spredLocEXPERIMENT** (@<SPRED) for material Loc; if you are to the right of copulas, and the Nom to the left of copulas is not a hab-actor
#2022-09-07#MAP:<spredLocEXPERIMENT (@<SPRED) TARGET (Sem/Mat N Loc) (*-1 COPULAS + FMAINV BARRIER NOT-ADV-PCLE LINK *-1 Nom BARRIER VFIN-NOT-NEG LINK NEGATE 0 HAB-ACTOR) ;
#2022-09-07#	#$ Niibi lea stális.
#2022-09-07#	#% Niibi lea olbmos.
#2022-09-07#	#% Olmmoš lea muoras.
#2022-09-07#	# Comment: if we can use the Sem-tags like this, then it would be great! :-) 
#2022-09-07# 
#2022-09-07# 
#2022-09-07##!! * **NumTime** (@<SPRED) for A Nom
#2022-09-07#MAP:NumTime<spred (@<SPRED) TARGET (A Nom) (-1 TIME-N LINK -1 Num LINK *-1 COPULAS + FMAINV BARRIER NOT-ADV-PCLE)(NEGATE 1 Nom - Rel) ;
#2022-09-07#	#$ Son lea 10 jagi boaris.
#2022-09-07#	#$ Sápmelaččaid historjá álbmogin lea duháhiid jagiid boaris.

#2022-09-07##!! * **<spredSg** (@<SPRED) for Sg Nom	
#2022-09-07#MAP:<spredSg (@<SPRED) TARGET (Sg Nom) (*-1 @CNP OR (Neg Foc/ge) BARRIER REAL-V - COPULAS OR S-BOUNDARY LINK *-1 @<SPRED BARRIER WORD) ;
#2022-09-07#	#$ Son lea mu oabbá, ja 10 jagi boaris.
#2022-09-07#	#$ Son oinnii buot dan mii lea ráhkistan ja gudnejahttin veara.
#2022-09-07#	#$ Munnje lei dehálaš ahte áiggošin leat bahánihkkán.
#2022-09-07#	#$ Mus ii leat biila iige mopeda.

#2022-09-07##!! * **<spredPg** (@<SPRED) for Pl Nom	
#2022-09-07#MAP:<spredPl (@<SPRED) TARGET (Pl Nom) ((*-1 COPULAS BARRIER NOT-NPMODADV LINK *-1 (Pl Nom) OR PLPRON + Nom BARRIER NOT-ADV-PCLE) OR (*-1 COPULAS BARRIER NOT-NPMODADV LINK -1 Nom LINK *-1 CC BARRIER NOT-NPMOD LINK -1 Nom) OR (*-1 COPULAS BARRIER NOT-NPMODADV LINK *-1 FAUXV BARRIER NOT-ADV-PCLE LINK *-1 (Pl Nom) OR PLPRON + Nom BARRIER NOT-ADV-PCLE)) ;
#2022-09-07#	#$ Arkiivaávdnasat leat 25-30 jagi boarrásat.

#2022-09-07##!! * **<spred** (@<SPRED) for Nom; if copulas to the left, and Nom or sentence boundary to the left of copulas. First one to the right is EOS.
#2022-09-07#MAP:<spred (@<SPRED) TARGET Nom (*-1 COPULAS + FMAINV BARRIER NOT-NPMODADV LINK -1 Nom OR S-BOUNDARY)(1 EOS) ;
#2022-09-07#	#$ Arkiivaávdnasat galget sáddejuvvot go leat sullii 25-30 jagi boarrásat.

#2022-09-07##!! * **<spred** (@<SPRED) for N Ess
#2022-09-07#MAP:<spredEss (@<SPRED) TARGET (N Ess) IF (*-1 COPULAS BARRIER S-BOUNDARY OR Ess - ("buorre" Ess) OR Nom LINK 0 FMAINV LINK *-1 NP-HEAD-NOM BARRIER SV-BOUNDARY OR <hab>);

#2022-09-07##!! * **spredEss>** (@SPRED>) for N Ess; if copulas to the right of you, and if an NP with nom-case first one to your left.
#2022-09-07#MAP:spredEss> (@SPRED>) TARGET (N Ess) IF (*1 COPULAS BARRIER SV-BOUNDARY)(-1 NP-HEAD-NOM);
#2022-09-07#	#$ Sápmelaččaid historjá álbmogin lea duháhiid jagiid boaris, muhto dálá ássanguovlluin sápmelaččat eai leat ássan nu guhká.

#2022-09-07##!! * **HABSpredSg>** (@SPRED>) for Nom; if habitive first one to the left, followed by copulas.
#2022-09-07#MAP:HABspredSg> (@SPRED>) TARGET Nom (1 <hab> LINK 1 COPULAS) ;
#2022-09-07#	#$ Mii dus lea?

#2022-09-07##!! * **GalleSpred>** (@SPRED>) for Num Nom; if sentence initial
#2022-09-07#MAP:Gallespred> (@SPRED>) TARGET ("galle" Num Nom) (*-1 BOS BARRIER NOT-ADV) ;

#2022-09-07##!! * **spredSgMII>** (@SPRED>)
#2022-09-07#MAP:spredSgMII> (@SPRED>) TARGET MII + (Sg Nom) (*1 (Sg Nom) BARRIER NOT-NPMOD LINK 1 COPULAS) ;

#2022-09-07##!! * **r492>** (@SPRED>) for Interr Gen; consisting only of negations. You are not allowed to be MII. You are not allowed to have an adjective or noun to yor right. You are not allowed to have a verb to your right; the exception beeing an aux.
#2022-09-07#MAP:r492 (@SPRED>) TARGET (Interr Gen) IF (NEGATE 0 MII)(NEGATE *1 A OR N BARRIER NOT-NPMOD) (NEGATE *1 V - FAUXV BARRIER S-BOUNDARY);
#2022-09-07#	#$ Gean dat lea?


#2022-09-07#MAP:spredSg> (@SPRED>) TARGET (Sg Nom) (1 (Sg Nom) OR SGPRON + Nom OR (Indef Nom) LINK 1 COPULAS) ;
#2022-09-07#	#$ Mii mun lean?

#2022-09-07##!! * **AdjSpredSg>** (@SPRED>) for A Sg Nom; if copulas to the right, but not if A or @<SPRED are found to the right of copulas
#2022-09-07#MAP:AdjSpredSg> (@SPRED>) TARGET (A Sg Nom) (*1 COPULAS + FMAINV BARRIER SV-BOUNDARY OR COMMA OR CC LINK NOT *1 A OR @<SPRED BARRIER NOT-NPMOD); ;
#2022-09-07#	#$ Buorre lea oažžut su boahtit deike.
#2022-09-07#	#$ Divrras ii leat gal barggu ektui.
#2022-09-07#	#% Dási ferte árvvoštallat daláš gáibádusaid ektui, ja internáhtat ledje buorebut go priváhta olbmuid luhtte orrut.

#2022-09-07##!! * **SpredSg>Hab** (@SPRED>) for Nom; if you are sentence initial, copulas is located to the right, and there is a habitive to the right of copulas
#2022-09-07#MAP:SpredSg>Hab (@SPRED>) TARGET (N Sg Nom) (*-1 BOC BARRIER NOT-NPMOD)(*1 COPULAS + FMAINV BARRIER SV-BOUNDARY OR COMMA OR CC LINK *1 <hab> BARRIER NOT-NPMODADV);
#2022-09-07#	#$ Girji lea Máreha.
#2022-09-07#	#$ Diet girji lea dušše mu.
#2022-09-07#	
#2022-09-07#MAP:spredPl> (@SPRED>) TARGET (Pl Nom) (1 (Pl Nom) OR PLPRON + Nom LINK 1 COPULAS)  ;

#2022-09-07#MAP:<spredCoor (@<SPRED) TARGET Nom - Rel (*-1 CC OR COMMA BARRIER NOT-NPMOD LINK -1 @<SPRED)(NEGATE 1 VFIN) ;

#2022-09-07##!! * **Spred>SubjInf** (@SPRED>) for Nom; if copulas to the right, and the subject of copulas is an Inf to the right
#2022-09-07#MAP:spred>SubjInf (@SPRED>) TARGET Nom - OKTA (*1 COPULAS + FMAINV BARRIER SV-BOUNDARY OR COMMA)(*2 @<SUBJ + Inf BARRIER NOT-ADV-PCLE) ;
#2022-09-07#	#$ Gurssa ulbmil lea oahppat goarrut Ivgu gávtti.
#2022-09-07#	#$ Bargu lei kánske árvvoštallat dan.	
#2022-09-07#	 
#2022-09-07##!! * **spredCoord** (@<SPRED) coordination for Nom; only if there already is a SPRED to the left of CNP. Not if there is some kind of comparison involved.
#2022-09-07#MAP:spredCoord (@<SPRED) TARGET Nom - OKTA (*-1 @CNP BARRIER NOT-NPMODADV )(*-2 @<SPRED BARRIER WORD - Adv)(NEGATE *-1 ("go" CS) BARRIER NOT-NPMOD LINK -1 ("nu" Adv))(NEGATE *-1 XGO BARRIER NOT-NPMOD);#(*1 EOS)(NEGATE *1 FMAINV) ;
#2022-09-07#	#$ De eai leat šat dušše tálat, muhto bustávat maid.
#2022-09-07#	#% Dat ledje beakkán ja dovddus olbmot nu go Diaz.
#2022-09-07# 
#2022-09-07# 
#2022-09-07#	# Subjects - SUBJ
#2022-09-07#	
#2022-09-07# 
#2022-09-07#LIST PERS-TAGS = Sg1 Sg2 Sg3 Pl1 Pl2 Pl3 ;

#2022-09-07#MAP:subj>Pers (@SUBJ>) TARGET $$PERS-TAGS + Nom IF ((*1 $$PERS-TAGS + VFIN BARRIER SV-BOUNDARY OR N - ADVLCASE) OR (1 (Sg Com) LINK *1 $$PERS-TAGS + VFIN BARRIER SV-BOUNDARY OR N - ADVLCASE) OR (*1 Refl BARRIER NOT-ADV-PCLE LINK *1 $$PERS-TAGS + VFIN BARRIER NOT-ADV-PCLE)) ;
#2022-09-07#	#$ Moai Birehiin barggašeimme mánáidgárddis.
#2022-09-07#MAP:subj>Pers (@SUBJ>) TARGET (Sg1 Nom) (-1 CC LINK *2 (V Pl1) BARRIER NOT-ADV-PCLE) ;
#2022-09-07#MAP:subj>Pers (@SUBJ>) TARGET (Sg1 Nom) (1 CC LINK *1 (N Pl) BARRIER NOT-NPMOD LINK *1 (V Pl1) BARRIER NOT-ADV-PCLE) ;
#2022-09-07##MAP:subj>Pers (@SUBJ>) TARGET (Sg1 Nom) (-1 CC LINK *2 (V Pl1) BARRIER NOT-ADV-PCLE) ;
#2022-09-07#	#$ Mii du namma lea?
#2022-09-07#	#$ Gii ..
#2022-09-07#MAP:<subjPers (@<SUBJ) TARGET $$PERS-TAGS + Nom IF (*-1 $$PERS-TAGS + VFIN BARRIER NOT-ADV-PCLE) ;
#2022-09-07#	
#2022-09-07##!! * **subj>Sgnr1** (@SUBJ>) for Nom Sg, including Indef Nom if; VFIN + Sg3 or Pl3 to the right (VFIN not allowed to the left) 
#2022-09-07#MAP:subj>Sg (@SUBJ>) TARGET (Nom Sg) OR (Sg3 Nom) OR (Indef Nom) IF (*1 VFIN + Sg3 OR VFIN + Pl3 BARRIER REAL-V OR S-BOUNDARY)(NEGATE *-1 VFIN + Sg3 BARRIER NOT-ADV-PCLE);
#2022-09-07#	#$ Niibi lea stális.

#2022-09-07##!! * **subj>Pl** (@SUBJ>) for plural nominatives, including Coll and Sem/Group. VFIN + Pl3 to the right.

#2022-09-07##!! * **subj>Pl** (@SUBJ>) for plural nominatives
#2022-09-07#MAP:subj>Pl (@SUBJ>) TARGET (Nom Pl) OR (Pl3 Nom) OR (Sem/Group Nom) OR (Coll Nom) IF (*1 VFIN + Pl3 BARRIER REAL-V OR S-BOUNDARY) ;
#2022-09-07# 

#2022-09-07##!! * **subj>Sgnr2** (@SUBJ>) for Nom Sg; if VFIN + Sg3 to the right.
#2022-09-07#MAP:subj>Sg (@SUBJ>) TARGET (Nom Sg) IF (*1 VFIN + Sg3 BARRIER REAL-V OR S-BOUNDARY OR COMMA);

#2022-09-07##!! * **<subjSg** (@<SUBJ) for Nom Sg; if VFIN Sg3 or Du2 to the left (no HAB allowed to the left).
#2022-09-07#MAP:<subjSg (@<SUBJ) TARGET (Nom Sg) IF (*-1 VFIN + Sg3 BARRIER S-BOUNDARY)(NEGATE *-1 <hab> BARRIER BOC) ;
#2022-09-07#	#$ Vuovssá goddá boanda. 
#2022-09-07#	#% Oppalaš hábmema strategiija mii galgá váikkuhit dasa ahte servodat šaddá buohkaide olahahttin, ja dasa ahte vealaheapmi eastaduvvo, lea maid deattuhuvvon.
#2022-09-07#	
#2022-09-07#MAP:<subjPl (@<SUBJ) TARGET (N Nom Pl) OR (Sem/Group Nom) OR (Coll Nom) OR (Pron Nom Pl) IF (*-1 VFIN + Pl3 BARRIER REAL-V OR S-BOUNDARY OR Loc LINK NEGATE 0 COPULAS + FMAINV LINK -1 Sem/Plc OR Loc OR TIME-N OR TIME-ADVL) ;
#2022-09-07#MAP:<subjPl (@<SUBJ) TARGET (Nom Pl) IF (*-1 COPULAS + Pl3 BARRIER NOT-NPMOD)(1 @<SPRED) ;
#2022-09-07#	#$ Girjji namma čujuha dasa ahte dološ myhtain leat sámit mánát.

#2022-09-07#MAP:subj>Coor1 (@SUBJ>) TARGET Nom IF (1 CC LINK *1 Nom BARRIER NOT-NPMOD LINK *1 VFIN + Pl3 BARRIER NOT-ADV-PCLE) ;

#2022-09-07#MAP:subjCoorTEST (@SUBJ>) TARGET Nom IF ((1 CC OR COMMA LINK *1 @SUBJ> - Rel BARRIER NOT-NPMOD) OR (*-1 CC BARRIER NOT-NPMOD OR CC LINK -1 @SUBJ>)) ;
#2022-09-07#MAP:subjCoorTEST (@<SUBJ) TARGET Nom IF ((1 CC OR COMMA LINK *1 @<SUBJ BARRIER NOT-NPMOD) OR (*-1 CC BARRIER NOT-NPMOD OR CC LINK -1 @<SUBJ)) ;
#2022-09-07#MAP:subjCoorTEST (@SUBJ>) TARGET Nom IF ((1 CC OR COMMA LINK *1 @SUBJ> - Rel BARRIER NOT-NPMOD) OR (*-1 CC BARRIER NOT-NPMOD OR CC LINK -1 @SUBJ>)) ;
#2022-09-07#MAP:subjCoorTEST (@<SUBJ) TARGET Nom IF ((1 CC OR COMMA LINK *1 @<SUBJ BARRIER NOT-NPMOD) OR (*-1 CC BARRIER NOT-NPMOD OR CC LINK -1 @<SUBJ)) ;
#2022-09-07#MAP:subj>Num (@SUBJ>) TARGET (Num Nom) (*1 (N Sg Gen) BARRIER NOT-A LINK *1 VFIN + Pl3 BARRIER NOT-ADV-PCLE) ;
#2022-09-07#MAP:<subjNum (@<SUBJ) TARGET (Num Nom) (*1 (N Sg Gen) BARRIER NOT-A)(*-1 VFIN + Pl3 BARRIER Nom OR S-BOUNDARY) ;

#2022-09-07##MAP:subj>Coor2 (@SUBJ>) TARGET Nom (*-1 CC BARRIER NOT-NPMOD LINK -1 @SUBJ>)(*1 VFIN + Pl3 BARRIER NOT-ADV-PCLE) ;
#2022-09-07##MAP:<subjCoor1 (@<SUBJ) TARGET Nom IF (1 CC LINK *1 Nom BARRIER NOT-NPMOD)(*-1 VFIN + Pl3 BARRIER NOT-ADV-PCLE LINK NOT *-1 Nom BARRIER NOT-ADV-PCLE) ;
#2022-09-07##MAP:<subjCoor2 (@<SUBJ) TARGET Nom (*-1 CC BARRIER NOT-NPMOD LINK -1 @<SUBJ LINK *-1 VFIN + Pl3 BARRIER NOT-ADV-PCLE LINK NOT *-1 Nom BARRIER NOT-ADV-PCLE) ;
#2022-09-07##MAP:subj>Coor3 (@SUBJ>) TARGET Nom IF (1 CC OR COMMA LINK *1 @SUBJ> - Rel BARRIER NOT-NPMOD) ;
#2022-09-07##MAP:subj>Coor4 (@SUBJ>) TARGET Nom IF (1 CC OR COMMA LINK *1 @SUBJ> - Rel BARRIER NOT-NPMOD) ;
#2022-09-07##MAP:subj>Coor5 (@SUBJ>) TARGET Nom IF (*-1 CC OR COMMA BARRIER NOT-NPMOD LINK *-1 @SUBJ> - Rel BARRIER NOT-NPMOD) ;
#2022-09-07#MAP:subj>Rel (@SUBJ>) TARGET (Nom Pl) OR (Nom Pl3) IF (1 Rel LINK *1 FMAINV LINK *1 VFIN + Pl3) ;
#2022-09-07#	#$ Dat mat sáhttet háhkkojuvvot, leat ovdalis juo namuhuvvon.
#2022-09-07#MAP:subj>App (@SUBJ>) TARGET Nom IF (1 COMMA LINK **1 @APP-N< OR @APP-Pron< LINK 1 COMMA LINK 1 VFIN) ;
#2022-09-07#MAP:subj>Rel (@SUBJ>) TARGET (N Nom) OR (Pron Nom) OR (A Nom) IF (*1 Rel BARRIER WORD LINK *1 FMAINV LINK *1 VFIN + Sg3 OR VFIN + Pl3) ;
#2022-09-07#MAP:subj>App (@SUBJ>) TARGET (N Nom) OR (Pron Nom) (1 COMMA LINK *1 @APP-N< OR @APP-Pron< BARRIER NOT-NPMOD LINK *1 FMAINV) ;
#2022-09-07#	#$ Jovsset, su irgi, gii lei rehálaš olmmái ii ge hálidan heahppašuhttit su, áiggui earránit sus suoli.


#2022-09-07## Rules for complements
#2022-09-07#MAP:n< (@N<) TARGET (N Loc) (-1 (N @SUBJ>))(1 FMAINV) ; 
#2022-09-07#MAP:Pron< (@Pron<) TARGET (N Loc) - TIME-N (*-1 (Pron @SUBJ>) BARRIER NOT-ADV - COMMA LINK NOT 0 Rel)(*1 VFIN BARRIER NOT-ADV-PCLE - COMMA) ; 
#2022-09-07#	#$ Nu guhká go mii, opposišuvnnas, eat čohkká beaivválaččat daiguin dokumeanttaiguin, de lea bahá vajáldahttit.
#2022-09-07##MAP:n< (@N<) TARGET (N Loc)(-1 (N Nom) LINK *-1 FMAINV BARRIER SV-BOUNDARY) ; 


#2022-09-07#MAP:num< (@Num<) TARGET (Pl Loc) (*-1 OKTA BARRIER NOT-NPMOD) ;
#2022-09-07#	#$ Dat lea okta min buoremus girjjiin.

#2022-09-07#MAP:num< (@Num<) TARGET (Sg Loc)  (*-1 Num BARRIER NOT-A LINK *-1 OKTA BARRIER NOT-NPMOD) ;
#2022-09-07#	#$ Gáiddusoahpahus lea okta máŋgga molssaeavttus.

#2022-09-07#MAP:r253 (@Num<) TARGET (Sg Gen) IF (*-1 NUM BARRIER N OR REAL-CLB OR PUNCT LINK 0 Nom OR Acc LINK NOT 0 Ord)(NEGATE 0 Num)(NEGATE 1 A OR N)(NEGATE -1 COMMA);
#2022-09-07#	#$ Mun vuiten 50 ru.

#2022-09-07#LIST COUNTABLE = "oassi" "kapihtal" "paragráfa" ;

#2022-09-07#MAP:n< (@N<) TARGET Loc - Rel (*-1 COUNTABLE BARRIER NOT-A) ;
#2022-09-07#	#$ Dat lea oassin giellaprográmmas.
#2022-09-07#MAP:-fsubj> (@-FSUBJ>) TARGET HUMAN + Gen (1 (Actio Nom) LINK 1 N) ; 
#2022-09-07#	#$ Máreha čállin teavsttat ledje buoremusat.

#2022-09-07# 
#2022-09-07#	# Adverbials - ADVL
#2022-09-07#LIST MOVE-VERBS-myv = "лисемс" "молемс" "пачкодемс" "самс" "совамс" "сыргамс" "туемс" "чиемс" "ютамс" ;
#2022-09-07# 
#2022-09-07#MAP:>cc (@>CC) TARGET ("sihke")(*1 ("ja") OR ("ahte")) ;
#2022-09-07#MAP:advl>cs (@ADVL>CS) TARGET ("beare" Adv) (1 CS LINK *1 FMAINV) ;
#2022-09-07#	#$ Muhto dus ii leat riekti dearpat su beare danin go sáhtát.

#2022-09-07#LIST ADVL = Adv Ill Com Loc Po Pr Ine Ela ;

#2022-09-07#MAP:r39 (@ADVL<) TARGET (N SP Ill PxSg3) IF (-1 CardIter OR MULT)(0 TIME-N);
#2022-09-07#	#$ Монень эряви ярсамс кавксть таргозонзо < :r39 Mun ferten málestit guktii vahkus.

#2022-09-07#SET MOD-ADV = DUSSE OR ("njuolga") OR ("njuolgga") OR EASKKA OR ("gitta") ;

#2022-09-07##!! * **f<advl** (@-F<ADVL) for infinite adverbials
#2022-09-07#MAP:f<advl (@-F<ADVL) TARGET ADVL - MO - S-BOUNDARY OR TIME-N + Gen OR (Sem/Route Gen) (*-1 SYN-V - VGen - VAbess BARRIER SV-BOUNDARY OR CS)(NEGATE 0 DUSSE OR EASKKA) ;
#2022-09-07#	#$ Min mielas goit lea veara jurddašit nissongova birra mii boahtá ovdan jearahallamiin.

#2022-09-07##!! * **f<advl** (@-F<ADVL) for infinite adverbials
#2022-09-07#MAP:fadvl> (@-FADVL>) TARGET ADVL - MO - S-BOUNDARY OR TIME-N + Gen OR (Sem/Route Gen)(NEGATE *-1 FMAINV BARRIER S-BOUNDARY OR CS)(*1 SYN-V - VGen - VAbess BARRIER SV-BOUNDARY OR CS OR FMAINV) ;
#2022-09-07#	#$ Anán buorebun odne vuolgit go ihttážii vuordit.
#2022-09-07#	
#2022-09-07#	
#2022-09-07#	
#2022-09-07##!! * **s-boundary=advl>** (@ADVL>) for ADVL that resemble s-booundaries. Mainverb to the right.
#2022-09-07#MAP:s-boundary=advl> (@ADVL>) TARGET ADVL + S-BOUNDARY (*1 FMAINV) ;
#2022-09-07#	#$ Dál de viimmat asttan lohkat reivve.
#2022-09-07#	
#2022-09-07#MAP:diibmuadvl> (@ADVL>) TARGET ("diibmu" Nom) (1 Num) ;
#2022-09-07#	#$ Diibmu golbma manan ruoktot.


#2022-09-07#	# Infinite object - FOBJ

#2022-09-07##!! * **-fobj>** (@-FOBJ>) for Acc 
#2022-09-07#MAP:-fobj> (@-FOBJ>) TARGET Acc (1 (TV VAbess) OR (TV Ger) OR (TV Actio Loc) OR (TV PrfPrc) OR (TV Inf) LINK 0 SYN-V LINK NOT 1 Acc) ; 
#2022-09-07#	#$ Konvenšuvdnaevttohusa ráhkadettiin delegašuvnnat leat váldán vuhtii Ruoŧa ođđa boazodoallolága, ja boazodoallolágaid maiguin barget dál Norggas.
#2022-09-07#	#$ Duosttažan go dan dahkat?

#2022-09-07##!! * **-fobj>** (@-FOBJ>) for Acc
#2022-09-07#MAP:-fobj> (@-FOBJ>) TARGET Acc (-1 ADVL + Sem/Hum)(1 (TV Inf @<OBJ) LINK NOT 1 Acc) ; 
#2022-09-07#	#$ Eadni oahpaha nieidasis beaskka goarrut.
#2022-09-07#	



#2022-09-07##!! * **advl>mainV** (@ADVL>) if; finite mainverb not found to the left, but the finite mainverb is found to the right.
#2022-09-07#MAP:advl>mainV (@ADVL>) TARGET ADVL (NOT *-1 FMAINV BARRIER S-BOUNDARY)(*1 FMAINV BARRIER SV-BOUNDARY) ; 
#2022-09-07#	#$ Dál de viimmat asttan lohkat reivve.
#2022-09-07#	#$ Jos ja go suodjalus ii šat dárbbaš guovllu, dat galgá máhcahuvvot sámi geavahussii, Skum cealká.


#2022-09-07##!! * **<advl** (@<ADVL) if; finite mainverb found to the left. Not if a comma is found immediately to the left and a finite mainverb is located somewhere to the right of this comma.
#2022-09-07#MAP:<advl (@<ADVL) TARGET ADVL - MO - Rel - MOD-ADV - Attr OR TIME-N + Gen OR (Sem/Route Gen) OR Sem/Date OR Sem/Year (*-1 FMAINV BARRIER SV-BOUNDARY)(NEGATE -1 COMMA LINK *1 FMAINV BARRIER S-BOUNDARY) ;
#2022-09-07#	#$ Giellatekno álggahuvvui 1.8.2001 prošeaktan ráhkadit sámegiela grammatihkalaš analysa.
#2022-09-07#	#$ Dán filmma leat Kárášjoga nuorat oaidnán, eaige šat vuolgge sirkusii.
#2022-09-07#	
#2022-09-07#MAP:advl> (@ADVL>) TARGET ADVL OR TIME-N + Gen OR (Sem/Route Gen) ((*1 FMAINV OR FAUXV BARRIER SV-BOUNDARY) OR (*1 ("de") BARRIER FMAINV LINK 1 FMAINV OR FAUXV)) ;
#2022-09-07#	#$ Maŋŋá jápmimis de aliduvvui Gonagas Olav bassin.
#2022-09-07#	
#2022-09-07##MAP:<advl (@<ADVL) TARGET ADVL (*-1 S-BOUNDARY LINK *-1 FMAINV BARRIER SV-BOUNDARY)(NEGATE *1 FMAINV BARRIER S-BOUNDARY);
#2022-09-07#	#$ Guovdageainnu guovllut gal leat vel mu mielas sestojuvvon oalle bures dássážii, movt šat guhká.
#2022-09-07#	
#2022-09-07#MAP:advl>cs (@ADVL>CS) TARGET Adv (*-1 BOS BARRIER NOT-ADV)(1 CS LINK *1 FMAINV) ;
#2022-09-07#	#$ Danne go ..

#2022-09-07##!! * **<advlPoPr** (@<ADVL) if mainverb to the left.
#2022-09-07#MAP:<advlPoPr (@<ADVL) TARGET Po OR Pr (*-1 FMAINV BARRIER SV-BOUNDARY) ;
#2022-09-07##!! * **advlPoPr>** (@<ADVL) if mainverb to the right.
#2022-09-07#MAP:advlPoPr> (@ADVL>) TARGET Po OR Pr (*1 FMAINV BARRIER SV-BOUNDARY) ;

#2022-09-07##MAP:<advl (@<ADVL) TARGET ADVL (*-1 FMAINV BARRIER SV-BOUNDARY) ;
#2022-09-07##MAP:advl> (@ADVL>) TARGET ADVL (*1 FMAINV BARRIER SV-BOUNDARY) ;

#2022-09-07#MAP:<advl (@<ADVL) TARGET (N Gen) (*-1 FMAINV BARRIER SV-BOUNDARY)(NOT *1 N BARRIER NOT-A)(NOT 1 Po) ;
#2022-09-07#MAP:advl> (@ADVL>) TARGET (N Gen) (*1 FMAINV BARRIER SV-BOUNDARY OR Po)(NOT *1 N BARRIER NOT-A) ;
#2022-09-07#MAP:advl> (@ADVL>) TARGET Ess (*1 FMAINV BARRIER SV-BOUNDARY LINK NOT *1 Nom BARRIER NOT-NPMOD)(NEGATE *-1 REAL-V BARRIER S-BOUNDARY) ;
#2022-09-07#	#$ Čuoikan ...

#2022-09-07##!! * **advlEss>** (@<ADVL) for weather and time Ess, if FMAINV to the left.
#2022-09-07#MAP:advlEss> (@<ADVL) TARGET (Wthr Ess) OR TIME-N + Ess (*-1 FMAINV BARRIER SV-BOUNDARY) ;
#2022-09-07#	#$ Boazosápmelaččain ii leat bassin vejolaš fievrridit gálvvu gerresiiguin
#2022-09-07#	
#2022-09-07#MAP:Acc<advl (@<ADVL) TARGET TIME-N + Acc OR ("gaska" Acc) (*-1 FMAINV BARRIER SV-BOUNDARY)(NEGATE 1 (A Nom)) ;
#2022-09-07#MAP:Accadvl> (@ADVL>) TARGET TIME-N + Acc OR ("gaska" Acc) (*1 FMAINV BARRIER SV-BOUNDARY) ;


#2022-09-07#MAP:gitta>adv (@>ADVL) TARGET ("gitta" Adv)(NOT *-1 ("váldit") OR ("doallat") OR ("čatnat") OR ("bidjat") OR LEAT OR ("mannat") BARRIER SV-BOUNDARY)(*1 DOHKO OR DOPPE OR Loc OR Ill OR Sem/Time OR Po BARRIER NOT-NPMOD) ;
#2022-09-07#MAP:>advl (@>ADVL) TARGET Adv IF (0 MOD-ADV)(*1 @ADVL BARRIER NOT-NPMOD);

#2022-09-07#MAP:<advl (@<ADVL) TARGET Adv (*-1 FMAINV BARRIER SV-BOUNDARY)(NEGATE -1 COMMA LINK *1 FMAINV BARRIER S-BOUNDARY) ;


#2022-09-07##!! * **advl>inbetween** (@ADVL>) for Adv; if inbetween two sentenceboundaries where no mainverb is present.
#2022-09-07#MAP:advl>inbetween (@ADVL>) TARGET Adv (*-1 BOC BARRIER FMAINV)(*1 S-BOUNDARY BARRIER FMAINV)  ;
#2022-09-07#	#$ Son muitala maid ahte nu guhká go orohagat eai vuosttal mearkkaid, de sii lávejit juolludit mearkkaid ohcciide.	
#2022-09-07#	#$ Dál de viimmat asttan čállit reivve. 

#2022-09-07##!! * **comma<advlEOS** (@<ADVL) if; comma found to the left and the finite mainverb to the left of comma. To the right is the end of the sentence.
#2022-09-07#MAP:comma<advlEOS (@<ADVL) TARGET Adv (*-1 COMMA BARRIER V LINK *-1 FMAINV BARRIER S-BOUNDARY)(*1 EOS BARRIER FMAINV) ;
#2022-09-07#	#$ Guovdageainnu guovllut gal leat vel mu mielas sestojuvvon oalle bures dássážii, movt šat guhká.
#2022-09-07#	#$ De eai leat šat dušše tálat, muhto bustávat maid.
#2022-09-07#	
#2022-09-07#MAP:<advl (@<ADVL) TARGET Adv (*1 Po OR EOS BARRIER SV-BOUNDARY) ;
#2022-09-07#	#% Odne vai ihttin? 
#2022-09-07#	#% Juoba ge dán áigodagas.

#2022-09-07##MAP:nr2<advlEOS (@<ADVL) TARGET (N Loc) (*-1 S-BOUNDARY BARRIER V LINK *-1 FMAINV BARRIER S-BOUNDARY)(*1 EOS BARRIER FMAINV);
#2022-09-07#	#$ 'De eai leat šat dušše tálat, muhto bustávat maid.
#2022-09-07#	#$ Guovdageainnu guovllut gal leat vel mu mielas sestojuvvon oalle bures dássážii, movt šat guhká.

#2022-09-07##!! * **advlBOS>** (@ADVL>) if; you are N Ill and found sentnece initially. First one to your right is a clause.
#2022-09-07#MAP:advlBOS> (@ADVL>) TARGET (N Ill) (*-1 BOS BARRIER NOT-NPMOD)(1 S-BOUNDARY);
#2022-09-07#	#$ Mearrádusaide nugo namahuvvo nuppi lađđasis bustávas e ja f gáibiduvvo ovttamielalašvuohta.

#2022-09-07#	
#2022-09-07##!! * **<advlPoEOS** (@<ADVL) for Po; if you are found at the very end of a sentence. A mainverb is needed to the right though.
#2022-09-07#MAP:<advlPoEOS (@<ADVL) TARGET Po (*-1 FMAINV)(1 EOS);
#2022-09-07#	#$ Sámediggi lea miehtan sutnje máksit 800 ruvnno juohke árgabeaivvi ovddas, muhto ii fal lávvordagaid, sotnabeivviid ja bassebeivviid ovddas.
#2022-09-07#	

#2022-09-07#	# POSTPOSIŠUVNNAT, mat galget oažžut dušše @ADVL: 
#2022-09-07#	#$ Muhto man sivas?
#2022-09-07#	#$ Odne vai ihttin?
#2022-09-07#	#$ Boazodoalu siskkáldas dilálašvuođat, dás maiddái ovttaskas boazoeaiggádiid riektedilálašvuođat. 
#2022-09-07#	#$ Juoigan ii lean gildojuvvon, muhto unnit mánáid dihtii geat dárbbašedje eanet oađđit, fertii leat jaskat maŋŋá nohkkanáigge. dihtii

#2022-09-07##!! * **cleanupILL<advl** (@<ADVL) for N Ill if; there are no boundarysymbols to your left, if you arent already @N< OR @APP-N<, and no mainverb is to yor left.
#2022-09-07#MAP:cleanupILL<advl (@<ADVL) TARGET (N Ill) (NEGATE *-1 BOUNDARYSYMBOLS BARRIER V)(NEGATE 0 @N< OR @APP-N< OR ("doarvi"))(NEGATE *1 FMAINV);
#2022-09-07#	#$ Riekti oassálastit luondduriggodagaid hálddašeamis sáhttá čađahuvvot dakko bokte ahte Sámediggi nammada áirasiid oktasaš stivrenorgánaide, nu movt Finnmárkoopmodahkii ja guovllu boraspirelávdegottiide.
#2022-09-07#	#% Mearrádusaide nugo namahuvvo nuppi lađđasis bustávas e ja f gáibiduvvo ovttamielalašvuohta.
#2022-09-07#	#% Guovdageainnus muittán ahte roagga gándajienat eahketbeaivve huike: Muorravissui, muorravissui!
#2022-09-07#	
#2022-09-07#	
#2022-09-07#MAP:-fsubj> (@-FSUBJ>) TARGET HUMAN + Acc (*1 (V @<OBJ) BARRIER NOT-ADV-PCLE) ; 
#2022-09-07#MAP:-f<obj (@-F<OBJ) TARGET Acc (*-1 (V TV) + SYN-V BARRIER REAL-V OR S-BOUNDARY) ; 
#2022-09-07#	#$ Máret muitalii Máhte oaidnán guovžža.
#2022-09-07#	#$ Gurssa ulbmil lea oahppat goarrut Ivgu gávtti.

#2022-09-07#MAP:-fsubj> (@-FSUBJ>) TARGET Acc (*1 (IV @<OBJ) BARRIER NOT-ADV-PCLE) ; 
#2022-09-07#	#$ Sii lohket fatnasa gopmánan.
#2022-09-07# 
#2022-09-07# 
#2022-09-07# 
#2022-09-07#	# Predicatives - PPRED
#2022-09-07# 
#2022-09-07#MAP:<ppred (@<PPRED) TARGET (Pl Nom) OR Ess (*-1 @<SPRED + Pl BARRIER NOT-ADV-PCLE OR ("ain")) ;
#2022-09-07#	#$ Mus leat gieđat nu galbmasat.
#2022-09-07#MAP:<ppred (@<PPRED) TARGET (Sg Nom) OR Ess (*-1 @<SPRED + Sg BARRIER NOT-ADV-PCLE OR ("ain")) ;
#2022-09-07#	# Márehis lea oaivi bávččas. 

#2022-09-07#LIST MEASR-N-SET = (N Sem/Measr) (N Sem/Money) (N Sem/Time) ;

#2022-09-07#SET MEASR-N = MEASR-N-SET - NOT-TIME ;

#2022-09-07#MAP:>n (@>N) TARGET (Num Acc) ((1 MEASR-N + (Sg Gen) LINK 1 Po) OR (1 (Num Acc) LINK 1 MEASR-N + (Sg Gen) LINK 1 Po)) ;
#2022-09-07#	#$ Noađđespagáin leat dat geažit guokte golbma tumá guhku.
#2022-09-07#MAP:>a (@>A) TARGET (Num Acc) (1 TIME-N + (Sg Gen) LINK 1 A) ;
#2022-09-07#	#$ Arkiivaávdnasat galget sáddejuvvot go leat sullii 25-30 jagi boarrásat.
#2022-09-07#MAP:>a (@>A) TARGET TIME-N + Acc (-1 Num) (1 A) ;
#2022-09-07#	#$ Sápmelaččaid historjá álbmogin lea duháhiid jagiid boaris.

#2022-09-07##!! * **<opredAAcc** (@<OPRED) for A Acc; if an other accusative to the left, and a transtive verb to the left of it. OR: if a transitive verb to the left, and an accusative to the left of it.
#2022-09-07#MAP:<opredAAcc (@<OPRED) TARGET (A Acc) IF ((*-1 Acc BARRIER NOT-ADV-PCLE LINK *-1 FMAINV + TV BARRIER NOT-ADV-PCLE) OR (*-1 FMAINV + TV BARRIER NOT-ADV-PCLE LINK *-1 Acc BARRIER SV-BOUNDARY))  ;	
#2022-09-07#	#$ Son ráhkada gáhkuid hui buriid.
#2022-09-07#	#$ Gáhkuid son ráhkada hui buriid.

#2022-09-07#MAP:<obj (@<OBJ) TARGET Acc - Rel (*-1 FMAINV + TV BARRIER SV-BOUNDARY)(NEGATE -1 COMMA LINK *2 TRANS-V + FMAINV BARRIER SV-BOUNDARY)(NEGATE 0 Num LINK 1 MEASR-N) ;

#2022-09-07##!! ### sma object
#2022-09-07#MAP:<obj (@<OBJ) TARGET (Nom Pl <sma>) - Rel  (*-1 FMAINV + TV BARRIER SV-BOUNDARY)(NEGATE -1 COMMA LINK *2 TRANS-V + FMAINV BARRIER SV-BOUNDARY)(NEGATE 0 Num LINK 1 MEASR-N) ;
#2022-09-07#MAP:obj> (@OBJ>) TARGET (Nom Pl <sma>) (*1 FMAINV BARRIER SV-BOUNDARY) ;

#2022-09-07#MAP:<advl (@<ADVL) TARGET (Num Acc) (*-1 FMAINV BARRIER SV-BOUNDARY)(1 MEASR-N + (Sg Gen) LINK NOT 1 Po) ;
#2022-09-07#	#$ Mánná lea golbma jagi boaris.
#2022-09-07#MAP:<advl (@<ADVL) TARGET MEASR-N + Acc (-1 (Num Pl) LINK *-1 FMAINV BARRIER SV-BOUNDARY) ;

#2022-09-07#MAP:advl> (@ADVL>) TARGET (Num Acc) (1 MEASR-N + (Sg Gen) LINK *1 FMAINV BARRIER SV-BOUNDARY) ;
#2022-09-07#	#$ Mánná lea golbma jagi boaris.
#2022-09-07#MAP:advl> (@ADVL>) TARGET MEASR-N + Acc (-1 (Num Pl))(*1 FMAINV BARRIER SV-BOUNDARY) ;

#2022-09-07#MAP:obj> (@OBJ>) TARGET Acc (*1 FMAINV BARRIER SV-BOUNDARY) ;


#2022-09-07#MAP:<objIV (@<OBJ) TARGET Acc - Rel - Num (*-1 FMAINV + IV BARRIER SV-BOUNDARY)(NEGATE -1 COMMA LINK *2 TRANS-V + FMAINV BARRIER SV-BOUNDARY)(NEGATE 0 Num LINK 1 MEASR-N) ;

#2022-09-07#MAP:obj> (@OBJ>) TARGET Acc (1 Rel LINK *1 FMAINV BARRIER SV-BOUNDARY LINK *1 FMAINV + TV BARRIER SV-BOUNDARY) ;
#2022-09-07#	#$ Danne sáhttá váttisvuođaid mat čuožžilit gaskasaš konvenšuvnna beaivválaš dilis, buoremusat čoavdit riikkaidgaskasaš orgánain, mas leat loahpalaš mearridanváldi.

#2022-09-07## These nouns in essiv get @ADVL:
#2022-09-07#LIST ESS-ADVL = Sem/Time Sem/Wthr "baika" "čakčaseavdnjat" "čuoika" "čuovga"  "varra" ;

#2022-09-07## These nouns/adjectives in essiv can get @ADVL:
#2022-09-07#LIST ESS-PROB-ADVL-N = ("bassi" N) "boaris" ("nuorra" N) ;

#2022-09-07##!! * **<advlEss** (@<ADVL) for ESS-ADVL if; FMAINV to the left
#2022-09-07#MAP:<advlEss (@<ADVL) TARGET ESS-ADVL + Ess IF (*-1 FMAINV BARRIER SV-BOUNDARY) ;
#2022-09-07#	#$ Beaskkain gal bivvá buolašin.
#2022-09-07##!! * **<spredEss** (@<SPRED) for N Ess if; FMAINV to the left is intransitive or bargat
#2022-09-07#MAP:<spredEss (@<SPRED) TARGET (N Ess) - ESS-ADVL OR (A Ess) IF (*-1 FMAINV + IV OR ("bargat") + FMAINV BARRIER SV-BOUNDARY) ;
#2022-09-07#MAP:<opredEss (@<OPRED) TARGET (N Ess) OR (A Ess) IF (*-1 FMAINV + TRANS-V BARRIER SV-BOUNDARY)((*-1 Acc BARRIER NOT-NPMOD) OR (*1 Acc BARRIER NOT-NPMOD) OR (*1 Inf BARRIER NOT-ADV-PCLE) OR (*1 N BARRIER NOT-NPMOD LINK 1 Inf));
#2022-09-07#	#$ Gaup dojii stivrrana hárjehallamiin, muhto oaččui luoikkasin eará stivrrana.
#2022-09-07#MAP:<opredEssRel (@<OPRED) TARGET (N Ess) OR (A Ess) IF (*-1 FMAINV + TRANS-V BARRIER SV-BOUNDARY LINK -1 (Rel Acc)) ;
#2022-09-07#	#$ Organisašuvnna bláđđi man gohčodit Fokusin muitala ahte gonagas Olav su áiggistis lei bivdán beassat leat servodaga suodjaleaddji.

#2022-09-07#MAP:<opredEss (@<OPRED) TARGET (N Ess) OR (A Ess) IF (-1 FMAINV + TRANS-V LINK *-1 Acc BARRIER S-BOUNDARY);
#2022-09-07#	#$ Šiehtadus sisttisdoallá dárkilis evttohusa movt guohtuneatnamiid sáhttá atnit ávkin goabbat bealde ráji.
#2022-09-07#	#$ Duolji geavahit máŋgga ládje, dan sáhttá goikadit ja geavahit suodjin.

#2022-09-07#MAP:spred>Ess (@SPRED>) TARGET (N Ess) OR (A Ess) IF (*1 FMAINV + IV OR ("bargat") + FMAINV BARRIER SV-BOUNDARY);
#2022-09-07#MAP:opred>Ess (@OPRED>) TARGET (N Ess) OR (A Ess) IF (*1 FMAINV + TRANS-V BARRIER SV-BOUNDARY);
#2022-09-07##MAP:<spredEss (@<SPRED) TARGET (A Ess) IF (*-1 FMAINV BARRIER SV-BOUNDARY);
#2022-09-07##MAP:spred>Ess (@SPRED>) TARGET (A Ess) IF (*1 FMAINV BARRIER SV-BOUNDARY);


#2022-09-07#MAP:>advl (@>ADVL) TARGET Adv IF (0 DUSSE  OR EASKKA)(*1 @ADVL BARRIER NOT-NPMOD);
#2022-09-07#	#$ Jus in leat váiban, de manan nohkkat easkka gaskaija.

#2022-09-07##!! ## SUBJ MAPPING - leftovers
#2022-09-07#MAP:<subj (@<SUBJ) TARGET NP-HEAD-NOM - A OR (Num Nom) (*-1 FMAINV BARRIER (":") OR S-BOUNDARY) ;
#2022-09-07#MAP:subj> (@SUBJ>) TARGET NP-HEAD-NOM - A OR (Num Nom) (*1 FMAINV BARRIER (":")) ;

#2022-09-07##!! ## OBJ MAPPING - leftovers
#2022-09-07#MAP:<obj (@<OBJ) TARGET NP-HEAD-ACC (*-1 FMAINV BARRIER (":") OR S-BOUNDARY) ;
#2022-09-07#MAP:obj> (@OBJ>) TARGET NP-HEAD-ACC (*1 FMAINV BARRIER (":"))(NOT *-1 Interj BARRIER NOT-NPMOD) ;


#2022-09-07##!! ## HNOUN MAPPING

#2022-09-07#MAP:hnounNom (@HNOUN) TARGET NP-HEAD-NOM - A OR (Num Nom) (NEGATE *0 REAL-V BARRIER (":"))(NEGATE *-1 PUNCT BARRIER (":") LINK -1 WORD) ;
#2022-09-07#	#$ Fiskes, rukses, alit, ruoná ja muđui buotlágaš ivnnit.
#2022-09-07#	#$ Bargolávdegotti bargu: Álgobargu lei čielggadit min mandáhta.

#2022-09-07#MAP:hnounAdvl (@HNOUN) TARGET ADVLCASE OR Acc (NEGATE *0 REAL-V OR @HNOUN) ;
#2022-09-07#MAP:hnounInterj (@HNOUN) TARGET Acc (*-1 Interj BARRIER NOT-NPMOD) ;



#2022-09-07#MAP:HNOUN<advl (@N<) TARGET ADVL (*-1 @HNOUN - Num BARRIER CRD) ; 
#2022-09-07#MAP:HNOUN<advl (@N<) TARGET ADVL (-1 CRD LINK -1 @N<)(1 EOS) ; 
#2022-09-07#MAP:advl>HNOUN (@ADVL>) TARGET ADVL (*1 @HNOUN BARRIER CRD) ; 
#2022-09-07#MAP:HNOUN<obj (@<OBJ) TARGET Acc (*-1 @HNOUN) ;
#2022-09-07#	#% Birasgáhttenlihkadus ja álgoálbmogat - ovttasbargit vai vuostálágaid? 
#2022-09-07#MAP:obj>HNOUN (@OBJ>) TARGET Acc (*1 @HNOUN) ; 
#2022-09-07#MAP:HNOUN<spred (@<SPRED) TARGET (A Nom) (*-1 @HNOUN) ; 
#2022-09-07#	#$ Dii guoktilaččat!
#2022-09-07#MAP:spred>HNOUN (@SPRED>) TARGET (A Nom) (*1 @HNOUN) ; 
#2022-09-07#MAP:HNOUN<spred (@<SPRED) TARGET (A Nom) OR (N Nom) (*-1 PUNCT BARRIER REAL-V LINK *-1 @HNOUN) ; 
#2022-09-07#	#$ Birasgáhttenlihkadus ja álgoálbmogat – ovttasbargit vai vuostálagaid?


#2022-09-07#	#$ Báhpaeamit, Margrethe Wiig, gii lei gasku giellamoivvi, ráhkadii iežas sárgumiiguin sámegiela Áppesa, mii lei stuorra ávkin sámegiela oahpahusas.

#2022-09-07##learning jmr 2021-09-12x
#2022-09-07#MAP:pronSubj> (@SUBJ>) TARGET SON (1* ScSg3 BARRIER EOS) ;
#2022-09-07##MAP:fmainv (@FMAINV) TARGET VFIN ;

#2022-09-07#MAP:leftoversX (@X) TARGET WORD ;


#2022-09-07#AFTER-SECTIONS

#2022-09-07#SUBSTITUTE (<sme>) (*) TARGET (<sme>) ;
#2022-09-07#SUBSTITUTE (<smj>) (*) TARGET (<smj>) ;
#2022-09-07#SUBSTITUTE (<sma>) (*) TARGET (<sma>) ;

#2022-09-07#LIST HEAD = @SUBJ> @<SUBJ @SUBJ @OBJ @OBJ> @<OBJ @ADVL @ADVL> @<ADVL @SPRED> @<SPRED @SPRED @OPRED> @<OPRED @OPRED @-FSUBJ> @-FOBJ> @-FADVL> @-FSPRED> @-F<SUBJ @-F<OBJ @-F<ADVL @-F<SPRED ;

#2022-09-07##for view - kommenteres inn for view
#2022-09-07##SUBSTITUTE (@>N) (@>N <mod_obj>) TARGET (@>N) (*1 OBJ BARRIER NOT-NPMOD OR HEAD) ;
#2022-09-07##SUBSTITUTE (@>N) (@>N <mod_subj>) TARGET (@>N) (*1 SUBJ BARRIER NOT-NPMOD OR HEAD) ;
#2022-09-07##SUBSTITUTE (@>N) (@>N <mod_advl>) TARGET (@>N) (*1 @ADVL BARRIER NOT-NPMOD OR HEAD) ;
#2022-09-07##SUBSTITUTE (@>A) (@>A <mod_obj>) TARGET (@>A) (*1 OBJ BARRIER NOT-NPMOD OR HEAD) ;
#2022-09-07##SUBSTITUTE (@>A) (@>A <mod_subj>) TARGET (@>A) (*1 SUBJ BARRIER NOT-NPMOD OR HEAD) ;
#2022-09-07##SUBSTITUTE (@>A) (@>A <mod_advl>) TARGET (@>A) (*1 @ADVL BARRIER NOT-NPMOD OR HEAD) ;
#2022-09-07##SUBSTITUTE (@N<) (@N< <compl_obj>) TARGET (@N<) (*-1 OBJ BARRIER NOT-NPMOD OR HEAD) ;
#2022-09-07##SUBSTITUTE (@N<) (@N< <compl_subj>) TARGET (@N<) (*-1 SUBJ BARRIER NOT-NPMOD OR HEAD) ;
#2022-09-07##SUBSTITUTE (@N<) (@N< <compl_advl>) TARGET (@N<) (*-1 @ADVL BARRIER NOT-NPMOD OR HEAD) ;
#2022-09-07##SUBSTITUTE (@Num<) (@Num< <compl_obj>) TARGET (@Num<) (*-1 OBJ BARRIER Num) ;
#2022-09-07##SUBSTITUTE (@Num<) (@Num< <compl_subj>) TARGET (@Num<) (*-1 SUBJ BARRIER Num) ;
#2022-09-07##SUBSTITUTE (@Num<) (@Num< <compl_advl>) TARGET (@Num<) (*-1 @ADVL BARRIER Num) ;
#2022-09-07##SUBSTITUTE (@>Num) (@>Num <compl_advl>) TARGET (A @>Num) OR (Pron @>Num) (*1 @ADVL BARRIER Num) ;
#2022-09-07##SUBSTITUTE (@>Num) (@>Num <compl_obj>) TARGET (A @>Num) OR (Pron @>Num) (*1 OBJ BARRIER Num) ;
#2022-09-07##SUBSTITUTE (@>Num) (@>Num <compl_subj>) TARGET (A @>Num) OR (Pron @>Num) (*1 SUBJ BARRIER Num) ;
#2022-09-07##SUBSTITUTE (@Pron<) (@Pron< <compl_obj>) TARGET (@Pron<) (-1 OBJ) ;
#2022-09-07##SUBSTITUTE (@Pron<) (@Pron< <compl_subj>) TARGET (@Pron<) (-1 SUBJ) ;
#2022-09-07##SUBSTITUTE (@Pron<) (@Pron< <compl_advl>) TARGET (@Pron<) (-1 @ADVL) ;

#For MT:

SUBSTITUTE (Sem/Act) (*) TARGET (Sem/Act) ;
SUBSTITUTE (Sem/Ani) (*) TARGET (Sem/Ani) ;
SUBSTITUTE (Sem/AniProd) (*) TARGET (Sem/AniProd) ;
SUBSTITUTE (Sem/Body) (*) TARGET (Sem/Body) ;
SUBSTITUTE (Sem/Build) (*) TARGET (Sem/Build) ;
SUBSTITUTE (Sem/Build-part) (*) TARGET (Sem/Build-part) ;
SUBSTITUTE (Sem/Clth) (*) TARGET (Sem/Clth) ;
SUBSTITUTE (Sem/Clth-jewl) (*) TARGET (Sem/Clth-jewl) ;
SUBSTITUTE (Sem/Ctain) (*) TARGET (Sem/Ctain) ;
SUBSTITUTE (Sem/Ctain-clth) (*) TARGET (Sem/Ctain-clth) ;
SUBSTITUTE (Sem/Ctain-abstr) (*) TARGET (Sem/Ctain-abstr) ;
SUBSTITUTE (Sem/Curr) (*) TARGET (Sem/Curr) ;
SUBSTITUTE (Sem/Date) (*) TARGET (Sem/Date) ;
SUBSTITUTE (Sem/Edu) (*) TARGET (Sem/Edu) ;
SUBSTITUTE (Sem/Emo) (*) TARGET (Sem/Emo) ;
SUBSTITUTE (Sem/Event) (*) TARGET (Sem/Event) ;
SUBSTITUTE (Sem/Feat-psych) (*) TARGET (Sem/Feat-psych) ;
SUBSTITUTE (Sem/Fem) (*) TARGET (Sem/Fem) ;
SUBSTITUTE (Sem/Food) (*) TARGET (Sem/Food) ;
SUBSTITUTE (Sem/Furn) (*) TARGET (Sem/Furn) ;
SUBSTITUTE (Sem/Group) (*) TARGET (Sem/Group) ;
SUBSTITUTE (Sem/Hum) (*) TARGET (Sem/Hum) ;
SUBSTITUTE (Sem/Year) (*) TARGET (Sem/Year) ;
SUBSTITUTE (Sem/Lang) (*) TARGET (Sem/Lang) ;
SUBSTITUTE (Sem/Mal) (*) TARGET (Sem/Mal) ;
SUBSTITUTE (Sem/Mat) (*) TARGET (Sem/Mat) ;
SUBSTITUTE (Sem/Measr) (*) TARGET (Sem/Measr) ;
SUBSTITUTE (Sem/Money) (*) TARGET (Sem/Money) ;
SUBSTITUTE (Sem/Obj) (*) TARGET (Sem/Obj) ;
SUBSTITUTE (Sem/Obj-clo) (*) TARGET (Sem/Obj-clo) ;
SUBSTITUTE (Sem/Obj-el) (*) TARGET (Sem/Obj-el) ;
SUBSTITUTE (Sem/Org) (*) TARGET (Sem/Org) ;
SUBSTITUTE (Sem/Perc-emo) (*) TARGET (Sem/Perc-emo) ;
SUBSTITUTE (Sem/Plant) (*) TARGET (Sem/Plant) ;
SUBSTITUTE (Sem/Plc) (*) TARGET (Sem/Plc) ;
SUBSTITUTE (Sem/Plc-line) (*) TARGET (Sem/Plc-line) ;
SUBSTITUTE (Sem/Plc-water) (*) TARGET (Sem/Plc-water) ;
SUBSTITUTE (Sem/Plc-elevate) (*) TARGET (Sem/Plc-elevate) ;
SUBSTITUTE (Sem/Substnc) (*) TARGET (Sem/Substnc) ;
SUBSTITUTE (Sem/Sur) (*) TARGET (Sem/Sur) ;
SUBSTITUTE (Sem/Route) (*) TARGET (Sem/Route) ;
SUBSTITUTE (Sem/Semcon) (*) TARGET (Sem/Semcon) ;
SUBSTITUTE (Sem/Time) (*) TARGET (Sem/Time) ;
SUBSTITUTE (Sem/Txt) (*) TARGET (Sem/Txt) ;
SUBSTITUTE (Sem/Veh) (*) TARGET (Sem/Veh) ;
SUBSTITUTE (Sem/Wpn) (*) TARGET (Sem/Wpn) ;
SUBSTITUTE (Sem/Wthr) (*) TARGET (Sem/Wthr) ;
SUBSTITUTE (Sem/Feat) (*) TARGET (Sem/Feat) ;
SUBSTITUTE (Sem/Part) (*) TARGET (Sem/Part) ;
SUBSTITUTE (Sem/Tool) (*) TARGET (Sem/Tool) ;
SUBSTITUTE (Sem/Tool-catch) (*) TARGET (Sem/Tool-catch) ;
SUBSTITUTE (Sem/Feat-phys) (*) TARGET (Sem/Feat-phys) ;
SUBSTITUTE (Sem/Clth-part) (*) TARGET (Sem/Clth-part) ;
SUBSTITUTE (Sem/Body-abstr) (*) TARGET (Sem/Body-abstr) ;
SUBSTITUTE (Sem/State) (*) TARGET (Sem/State) ;
SUBSTITUTE (<vdic>) (*) TARGET (<vdic>) ;
SUBSTITUTE (MWE) (*) TARGET (MWE) ;

SUBSTITUTE SUB:-1 (sem_act) (*) TARGET (sem_act) ;
SUBSTITUTE SUB:-1 (sem_ani) (*) TARGET (sem_ani) ;
SUBSTITUTE SUB:-1 (sem_aniprod) (*) TARGET (sem_aniprod) ;
SUBSTITUTE SUB:-1 (sem_body) (*) TARGET (sem_body) ;
SUBSTITUTE SUB:-1 (sem_build) (*) TARGET (sem_build) ;
SUBSTITUTE SUB:-1 (sem_build-part) (*) TARGET (sem_build-part) ;
SUBSTITUTE SUB:-1 (sem_clth) (*) TARGET (sem_clth) ;
SUBSTITUTE SUB:-1 (sem_clth-jewl) (*) TARGET (sem_clth-jewl) ;
SUBSTITUTE SUB:-1 (sem_ctain) (*) TARGET (sem_ctain) ;
SUBSTITUTE SUB:-1 (sem_curr) (*) TARGET (sem_curr) ;
SUBSTITUTE SUB:-1 (sem_date) (*) TARGET (sem_date) ;
SUBSTITUTE SUB:-1 (sem_edu) (*) TARGET (sem_edu) ;
SUBSTITUTE SUB:-1 (sem_emo) (*) TARGET (sem_emo) ;
SUBSTITUTE SUB:-1 (sem_event) (*) TARGET (sem_event) ;
SUBSTITUTE SUB:-1 (sem_fem) (*) TARGET (sem_fem) ;
SUBSTITUTE SUB:-1 (sem_food) (*) TARGET (sem_food) ;
SUBSTITUTE SUB:-1 (sem_furn) (*) TARGET (sem_furn) ;
SUBSTITUTE SUB:-1 (sem_group) (*) TARGET (sem_group) ;
SUBSTITUTE SUB:-1 (sem_hum) (*) TARGET (sem_hum) ;
SUBSTITUTE SUB:-1 (sem_lang) (*) TARGET (sem_lang) ;
SUBSTITUTE SUB:-1 (sem_mal) (*) TARGET (sem_mal) ;
SUBSTITUTE SUB:-1 (sem_mat) (*) TARGET (sem_mat) ;
SUBSTITUTE SUB:-1 (sem_measr) (*) TARGET (sem_measr) ;
SUBSTITUTE SUB:-1 (sem_money) (*) TARGET (sem_money) ;
SUBSTITUTE SUB:-1 (sem_obj) (*) TARGET (sem_obj) ;
SUBSTITUTE SUB:-1 (sem_obj-clo) (*) TARGET (sem_obj-clo) ;
SUBSTITUTE SUB:-1 (sem_obj-el) (*) TARGET (sem_obj-el) ;
SUBSTITUTE SUB:-1 (sem_org) (*) TARGET (sem_org) ;
SUBSTITUTE SUB:-1 (sem_plant) (*) TARGET (sem_plant) ;
SUBSTITUTE SUB:-1 (sem_perc-emo) (*) TARGET (sem_perc-emo) ;
SUBSTITUTE SUB:-1 (sem_plc) (*) TARGET (sem_plc) ; 
SUBSTITUTE SUB:-1 (sem_sur) (*) TARGET (sem_sur) ;
SUBSTITUTE SUB:-1 (sem_route) (*) TARGET (sem_route) ;
SUBSTITUTE SUB:-1 (sem_semcon) (*) TARGET (sem_semcon) ;
SUBSTITUTE SUB:-1 (sem_txt) (*) TARGET (sem_txt) ;
SUBSTITUTE SUB:-1 (sem_time) (*) TARGET (sem_time) ;
SUBSTITUTE SUB:-1 (sem_txt) (*) TARGET (sem_txt) ;
SUBSTITUTE SUB:-1 (sem_veh) (*) TARGET (sem_veh) ;
SUBSTITUTE SUB:-1 (sem_wpn) (*) TARGET (sem_wpn) ;
SUBSTITUTE SUB:-1 (sem_wthr) (*) TARGET (sem_wthr) ;
SUBSTITUTE SUB:-1 (←vdic→) (*) TARGET (←vdic→) ;

	#=====#
          END #
	#=====#
